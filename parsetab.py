
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND ASSIGN BOOL COMMA ELSE ENUM EQ FALSE GET_BOOL GET_INT GET_STRING GREATER GREATER_EQ ID IF INT LBRACE LESS LESS_EQ LPAREN LSQUARE MAIN NOT_EQ NUMBER RBRACE READF RPAREN RSQUARE SEMICOLON STR STRING TRUE VOID WHILE WRITELN\n    start : function\n    \n    start :  constants function\n    function : new_scope VOID MAIN LPAREN params RPAREN LBRACE expressions RBRACEfunction : new_scope VOID MAIN LPAREN params RPAREN LBRACE RBRACE\n    params :  STR LSQUARE RSQUARE ID\n    \n    params : empty\n    \n    expressions :     expressions expression\n    \n    expressions : expression\n    \n    expression :   constants\n                 | while\n                 | if\n                 | assigned\n                 | print\n                 | get\n    \n    assigned : ID ASSIGN type SEMICOLON\n    \n    while : WHILE LPAREN statement RPAREN LBRACE new_scope expressions RBRACE\n    \n    if :   IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE\n    \n    if :  IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE ELSE LBRACE new_scope expressions  RBRACE\n    \n    statement :   type logic_op type\n    \n    logic_op :    EQ\n                | NOT_EQ\n                | GREATER\n                | GREATER_EQ\n                | LESS\n                | LESS_EQ\n    \n    variable :    var_type init SEMICOLON\n    \n    init :  ID ASSIGN type\n    \n    init : ID\n    \n    var_type :    INT\n                | STR\n                | BOOL\n    \n    type :    NUMBER\n            | STRING\n            | boolean\n            | ID\n    \n    boolean :   TRUE\n              | FALSE\n    \n    constants :   constants constant\n                | constants variable\n    \n    constants :    constant\n                |  variable\n    \n    constant :    ENUM init SEMICOLON\n    \n    print :   WRITELN LPAREN type RPAREN SEMICOLON\n    \n    get :     READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON\n    \n    gets :    GET_INT\n            | GET_STRING\n            | GET_BOOL\n    empty :new_scope : empty'
    
_lr_action_items = {'LSQUARE':([32,],[35,]),'LESS_EQ':([24,25,26,27,28,30,62,],[-37,-33,-36,-32,-34,-35,71,]),'LPAREN':([22,41,47,50,51,],[31,54,57,59,60,]),'LESS':([24,25,26,27,28,30,62,],[-37,-33,-36,-32,-34,-35,74,]),'VOID':([0,1,4,6,9,10,18,19,21,23,],[-48,-40,15,-49,-41,-48,-38,-39,-26,-42,]),'NUMBER':([20,54,57,58,59,71,72,73,74,75,76,77,],[27,27,27,27,27,-25,27,-22,-24,-20,-23,-21,]),'GREATER_EQ':([24,25,26,27,28,30,62,],[-37,-33,-36,-32,-34,-35,76,]),'WHILE':([1,6,9,18,19,21,23,38,40,42,43,44,46,49,52,53,56,79,82,84,85,87,88,90,91,93,94,95,97,98,99,100,],[-40,-49,-41,-38,-39,-26,-42,41,-12,41,-11,-13,-14,-9,-10,-8,-7,-15,-48,-43,-48,41,41,41,41,-16,-17,-44,-48,41,41,-18,]),'TRUE':([20,54,57,58,59,71,72,73,74,75,76,77,],[26,26,26,26,26,-25,26,-22,-24,-20,-23,-21,]),'STRING':([20,54,57,58,59,71,72,73,74,75,76,77,],[25,25,25,25,25,-25,25,-22,-24,-20,-23,-21,]),'RSQUARE':([35,],[37,]),'RPAREN':([24,25,26,27,28,30,31,33,34,39,61,63,65,83,89,],[-37,-33,-36,-32,-34,-35,-48,36,-6,-5,70,78,80,-19,92,]),'SEMICOLON':([13,14,16,24,25,26,27,28,29,30,64,78,92,],[-28,21,23,-37,-33,-36,-32,-34,-27,-35,79,84,95,]),'GET_INT':([60,],[68,]),'COMMA':([66,67,68,69,],[-47,-46,-45,81,]),'NOT_EQ':([24,25,26,27,28,30,62,],[-37,-33,-36,-32,-34,-35,77,]),'ASSIGN':([13,48,],[20,58,]),'$end':([5,7,17,45,55,],[0,-1,-2,-4,-3,]),'GET_BOOL':([60,],[66,]),'RBRACE':([1,9,18,19,21,23,38,40,42,43,44,46,49,52,53,56,79,84,90,91,93,94,95,99,100,],[-40,-41,-38,-39,-26,-42,45,-12,55,-11,-13,-14,-9,-10,-8,-7,-15,-43,93,94,-16,-17,-44,100,-18,]),'ENUM':([0,1,6,9,10,18,19,21,23,38,40,42,43,44,46,49,52,53,56,79,82,84,85,87,88,90,91,93,94,95,97,98,99,100,],[8,-40,-49,-41,8,-38,-39,-26,-42,8,-12,8,-11,-13,-14,8,-10,-8,-7,-15,-48,-43,-48,8,8,8,8,-16,-17,-44,-48,8,8,-18,]),'ELSE':([94,],[96,]),'WRITELN':([1,6,9,18,19,21,23,38,40,42,43,44,46,49,52,53,56,79,82,84,85,87,88,90,91,93,94,95,97,98,99,100,],[-40,-49,-41,-38,-39,-26,-42,47,-12,47,-11,-13,-14,-9,-10,-8,-7,-15,-48,-43,-48,47,47,47,47,-16,-17,-44,-48,47,47,-18,]),'AMPERSAND':([81,],[86,]),'STR':([0,1,6,9,10,18,19,21,23,31,38,40,42,43,44,46,49,52,53,56,79,82,84,85,87,88,90,91,93,94,95,97,98,99,100,],[2,-40,-49,-41,2,-38,-39,-26,-42,32,2,-12,2,-11,-13,-14,2,-10,-8,-7,-15,-48,-43,-48,2,2,2,2,-16,-17,-44,-48,2,2,-18,]),'EQ':([24,25,26,27,28,30,62,],[-37,-33,-36,-32,-34,-35,75,]),'ID':([1,2,3,6,8,9,11,12,18,19,20,21,23,37,38,40,42,43,44,46,49,52,53,54,56,57,58,59,71,72,73,74,75,76,77,79,82,84,85,86,87,88,90,91,93,94,95,97,98,99,100,],[-40,-30,13,-49,13,-41,-29,-31,-38,-39,30,-26,-42,39,48,-12,48,-11,-13,-14,-9,-10,-8,30,-7,30,30,30,-25,30,-22,-24,-20,-23,-21,-15,-48,-43,-48,89,48,48,48,48,-16,-17,-44,-48,48,48,-18,]),'IF':([1,6,9,18,19,21,23,38,40,42,43,44,46,49,52,53,56,79,82,84,85,87,88,90,91,93,94,95,97,98,99,100,],[-40,-49,-41,-38,-39,-26,-42,50,-12,50,-11,-13,-14,-9,-10,-8,-7,-15,-48,-43,-48,50,50,50,50,-16,-17,-44,-48,50,50,-18,]),'LBRACE':([36,70,80,96,],[38,82,85,97,]),'FALSE':([20,54,57,58,59,71,72,73,74,75,76,77,],[24,24,24,24,24,-25,24,-22,-24,-20,-23,-21,]),'GREATER':([24,25,26,27,28,30,62,],[-37,-33,-36,-32,-34,-35,73,]),'READF':([1,6,9,18,19,21,23,38,40,42,43,44,46,49,52,53,56,79,82,84,85,87,88,90,91,93,94,95,97,98,99,100,],[-40,-49,-41,-38,-39,-26,-42,51,-12,51,-11,-13,-14,-9,-10,-8,-7,-15,-48,-43,-48,51,51,51,51,-16,-17,-44,-48,51,51,-18,]),'INT':([0,1,6,9,10,18,19,21,23,38,40,42,43,44,46,49,52,53,56,79,82,84,85,87,88,90,91,93,94,95,97,98,99,100,],[11,-40,-49,-41,11,-38,-39,-26,-42,11,-12,11,-11,-13,-14,11,-10,-8,-7,-15,-48,-43,-48,11,11,11,11,-16,-17,-44,-48,11,11,-18,]),'GET_STRING':([60,],[67,]),'BOOL':([0,1,6,9,10,18,19,21,23,38,40,42,43,44,46,49,52,53,56,79,82,84,85,87,88,90,91,93,94,95,97,98,99,100,],[12,-40,-49,-41,12,-38,-39,-26,-42,12,-12,12,-11,-13,-14,12,-10,-8,-7,-15,-48,-43,-48,12,12,12,12,-16,-17,-44,-48,12,12,-18,]),'MAIN':([15,],[22,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'constant':([0,10,38,42,49,87,88,90,91,98,99,],[1,18,1,1,18,1,1,1,1,1,1,]),'var_type':([0,10,38,42,49,87,88,90,91,98,99,],[3,3,3,3,3,3,3,3,3,3,3,]),'assigned':([38,42,87,88,90,91,98,99,],[40,40,40,40,40,40,40,40,]),'boolean':([20,54,57,58,59,72,],[28,28,28,28,28,28,]),'expressions':([38,87,88,98,],[42,90,91,99,]),'if':([38,42,87,88,90,91,98,99,],[43,43,43,43,43,43,43,43,]),'new_scope':([0,10,82,85,97,],[4,4,87,88,98,]),'start':([0,],[5,]),'init':([3,8,],[14,16,]),'params':([31,],[33,]),'statement':([54,59,],[61,65,]),'print':([38,42,87,88,90,91,98,99,],[44,44,44,44,44,44,44,44,]),'gets':([60,],[69,]),'type':([20,54,57,58,59,72,],[29,62,63,64,62,83,]),'empty':([0,10,31,82,85,97,],[6,6,34,6,6,6,]),'function':([0,10,],[7,17,]),'get':([38,42,87,88,90,91,98,99,],[46,46,46,46,46,46,46,46,]),'variable':([0,10,38,42,49,87,88,90,91,98,99,],[9,19,9,9,19,9,9,9,9,9,9,]),'constants':([0,38,42,87,88,90,91,98,99,],[10,49,49,49,49,49,49,49,49,]),'logic_op':([62,],[72,]),'while':([38,42,87,88,90,91,98,99,],[52,52,52,52,52,52,52,52,]),'expression':([38,42,87,88,90,91,98,99,],[53,56,53,53,56,56,53,56,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> function','start',1,'p_start','calc.py',303),
  ('start -> constants function','start',2,'p_start_constants','calc.py',313),
  ('function -> new_scope VOID MAIN LPAREN params RPAREN LBRACE expressions RBRACE','function',9,'p_function','calc.py',326),
  ('function -> new_scope VOID MAIN LPAREN params RPAREN LBRACE RBRACE','function',8,'p_empty_function','calc.py',330),
  ('params -> STR LSQUARE RSQUARE ID','params',4,'p_params','calc.py',338),
  ('params -> empty','params',1,'p_empty_params','calc.py',348),
  ('expressions -> expressions expression','expressions',2,'p_list_expressions','calc.py',355),
  ('expressions -> expression','expressions',1,'p_expressions','calc.py',361),
  ('expression -> constants','expression',1,'p_expression','calc.py',369),
  ('expression -> while','expression',1,'p_expression','calc.py',370),
  ('expression -> if','expression',1,'p_expression','calc.py',371),
  ('expression -> assigned','expression',1,'p_expression','calc.py',372),
  ('expression -> print','expression',1,'p_expression','calc.py',373),
  ('expression -> get','expression',1,'p_expression','calc.py',374),
  ('assigned -> ID ASSIGN type SEMICOLON','assigned',4,'p_assigned','calc.py',380),
  ('while -> WHILE LPAREN statement RPAREN LBRACE new_scope expressions RBRACE','while',8,'p_while','calc.py',387),
  ('if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE','if',8,'p_if','calc.py',395),
  ('if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE ELSE LBRACE new_scope expressions RBRACE','if',13,'p_if_else','calc.py',402),
  ('statement -> type logic_op type','statement',3,'p_statement','calc.py',414),
  ('logic_op -> EQ','logic_op',1,'p_logic_op','calc.py',421),
  ('logic_op -> NOT_EQ','logic_op',1,'p_logic_op','calc.py',422),
  ('logic_op -> GREATER','logic_op',1,'p_logic_op','calc.py',423),
  ('logic_op -> GREATER_EQ','logic_op',1,'p_logic_op','calc.py',424),
  ('logic_op -> LESS','logic_op',1,'p_logic_op','calc.py',425),
  ('logic_op -> LESS_EQ','logic_op',1,'p_logic_op','calc.py',426),
  ('variable -> var_type init SEMICOLON','variable',3,'p_variable','calc.py',436),
  ('init -> ID ASSIGN type','init',3,'p_init_value','calc.py',446),
  ('init -> ID','init',1,'p_init','calc.py',452),
  ('var_type -> INT','var_type',1,'p_var_type','calc.py',459),
  ('var_type -> STR','var_type',1,'p_var_type','calc.py',460),
  ('var_type -> BOOL','var_type',1,'p_var_type','calc.py',461),
  ('type -> NUMBER','type',1,'p_type','calc.py',470),
  ('type -> STRING','type',1,'p_type','calc.py',471),
  ('type -> boolean','type',1,'p_type','calc.py',472),
  ('type -> ID','type',1,'p_type','calc.py',473),
  ('boolean -> TRUE','boolean',1,'p_boolean','calc.py',480),
  ('boolean -> FALSE','boolean',1,'p_boolean','calc.py',481),
  ('constants -> constants constant','constants',2,'p_list_constants','calc.py',488),
  ('constants -> constants variable','constants',2,'p_list_constants','calc.py',489),
  ('constants -> constant','constants',1,'p_constants','calc.py',500),
  ('constants -> variable','constants',1,'p_constants','calc.py',501),
  ('constant -> ENUM init SEMICOLON','constant',3,'p_constant','calc.py',512),
  ('print -> WRITELN LPAREN type RPAREN SEMICOLON','print',5,'p_print','calc.py',534),
  ('get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON','get',8,'p_get','calc.py',543),
  ('gets -> GET_INT','gets',1,'p_gets','calc.py',549),
  ('gets -> GET_STRING','gets',1,'p_gets','calc.py',550),
  ('gets -> GET_BOOL','gets',1,'p_gets','calc.py',551),
  ('empty -> <empty>','empty',0,'p_empty','calc.py',557),
  ('new_scope -> empty','new_scope',1,'p_new_scope','calc.py',565),
]
