
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND ASSIGN BOOL COMMA ELSE ENUM EQ FALSE GET_BOOL GET_INT GET_STRING GREATER GREATER_EQ ID IF INT LBRACE LESS LESS_EQ LPAREN LSQUARE MAIN NOT_EQ NUMBER RBRACE READF RPAREN RSQUARE SEMICOLON STR STRING TRUE VOID WHILE WRITELNstart : functionfunction : constants VOID MAIN LPAREN params RPAREN LBRACE expressions RBRACE\n    params :  STR LSQUARE RSQUARE ID\n    \n    params : empty\n    \n    expressions :     expressions expression\n    \n    expressions : expression\n    \n    expression :   constants\n                 | while\n                 | if\n                 | assigned\n                 | print\n                 | get\n    \n    assigned : ID ASSIGN type SEMICOLON\n    \n    while : WHILE LPAREN statement RPAREN LBRACE expressions RBRACE\n    \n    if :   IF LPAREN statement RPAREN LBRACE expressions RBRACE\n    \n    if :  IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE\n    \n    statement :   type logic_op type\n    \n    logic_op :    EQ\n                | NOT_EQ\n                | GREATER\n                | GREATER_EQ\n                | LESS\n                | LESS_EQ\n    \n    variable :    var_type inits SEMICOLON\n    \n    inits : inits COMMA init\n    \n    inits : init\n    \n    init :  ID ASSIGN type\n    \n    init : ID\n    \n    var_type :    INT\n                | STR\n                | BOOL\n    \n    type : NUMBER\n    \n    type : STRING\n    \n    type : boolean\n    \n    type : ID\n    \n    boolean :   TRUE\n              | FALSE\n    \n    constants :   constants constant\n                | constants variable\n    \n    constants :    constant\n                |  variable\n    \n    constant :    ENUM inits SEMICOLON\n    \n    constant : empty\n    \n    print :   WRITELN LPAREN type RPAREN SEMICOLON\n    \n    get :     READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON\n    \n    gets :    GET_INT\n            | GET_STRING\n            | GET_BOOL\n    empty :'
    
_lr_action_items = {'LSQUARE':([33,],[36,]),'LESS_EQ':([25,26,27,28,29,31,62,],[-37,-33,-36,-32,-34,-35,71,]),'LPAREN':([23,42,47,50,51,],[32,54,57,59,60,]),'LESS':([25,26,27,28,29,31,62,],[-37,-33,-36,-32,-34,-35,74,]),'VOID':([0,7,8,9,11,17,18,20,22,],[-49,-43,-41,-40,16,-39,-38,-42,-24,]),'NUMBER':([21,54,57,58,59,71,72,73,74,75,76,77,],[28,28,28,28,28,-23,28,-20,-22,-18,-21,-19,]),'GREATER_EQ':([25,26,27,28,29,31,62,],[-37,-33,-36,-32,-34,-35,76,]),'WHILE':([7,8,9,17,18,20,22,39,41,43,44,45,46,49,52,53,56,79,82,84,85,87,88,90,91,94,95,96,97,],[-43,-41,-40,-39,-38,-42,-24,42,-10,42,-9,-11,-12,-7,-8,-6,-5,-13,42,-44,42,42,42,-14,-15,-45,42,42,-16,]),'TRUE':([21,54,57,58,59,71,72,73,74,75,76,77,],[27,27,27,27,27,-23,27,-20,-22,-18,-21,-19,]),'STRING':([21,54,57,58,59,71,72,73,74,75,76,77,],[26,26,26,26,26,-23,26,-20,-22,-18,-21,-19,]),'RSQUARE':([36,],[38,]),'RPAREN':([25,26,27,28,29,31,32,34,35,40,61,63,65,83,89,],[-37,-33,-36,-32,-34,-35,-49,37,-4,-3,70,78,80,-17,92,]),'SEMICOLON':([12,13,14,15,24,25,26,27,28,29,30,31,64,78,92,],[-26,20,-28,22,-25,-37,-33,-36,-32,-34,-27,-35,79,84,94,]),'GET_INT':([60,],[68,]),'COMMA':([12,13,14,15,24,25,26,27,28,29,30,31,66,67,68,69,],[-26,19,-28,19,-25,-37,-33,-36,-32,-34,-27,-35,-48,-47,-46,81,]),'NOT_EQ':([25,26,27,28,29,31,62,],[-37,-33,-36,-32,-34,-35,77,]),'ASSIGN':([14,48,],[21,58,]),'$end':([1,5,55,],[-1,0,-2,]),'GET_BOOL':([60,],[66,]),'RBRACE':([7,8,9,17,18,20,22,39,41,43,44,45,46,49,52,53,56,79,82,84,85,87,88,90,91,94,95,96,97,],[-43,-41,-40,-39,-38,-42,-24,-49,-10,55,-9,-11,-12,-7,-8,-6,-5,-13,-49,-44,-49,90,91,-14,-15,-45,-49,97,-16,]),'ENUM':([0,7,8,9,11,17,18,20,22,39,41,43,44,45,46,49,52,53,56,79,82,84,85,87,88,90,91,94,95,96,97,],[3,-43,-41,-40,3,-39,-38,-42,-24,3,-10,3,-9,-11,-12,3,-8,-6,-5,-13,3,-44,3,3,3,-14,-15,-45,3,3,-16,]),'ELSE':([91,],[93,]),'WRITELN':([7,8,9,17,18,20,22,39,41,43,44,45,46,49,52,53,56,79,82,84,85,87,88,90,91,94,95,96,97,],[-43,-41,-40,-39,-38,-42,-24,47,-10,47,-9,-11,-12,-7,-8,-6,-5,-13,47,-44,47,47,47,-14,-15,-45,47,47,-16,]),'AMPERSAND':([81,],[86,]),'STR':([0,7,8,9,11,17,18,20,22,32,39,41,43,44,45,46,49,52,53,56,79,82,84,85,87,88,90,91,94,95,96,97,],[10,-43,-41,-40,10,-39,-38,-42,-24,33,10,-10,10,-9,-11,-12,10,-8,-6,-5,-13,10,-44,10,10,10,-14,-15,-45,10,10,-16,]),'EQ':([25,26,27,28,29,31,62,],[-37,-33,-36,-32,-34,-35,75,]),'ID':([2,3,4,6,7,8,9,10,17,18,19,20,21,22,38,39,41,43,44,45,46,49,52,53,54,56,57,58,59,71,72,73,74,75,76,77,79,82,84,85,86,87,88,90,91,94,95,96,97,],[-29,14,14,-31,-43,-41,-40,-30,-39,-38,14,-42,31,-24,40,48,-10,48,-9,-11,-12,-7,-8,-6,31,-5,31,31,31,-23,31,-20,-22,-18,-21,-19,-13,48,-44,48,89,48,48,-14,-15,-45,48,48,-16,]),'IF':([7,8,9,17,18,20,22,39,41,43,44,45,46,49,52,53,56,79,82,84,85,87,88,90,91,94,95,96,97,],[-43,-41,-40,-39,-38,-42,-24,50,-10,50,-9,-11,-12,-7,-8,-6,-5,-13,50,-44,50,50,50,-14,-15,-45,50,50,-16,]),'LBRACE':([37,70,80,93,],[39,82,85,95,]),'FALSE':([21,54,57,58,59,71,72,73,74,75,76,77,],[25,25,25,25,25,-23,25,-20,-22,-18,-21,-19,]),'GREATER':([25,26,27,28,29,31,62,],[-37,-33,-36,-32,-34,-35,73,]),'READF':([7,8,9,17,18,20,22,39,41,43,44,45,46,49,52,53,56,79,82,84,85,87,88,90,91,94,95,96,97,],[-43,-41,-40,-39,-38,-42,-24,51,-10,51,-9,-11,-12,-7,-8,-6,-5,-13,51,-44,51,51,51,-14,-15,-45,51,51,-16,]),'INT':([0,7,8,9,11,17,18,20,22,39,41,43,44,45,46,49,52,53,56,79,82,84,85,87,88,90,91,94,95,96,97,],[2,-43,-41,-40,2,-39,-38,-42,-24,2,-10,2,-9,-11,-12,2,-8,-6,-5,-13,2,-44,2,2,2,-14,-15,-45,2,2,-16,]),'GET_STRING':([60,],[67,]),'BOOL':([0,7,8,9,11,17,18,20,22,39,41,43,44,45,46,49,52,53,56,79,82,84,85,87,88,90,91,94,95,96,97,],[6,-43,-41,-40,6,-39,-38,-42,-24,6,-10,6,-9,-11,-12,6,-8,-6,-5,-13,6,-44,6,6,6,-14,-15,-45,6,6,-16,]),'MAIN':([16,],[23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'constant':([0,11,39,43,49,82,85,87,88,95,96,],[9,18,9,9,18,9,9,9,9,9,9,]),'var_type':([0,11,39,43,49,82,85,87,88,95,96,],[4,4,4,4,4,4,4,4,4,4,4,]),'assigned':([39,43,82,85,87,88,95,96,],[41,41,41,41,41,41,41,41,]),'boolean':([21,54,57,58,59,72,],[29,29,29,29,29,29,]),'expressions':([39,82,85,95,],[43,87,88,96,]),'if':([39,43,82,85,87,88,95,96,],[44,44,44,44,44,44,44,44,]),'start':([0,],[5,]),'init':([3,4,19,],[12,12,24,]),'params':([32,],[34,]),'statement':([54,59,],[61,65,]),'print':([39,43,82,85,87,88,95,96,],[45,45,45,45,45,45,45,45,]),'gets':([60,],[69,]),'type':([21,54,57,58,59,72,],[30,62,63,64,62,83,]),'empty':([0,11,32,39,43,49,82,85,87,88,95,96,],[7,7,35,7,7,7,7,7,7,7,7,7,]),'function':([0,],[1,]),'get':([39,43,82,85,87,88,95,96,],[46,46,46,46,46,46,46,46,]),'inits':([3,4,],[13,15,]),'variable':([0,11,39,43,49,82,85,87,88,95,96,],[8,17,8,8,17,8,8,8,8,8,8,]),'constants':([0,39,43,82,85,87,88,95,96,],[11,49,49,49,49,49,49,49,49,]),'logic_op':([62,],[72,]),'while':([39,43,82,85,87,88,95,96,],[52,52,52,52,52,52,52,52,]),'expression':([39,43,82,85,87,88,95,96,],[53,56,53,53,56,56,53,56,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> function','start',1,'p_start','calc.py',293),
  ('function -> constants VOID MAIN LPAREN params RPAREN LBRACE expressions RBRACE','function',9,'p_function','calc.py',301),
  ('params -> STR LSQUARE RSQUARE ID','params',4,'p_params','calc.py',308),
  ('params -> empty','params',1,'p_empty_params','calc.py',314),
  ('expressions -> expressions expression','expressions',2,'p_list_expressions','calc.py',321),
  ('expressions -> expression','expressions',1,'p_expressions','calc.py',326),
  ('expression -> constants','expression',1,'p_expression','calc.py',333),
  ('expression -> while','expression',1,'p_expression','calc.py',334),
  ('expression -> if','expression',1,'p_expression','calc.py',335),
  ('expression -> assigned','expression',1,'p_expression','calc.py',336),
  ('expression -> print','expression',1,'p_expression','calc.py',337),
  ('expression -> get','expression',1,'p_expression','calc.py',338),
  ('assigned -> ID ASSIGN type SEMICOLON','assigned',4,'p_assigned','calc.py',344),
  ('while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE','while',7,'p_while','calc.py',350),
  ('if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE','if',7,'p_if','calc.py',357),
  ('if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE','if',11,'p_if_else','calc.py',363),
  ('statement -> type logic_op type','statement',3,'p_statement','calc.py',373),
  ('logic_op -> EQ','logic_op',1,'p_logic_op','calc.py',380),
  ('logic_op -> NOT_EQ','logic_op',1,'p_logic_op','calc.py',381),
  ('logic_op -> GREATER','logic_op',1,'p_logic_op','calc.py',382),
  ('logic_op -> GREATER_EQ','logic_op',1,'p_logic_op','calc.py',383),
  ('logic_op -> LESS','logic_op',1,'p_logic_op','calc.py',384),
  ('logic_op -> LESS_EQ','logic_op',1,'p_logic_op','calc.py',385),
  ('variable -> var_type inits SEMICOLON','variable',3,'p_variable','calc.py',395),
  ('inits -> inits COMMA init','inits',3,'p_inits','calc.py',401),
  ('inits -> init','inits',1,'p_inits_single','calc.py',407),
  ('init -> ID ASSIGN type','init',3,'p_init_value','calc.py',413),
  ('init -> ID','init',1,'p_init','calc.py',419),
  ('var_type -> INT','var_type',1,'p_var_type','calc.py',426),
  ('var_type -> STR','var_type',1,'p_var_type','calc.py',427),
  ('var_type -> BOOL','var_type',1,'p_var_type','calc.py',428),
  ('type -> NUMBER','type',1,'p_type_integer','calc.py',437),
  ('type -> STRING','type',1,'p_type_string','calc.py',443),
  ('type -> boolean','type',1,'p_type_boolean','calc.py',449),
  ('type -> ID','type',1,'p_type_id','calc.py',455),
  ('boolean -> TRUE','boolean',1,'p_boolean','calc.py',462),
  ('boolean -> FALSE','boolean',1,'p_boolean','calc.py',463),
  ('constants -> constants constant','constants',2,'p_list_constants','calc.py',470),
  ('constants -> constants variable','constants',2,'p_list_constants','calc.py',471),
  ('constants -> constant','constants',1,'p_constants','calc.py',480),
  ('constants -> variable','constants',1,'p_constants','calc.py',481),
  ('constant -> ENUM inits SEMICOLON','constant',3,'p_constant','calc.py',492),
  ('constant -> empty','constant',1,'p_no_constant','calc.py',498),
  ('print -> WRITELN LPAREN type RPAREN SEMICOLON','print',5,'p_print','calc.py',508),
  ('get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON','get',8,'p_get','calc.py',517),
  ('gets -> GET_INT','gets',1,'p_gets','calc.py',523),
  ('gets -> GET_STRING','gets',1,'p_gets','calc.py',524),
  ('gets -> GET_BOOL','gets',1,'p_gets','calc.py',525),
  ('empty -> <empty>','empty',0,'p_empty','calc.py',531),
]
