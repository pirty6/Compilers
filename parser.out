Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> function
Rule 2     function -> constants VOID MAIN LPAREN params RPAREN LBRACE expressions RBRACE constants
Rule 3     params -> STR LSQUARE RSQUARE ID
Rule 4     params -> empty
Rule 5     expressions -> expressions expression
Rule 6     expressions -> expression
Rule 7     expression -> constants
Rule 8     expression -> while
Rule 9     expression -> if
Rule 10    expression -> ID ASSIGN type SEMICOLON
Rule 11    expression -> print
Rule 12    expression -> get
Rule 13    while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
Rule 14    if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE
Rule 15    if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
Rule 16    statement -> type logic_op type
Rule 17    logic_op -> EQ
Rule 18    logic_op -> NOT_EQ
Rule 19    logic_op -> GREATER
Rule 20    logic_op -> GREATER_EQ
Rule 21    logic_op -> LESS
Rule 22    logic_op -> LESS_EQ
Rule 23    variable -> var_type ID ASSIGN type SEMICOLON
Rule 24    variable -> var_type ID SEMICOLON
Rule 25    var_type -> INT
Rule 26    var_type -> STR
Rule 27    var_type -> BOOL
Rule 28    type -> NUMBER
Rule 29    type -> STRING
Rule 30    type -> boolean
Rule 31    type -> ID
Rule 32    boolean -> TRUE
Rule 33    boolean -> FALSE
Rule 34    constants -> constants constant
Rule 35    constants -> constants variable
Rule 36    constants -> constant
Rule 37    constants -> variable
Rule 38    constant -> ENUM ID ASSIGN type SEMICOLON
Rule 39    constant -> ENUM ID SEMICOLON
Rule 40    constant -> empty
Rule 41    print -> WRITELN LPAREN type RPAREN SEMICOLON
Rule 42    get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON
Rule 43    gets -> GET_INT
Rule 44    gets -> GET_STRING
Rule 45    gets -> GET_BOOL
Rule 46    empty -> <empty>

Terminals, with rules where they appear

AMPERSAND            : 42
ASSIGN               : 10 23 38
BOOL                 : 27
COMMA                : 42
ELSE                 : 15
ENUM                 : 38 39
EQ                   : 17
FALSE                : 33
GET_BOOL             : 45
GET_INT              : 43
GET_STRING           : 44
GREATER              : 19
GREATER_EQ           : 20
ID                   : 3 10 23 24 31 38 39 42
IF                   : 14 15
INT                  : 25
LBRACE               : 2 13 14 15 15
LESS                 : 21
LESS_EQ              : 22
LPAREN               : 2 13 14 15 41 42
LSQUARE              : 3
MAIN                 : 2
NOT_EQ               : 18
NUMBER               : 28
RBRACE               : 2 13 14 15 15
READF                : 42
RPAREN               : 2 13 14 15 41 42
RSQUARE              : 3
SEMICOLON            : 10 23 24 38 39 41 42
STR                  : 3 26
STRING               : 29
TRUE                 : 32
VOID                 : 2
WHILE                : 13
WRITELN              : 41
error                : 

Nonterminals, with rules where they appear

boolean              : 30
constant             : 34 36
constants            : 2 2 7 34 35
empty                : 4 40
expression           : 5 6
expressions          : 2 5 13 14 15 15
function             : 1
get                  : 12
gets                 : 42
if                   : 9
logic_op             : 16
params               : 2
print                : 11
start                : 0
statement            : 13 14 15
type                 : 10 16 16 23 38 41
var_type             : 23 24
variable             : 35 37
while                : 8

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . function
    (2) function -> . constants VOID MAIN LPAREN params RPAREN LBRACE expressions RBRACE constants
    (34) constants -> . constants constant
    (35) constants -> . constants variable
    (36) constants -> . constant
    (37) constants -> . variable
    (38) constant -> . ENUM ID ASSIGN type SEMICOLON
    (39) constant -> . ENUM ID SEMICOLON
    (40) constant -> . empty
    (23) variable -> . var_type ID ASSIGN type SEMICOLON
    (24) variable -> . var_type ID SEMICOLON
    (46) empty -> .
    (25) var_type -> . INT
    (26) var_type -> . STR
    (27) var_type -> . BOOL

  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    ENUM            shift and go to state 7
    VOID            reduce using rule 46 (empty -> .)
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 11

  ! ENUM            [ reduce using rule 46 (empty -> .) ]
  ! INT             [ reduce using rule 46 (empty -> .) ]
  ! STR             [ reduce using rule 46 (empty -> .) ]
  ! BOOL            [ reduce using rule 46 (empty -> .) ]

    function                       shift and go to state 6
    constant                       shift and go to state 1
    var_type                       shift and go to state 3
    start                          shift and go to state 4
    empty                          shift and go to state 5
    variable                       shift and go to state 8
    constants                      shift and go to state 9

state 1

    (36) constants -> constant .

    ENUM            reduce using rule 36 (constants -> constant .)
    INT             reduce using rule 36 (constants -> constant .)
    STR             reduce using rule 36 (constants -> constant .)
    BOOL            reduce using rule 36 (constants -> constant .)
    RBRACE          reduce using rule 36 (constants -> constant .)
    ID              reduce using rule 36 (constants -> constant .)
    WHILE           reduce using rule 36 (constants -> constant .)
    IF              reduce using rule 36 (constants -> constant .)
    WRITELN         reduce using rule 36 (constants -> constant .)
    READF           reduce using rule 36 (constants -> constant .)
    $end            reduce using rule 36 (constants -> constant .)
    VOID            reduce using rule 36 (constants -> constant .)


state 2

    (26) var_type -> STR .

    ID              reduce using rule 26 (var_type -> STR .)


state 3

    (23) variable -> var_type . ID ASSIGN type SEMICOLON
    (24) variable -> var_type . ID SEMICOLON

    ID              shift and go to state 12


state 4

    (0) S' -> start .



state 5

    (40) constant -> empty .

    ENUM            reduce using rule 40 (constant -> empty .)
    INT             reduce using rule 40 (constant -> empty .)
    STR             reduce using rule 40 (constant -> empty .)
    BOOL            reduce using rule 40 (constant -> empty .)
    RBRACE          reduce using rule 40 (constant -> empty .)
    ID              reduce using rule 40 (constant -> empty .)
    WHILE           reduce using rule 40 (constant -> empty .)
    IF              reduce using rule 40 (constant -> empty .)
    WRITELN         reduce using rule 40 (constant -> empty .)
    READF           reduce using rule 40 (constant -> empty .)
    VOID            reduce using rule 40 (constant -> empty .)
    $end            reduce using rule 40 (constant -> empty .)


state 6

    (1) start -> function .

    $end            reduce using rule 1 (start -> function .)


state 7

    (38) constant -> ENUM . ID ASSIGN type SEMICOLON
    (39) constant -> ENUM . ID SEMICOLON

    ID              shift and go to state 13


state 8

    (37) constants -> variable .

    ENUM            reduce using rule 37 (constants -> variable .)
    INT             reduce using rule 37 (constants -> variable .)
    STR             reduce using rule 37 (constants -> variable .)
    BOOL            reduce using rule 37 (constants -> variable .)
    RBRACE          reduce using rule 37 (constants -> variable .)
    ID              reduce using rule 37 (constants -> variable .)
    WHILE           reduce using rule 37 (constants -> variable .)
    IF              reduce using rule 37 (constants -> variable .)
    WRITELN         reduce using rule 37 (constants -> variable .)
    READF           reduce using rule 37 (constants -> variable .)
    $end            reduce using rule 37 (constants -> variable .)
    VOID            reduce using rule 37 (constants -> variable .)


state 9

    (2) function -> constants . VOID MAIN LPAREN params RPAREN LBRACE expressions RBRACE constants
    (34) constants -> constants . constant
    (35) constants -> constants . variable
    (38) constant -> . ENUM ID ASSIGN type SEMICOLON
    (39) constant -> . ENUM ID SEMICOLON
    (40) constant -> . empty
    (23) variable -> . var_type ID ASSIGN type SEMICOLON
    (24) variable -> . var_type ID SEMICOLON
    (46) empty -> .
    (25) var_type -> . INT
    (26) var_type -> . STR
    (27) var_type -> . BOOL

  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    VOID            shift and go to state 14
    ENUM            shift and go to state 7
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 11

  ! VOID            [ reduce using rule 46 (empty -> .) ]
  ! ENUM            [ reduce using rule 46 (empty -> .) ]
  ! INT             [ reduce using rule 46 (empty -> .) ]
  ! STR             [ reduce using rule 46 (empty -> .) ]
  ! BOOL            [ reduce using rule 46 (empty -> .) ]

    constant                       shift and go to state 16
    var_type                       shift and go to state 3
    empty                          shift and go to state 5
    variable                       shift and go to state 15

state 10

    (25) var_type -> INT .

    ID              reduce using rule 25 (var_type -> INT .)


state 11

    (27) var_type -> BOOL .

    ID              reduce using rule 27 (var_type -> BOOL .)


state 12

    (23) variable -> var_type ID . ASSIGN type SEMICOLON
    (24) variable -> var_type ID . SEMICOLON

    ASSIGN          shift and go to state 18
    SEMICOLON       shift and go to state 17


state 13

    (38) constant -> ENUM ID . ASSIGN type SEMICOLON
    (39) constant -> ENUM ID . SEMICOLON

    ASSIGN          shift and go to state 20
    SEMICOLON       shift and go to state 19


state 14

    (2) function -> constants VOID . MAIN LPAREN params RPAREN LBRACE expressions RBRACE constants

    MAIN            shift and go to state 21


state 15

    (35) constants -> constants variable .

    ENUM            reduce using rule 35 (constants -> constants variable .)
    INT             reduce using rule 35 (constants -> constants variable .)
    STR             reduce using rule 35 (constants -> constants variable .)
    BOOL            reduce using rule 35 (constants -> constants variable .)
    RBRACE          reduce using rule 35 (constants -> constants variable .)
    ID              reduce using rule 35 (constants -> constants variable .)
    WHILE           reduce using rule 35 (constants -> constants variable .)
    IF              reduce using rule 35 (constants -> constants variable .)
    WRITELN         reduce using rule 35 (constants -> constants variable .)
    READF           reduce using rule 35 (constants -> constants variable .)
    $end            reduce using rule 35 (constants -> constants variable .)
    VOID            reduce using rule 35 (constants -> constants variable .)


state 16

    (34) constants -> constants constant .

    ENUM            reduce using rule 34 (constants -> constants constant .)
    INT             reduce using rule 34 (constants -> constants constant .)
    STR             reduce using rule 34 (constants -> constants constant .)
    BOOL            reduce using rule 34 (constants -> constants constant .)
    RBRACE          reduce using rule 34 (constants -> constants constant .)
    ID              reduce using rule 34 (constants -> constants constant .)
    WHILE           reduce using rule 34 (constants -> constants constant .)
    IF              reduce using rule 34 (constants -> constants constant .)
    WRITELN         reduce using rule 34 (constants -> constants constant .)
    READF           reduce using rule 34 (constants -> constants constant .)
    $end            reduce using rule 34 (constants -> constants constant .)
    VOID            reduce using rule 34 (constants -> constants constant .)


state 17

    (24) variable -> var_type ID SEMICOLON .

    ENUM            reduce using rule 24 (variable -> var_type ID SEMICOLON .)
    INT             reduce using rule 24 (variable -> var_type ID SEMICOLON .)
    STR             reduce using rule 24 (variable -> var_type ID SEMICOLON .)
    BOOL            reduce using rule 24 (variable -> var_type ID SEMICOLON .)
    RBRACE          reduce using rule 24 (variable -> var_type ID SEMICOLON .)
    ID              reduce using rule 24 (variable -> var_type ID SEMICOLON .)
    WHILE           reduce using rule 24 (variable -> var_type ID SEMICOLON .)
    IF              reduce using rule 24 (variable -> var_type ID SEMICOLON .)
    WRITELN         reduce using rule 24 (variable -> var_type ID SEMICOLON .)
    READF           reduce using rule 24 (variable -> var_type ID SEMICOLON .)
    VOID            reduce using rule 24 (variable -> var_type ID SEMICOLON .)
    $end            reduce using rule 24 (variable -> var_type ID SEMICOLON .)


state 18

    (23) variable -> var_type ID ASSIGN . type SEMICOLON
    (28) type -> . NUMBER
    (29) type -> . STRING
    (30) type -> . boolean
    (31) type -> . ID
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    NUMBER          shift and go to state 24
    STRING          shift and go to state 28
    ID              shift and go to state 27
    TRUE            shift and go to state 23
    FALSE           shift and go to state 22

    boolean                        shift and go to state 25
    type                           shift and go to state 26

state 19

    (39) constant -> ENUM ID SEMICOLON .

    ENUM            reduce using rule 39 (constant -> ENUM ID SEMICOLON .)
    INT             reduce using rule 39 (constant -> ENUM ID SEMICOLON .)
    STR             reduce using rule 39 (constant -> ENUM ID SEMICOLON .)
    BOOL            reduce using rule 39 (constant -> ENUM ID SEMICOLON .)
    RBRACE          reduce using rule 39 (constant -> ENUM ID SEMICOLON .)
    ID              reduce using rule 39 (constant -> ENUM ID SEMICOLON .)
    WHILE           reduce using rule 39 (constant -> ENUM ID SEMICOLON .)
    IF              reduce using rule 39 (constant -> ENUM ID SEMICOLON .)
    WRITELN         reduce using rule 39 (constant -> ENUM ID SEMICOLON .)
    READF           reduce using rule 39 (constant -> ENUM ID SEMICOLON .)
    VOID            reduce using rule 39 (constant -> ENUM ID SEMICOLON .)
    $end            reduce using rule 39 (constant -> ENUM ID SEMICOLON .)


state 20

    (38) constant -> ENUM ID ASSIGN . type SEMICOLON
    (28) type -> . NUMBER
    (29) type -> . STRING
    (30) type -> . boolean
    (31) type -> . ID
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    NUMBER          shift and go to state 24
    STRING          shift and go to state 28
    ID              shift and go to state 27
    TRUE            shift and go to state 23
    FALSE           shift and go to state 22

    boolean                        shift and go to state 25
    type                           shift and go to state 29

state 21

    (2) function -> constants VOID MAIN . LPAREN params RPAREN LBRACE expressions RBRACE constants

    LPAREN          shift and go to state 30


state 22

    (33) boolean -> FALSE .

    RPAREN          reduce using rule 33 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 33 (boolean -> FALSE .)
    EQ              reduce using rule 33 (boolean -> FALSE .)
    NOT_EQ          reduce using rule 33 (boolean -> FALSE .)
    GREATER         reduce using rule 33 (boolean -> FALSE .)
    GREATER_EQ      reduce using rule 33 (boolean -> FALSE .)
    LESS            reduce using rule 33 (boolean -> FALSE .)
    LESS_EQ         reduce using rule 33 (boolean -> FALSE .)


state 23

    (32) boolean -> TRUE .

    RPAREN          reduce using rule 32 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 32 (boolean -> TRUE .)
    EQ              reduce using rule 32 (boolean -> TRUE .)
    NOT_EQ          reduce using rule 32 (boolean -> TRUE .)
    GREATER         reduce using rule 32 (boolean -> TRUE .)
    GREATER_EQ      reduce using rule 32 (boolean -> TRUE .)
    LESS            reduce using rule 32 (boolean -> TRUE .)
    LESS_EQ         reduce using rule 32 (boolean -> TRUE .)


state 24

    (28) type -> NUMBER .

    RPAREN          reduce using rule 28 (type -> NUMBER .)
    EQ              reduce using rule 28 (type -> NUMBER .)
    NOT_EQ          reduce using rule 28 (type -> NUMBER .)
    GREATER         reduce using rule 28 (type -> NUMBER .)
    GREATER_EQ      reduce using rule 28 (type -> NUMBER .)
    LESS            reduce using rule 28 (type -> NUMBER .)
    LESS_EQ         reduce using rule 28 (type -> NUMBER .)
    SEMICOLON       reduce using rule 28 (type -> NUMBER .)


state 25

    (30) type -> boolean .

    RPAREN          reduce using rule 30 (type -> boolean .)
    EQ              reduce using rule 30 (type -> boolean .)
    NOT_EQ          reduce using rule 30 (type -> boolean .)
    GREATER         reduce using rule 30 (type -> boolean .)
    GREATER_EQ      reduce using rule 30 (type -> boolean .)
    LESS            reduce using rule 30 (type -> boolean .)
    LESS_EQ         reduce using rule 30 (type -> boolean .)
    SEMICOLON       reduce using rule 30 (type -> boolean .)


state 26

    (23) variable -> var_type ID ASSIGN type . SEMICOLON

    SEMICOLON       shift and go to state 31


state 27

    (31) type -> ID .

    RPAREN          reduce using rule 31 (type -> ID .)
    EQ              reduce using rule 31 (type -> ID .)
    NOT_EQ          reduce using rule 31 (type -> ID .)
    GREATER         reduce using rule 31 (type -> ID .)
    GREATER_EQ      reduce using rule 31 (type -> ID .)
    LESS            reduce using rule 31 (type -> ID .)
    LESS_EQ         reduce using rule 31 (type -> ID .)
    SEMICOLON       reduce using rule 31 (type -> ID .)


state 28

    (29) type -> STRING .

    RPAREN          reduce using rule 29 (type -> STRING .)
    EQ              reduce using rule 29 (type -> STRING .)
    NOT_EQ          reduce using rule 29 (type -> STRING .)
    GREATER         reduce using rule 29 (type -> STRING .)
    GREATER_EQ      reduce using rule 29 (type -> STRING .)
    LESS            reduce using rule 29 (type -> STRING .)
    LESS_EQ         reduce using rule 29 (type -> STRING .)
    SEMICOLON       reduce using rule 29 (type -> STRING .)


state 29

    (38) constant -> ENUM ID ASSIGN type . SEMICOLON

    SEMICOLON       shift and go to state 32


state 30

    (2) function -> constants VOID MAIN LPAREN . params RPAREN LBRACE expressions RBRACE constants
    (3) params -> . STR LSQUARE RSQUARE ID
    (4) params -> . empty
    (46) empty -> .

    STR             shift and go to state 33
    RPAREN          reduce using rule 46 (empty -> .)

    params                         shift and go to state 34
    empty                          shift and go to state 35

state 31

    (23) variable -> var_type ID ASSIGN type SEMICOLON .

    ENUM            reduce using rule 23 (variable -> var_type ID ASSIGN type SEMICOLON .)
    INT             reduce using rule 23 (variable -> var_type ID ASSIGN type SEMICOLON .)
    STR             reduce using rule 23 (variable -> var_type ID ASSIGN type SEMICOLON .)
    BOOL            reduce using rule 23 (variable -> var_type ID ASSIGN type SEMICOLON .)
    RBRACE          reduce using rule 23 (variable -> var_type ID ASSIGN type SEMICOLON .)
    ID              reduce using rule 23 (variable -> var_type ID ASSIGN type SEMICOLON .)
    WHILE           reduce using rule 23 (variable -> var_type ID ASSIGN type SEMICOLON .)
    IF              reduce using rule 23 (variable -> var_type ID ASSIGN type SEMICOLON .)
    WRITELN         reduce using rule 23 (variable -> var_type ID ASSIGN type SEMICOLON .)
    READF           reduce using rule 23 (variable -> var_type ID ASSIGN type SEMICOLON .)
    VOID            reduce using rule 23 (variable -> var_type ID ASSIGN type SEMICOLON .)
    $end            reduce using rule 23 (variable -> var_type ID ASSIGN type SEMICOLON .)


state 32

    (38) constant -> ENUM ID ASSIGN type SEMICOLON .

    ENUM            reduce using rule 38 (constant -> ENUM ID ASSIGN type SEMICOLON .)
    INT             reduce using rule 38 (constant -> ENUM ID ASSIGN type SEMICOLON .)
    STR             reduce using rule 38 (constant -> ENUM ID ASSIGN type SEMICOLON .)
    BOOL            reduce using rule 38 (constant -> ENUM ID ASSIGN type SEMICOLON .)
    RBRACE          reduce using rule 38 (constant -> ENUM ID ASSIGN type SEMICOLON .)
    ID              reduce using rule 38 (constant -> ENUM ID ASSIGN type SEMICOLON .)
    WHILE           reduce using rule 38 (constant -> ENUM ID ASSIGN type SEMICOLON .)
    IF              reduce using rule 38 (constant -> ENUM ID ASSIGN type SEMICOLON .)
    WRITELN         reduce using rule 38 (constant -> ENUM ID ASSIGN type SEMICOLON .)
    READF           reduce using rule 38 (constant -> ENUM ID ASSIGN type SEMICOLON .)
    VOID            reduce using rule 38 (constant -> ENUM ID ASSIGN type SEMICOLON .)
    $end            reduce using rule 38 (constant -> ENUM ID ASSIGN type SEMICOLON .)


state 33

    (3) params -> STR . LSQUARE RSQUARE ID

    LSQUARE         shift and go to state 36


state 34

    (2) function -> constants VOID MAIN LPAREN params . RPAREN LBRACE expressions RBRACE constants

    RPAREN          shift and go to state 37


state 35

    (4) params -> empty .

    RPAREN          reduce using rule 4 (params -> empty .)


state 36

    (3) params -> STR LSQUARE . RSQUARE ID

    RSQUARE         shift and go to state 38


state 37

    (2) function -> constants VOID MAIN LPAREN params RPAREN . LBRACE expressions RBRACE constants

    LBRACE          shift and go to state 39


state 38

    (3) params -> STR LSQUARE RSQUARE . ID

    ID              shift and go to state 40


state 39

    (2) function -> constants VOID MAIN LPAREN params RPAREN LBRACE . expressions RBRACE constants
    (5) expressions -> . expressions expression
    (6) expressions -> . expression
    (7) expression -> . constants
    (8) expression -> . while
    (9) expression -> . if
    (10) expression -> . ID ASSIGN type SEMICOLON
    (11) expression -> . print
    (12) expression -> . get
    (34) constants -> . constants constant
    (35) constants -> . constants variable
    (36) constants -> . constant
    (37) constants -> . variable
    (13) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (14) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (15) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
    (41) print -> . WRITELN LPAREN type RPAREN SEMICOLON
    (42) get -> . READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON
    (38) constant -> . ENUM ID ASSIGN type SEMICOLON
    (39) constant -> . ENUM ID SEMICOLON
    (40) constant -> . empty
    (23) variable -> . var_type ID ASSIGN type SEMICOLON
    (24) variable -> . var_type ID SEMICOLON
    (46) empty -> .
    (25) var_type -> . INT
    (26) var_type -> . STR
    (27) var_type -> . BOOL

  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for READF resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    ID              shift and go to state 47
    WHILE           shift and go to state 41
    IF              shift and go to state 49
    WRITELN         shift and go to state 46
    READF           shift and go to state 50
    ENUM            shift and go to state 7
    RBRACE          reduce using rule 46 (empty -> .)
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 11

  ! ENUM            [ reduce using rule 46 (empty -> .) ]
  ! INT             [ reduce using rule 46 (empty -> .) ]
  ! STR             [ reduce using rule 46 (empty -> .) ]
  ! BOOL            [ reduce using rule 46 (empty -> .) ]
  ! ID              [ reduce using rule 46 (empty -> .) ]
  ! WHILE           [ reduce using rule 46 (empty -> .) ]
  ! IF              [ reduce using rule 46 (empty -> .) ]
  ! WRITELN         [ reduce using rule 46 (empty -> .) ]
  ! READF           [ reduce using rule 46 (empty -> .) ]

    constant                       shift and go to state 1
    var_type                       shift and go to state 3
    get                            shift and go to state 45
    variable                       shift and go to state 8
    while                          shift and go to state 51
    empty                          shift and go to state 5
    print                          shift and go to state 44
    expressions                    shift and go to state 42
    expression                     shift and go to state 52
    constants                      shift and go to state 48
    if                             shift and go to state 43

state 40

    (3) params -> STR LSQUARE RSQUARE ID .

    RPAREN          reduce using rule 3 (params -> STR LSQUARE RSQUARE ID .)


state 41

    (13) while -> WHILE . LPAREN statement RPAREN LBRACE expressions RBRACE

    LPAREN          shift and go to state 53


state 42

    (2) function -> constants VOID MAIN LPAREN params RPAREN LBRACE expressions . RBRACE constants
    (5) expressions -> expressions . expression
    (7) expression -> . constants
    (8) expression -> . while
    (9) expression -> . if
    (10) expression -> . ID ASSIGN type SEMICOLON
    (11) expression -> . print
    (12) expression -> . get
    (34) constants -> . constants constant
    (35) constants -> . constants variable
    (36) constants -> . constant
    (37) constants -> . variable
    (13) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (14) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (15) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
    (41) print -> . WRITELN LPAREN type RPAREN SEMICOLON
    (42) get -> . READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON
    (38) constant -> . ENUM ID ASSIGN type SEMICOLON
    (39) constant -> . ENUM ID SEMICOLON
    (40) constant -> . empty
    (23) variable -> . var_type ID ASSIGN type SEMICOLON
    (24) variable -> . var_type ID SEMICOLON
    (46) empty -> .
    (25) var_type -> . INT
    (26) var_type -> . STR
    (27) var_type -> . BOOL

  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for READF resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    RBRACE          shift and go to state 54
    ID              shift and go to state 47
    WHILE           shift and go to state 41
    IF              shift and go to state 49
    WRITELN         shift and go to state 46
    READF           shift and go to state 50
    ENUM            shift and go to state 7
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 11

  ! ENUM            [ reduce using rule 46 (empty -> .) ]
  ! INT             [ reduce using rule 46 (empty -> .) ]
  ! STR             [ reduce using rule 46 (empty -> .) ]
  ! BOOL            [ reduce using rule 46 (empty -> .) ]
  ! RBRACE          [ reduce using rule 46 (empty -> .) ]
  ! ID              [ reduce using rule 46 (empty -> .) ]
  ! WHILE           [ reduce using rule 46 (empty -> .) ]
  ! IF              [ reduce using rule 46 (empty -> .) ]
  ! WRITELN         [ reduce using rule 46 (empty -> .) ]
  ! READF           [ reduce using rule 46 (empty -> .) ]

    constant                       shift and go to state 1
    var_type                       shift and go to state 3
    get                            shift and go to state 45
    variable                       shift and go to state 8
    while                          shift and go to state 51
    empty                          shift and go to state 5
    print                          shift and go to state 44
    expression                     shift and go to state 55
    constants                      shift and go to state 48
    if                             shift and go to state 43

state 43

    (9) expression -> if .

    RBRACE          reduce using rule 9 (expression -> if .)
    ID              reduce using rule 9 (expression -> if .)
    WHILE           reduce using rule 9 (expression -> if .)
    IF              reduce using rule 9 (expression -> if .)
    WRITELN         reduce using rule 9 (expression -> if .)
    READF           reduce using rule 9 (expression -> if .)
    ENUM            reduce using rule 9 (expression -> if .)
    INT             reduce using rule 9 (expression -> if .)
    STR             reduce using rule 9 (expression -> if .)
    BOOL            reduce using rule 9 (expression -> if .)


state 44

    (11) expression -> print .

    RBRACE          reduce using rule 11 (expression -> print .)
    ID              reduce using rule 11 (expression -> print .)
    WHILE           reduce using rule 11 (expression -> print .)
    IF              reduce using rule 11 (expression -> print .)
    WRITELN         reduce using rule 11 (expression -> print .)
    READF           reduce using rule 11 (expression -> print .)
    ENUM            reduce using rule 11 (expression -> print .)
    INT             reduce using rule 11 (expression -> print .)
    STR             reduce using rule 11 (expression -> print .)
    BOOL            reduce using rule 11 (expression -> print .)


state 45

    (12) expression -> get .

    RBRACE          reduce using rule 12 (expression -> get .)
    ID              reduce using rule 12 (expression -> get .)
    WHILE           reduce using rule 12 (expression -> get .)
    IF              reduce using rule 12 (expression -> get .)
    WRITELN         reduce using rule 12 (expression -> get .)
    READF           reduce using rule 12 (expression -> get .)
    ENUM            reduce using rule 12 (expression -> get .)
    INT             reduce using rule 12 (expression -> get .)
    STR             reduce using rule 12 (expression -> get .)
    BOOL            reduce using rule 12 (expression -> get .)


state 46

    (41) print -> WRITELN . LPAREN type RPAREN SEMICOLON

    LPAREN          shift and go to state 56


state 47

    (10) expression -> ID . ASSIGN type SEMICOLON

    ASSIGN          shift and go to state 57


state 48

    (7) expression -> constants .
    (34) constants -> constants . constant
    (35) constants -> constants . variable
    (38) constant -> . ENUM ID ASSIGN type SEMICOLON
    (39) constant -> . ENUM ID SEMICOLON
    (40) constant -> . empty
    (23) variable -> . var_type ID ASSIGN type SEMICOLON
    (24) variable -> . var_type ID SEMICOLON
    (46) empty -> .
    (25) var_type -> . INT
    (26) var_type -> . STR
    (27) var_type -> . BOOL

  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 7 (expression -> constants .)
  ! reduce/reduce conflict for STR resolved using rule 7 (expression -> constants .)
  ! reduce/reduce conflict for BOOL resolved using rule 7 (expression -> constants .)
  ! reduce/reduce conflict for RBRACE resolved using rule 7 (expression -> constants .)
  ! reduce/reduce conflict for ID resolved using rule 7 (expression -> constants .)
  ! reduce/reduce conflict for WHILE resolved using rule 7 (expression -> constants .)
  ! reduce/reduce conflict for IF resolved using rule 7 (expression -> constants .)
  ! reduce/reduce conflict for WRITELN resolved using rule 7 (expression -> constants .)
  ! reduce/reduce conflict for READF resolved using rule 7 (expression -> constants .)
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    RBRACE          reduce using rule 7 (expression -> constants .)
    ID              reduce using rule 7 (expression -> constants .)
    WHILE           reduce using rule 7 (expression -> constants .)
    IF              reduce using rule 7 (expression -> constants .)
    WRITELN         reduce using rule 7 (expression -> constants .)
    READF           reduce using rule 7 (expression -> constants .)
    ENUM            shift and go to state 7
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 11

  ! ENUM            [ reduce using rule 7 (expression -> constants .) ]
  ! INT             [ reduce using rule 7 (expression -> constants .) ]
  ! STR             [ reduce using rule 7 (expression -> constants .) ]
  ! BOOL            [ reduce using rule 7 (expression -> constants .) ]
  ! ENUM            [ reduce using rule 46 (empty -> .) ]
  ! INT             [ reduce using rule 46 (empty -> .) ]
  ! STR             [ reduce using rule 46 (empty -> .) ]
  ! BOOL            [ reduce using rule 46 (empty -> .) ]
  ! RBRACE          [ reduce using rule 46 (empty -> .) ]
  ! ID              [ reduce using rule 46 (empty -> .) ]
  ! WHILE           [ reduce using rule 46 (empty -> .) ]
  ! IF              [ reduce using rule 46 (empty -> .) ]
  ! WRITELN         [ reduce using rule 46 (empty -> .) ]
  ! READF           [ reduce using rule 46 (empty -> .) ]

    constant                       shift and go to state 16
    var_type                       shift and go to state 3
    variable                       shift and go to state 15
    empty                          shift and go to state 5

state 49

    (14) if -> IF . LPAREN statement RPAREN LBRACE expressions RBRACE
    (15) if -> IF . LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE

    LPAREN          shift and go to state 58


state 50

    (42) get -> READF . LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON

    LPAREN          shift and go to state 59


state 51

    (8) expression -> while .

    RBRACE          reduce using rule 8 (expression -> while .)
    ID              reduce using rule 8 (expression -> while .)
    WHILE           reduce using rule 8 (expression -> while .)
    IF              reduce using rule 8 (expression -> while .)
    WRITELN         reduce using rule 8 (expression -> while .)
    READF           reduce using rule 8 (expression -> while .)
    ENUM            reduce using rule 8 (expression -> while .)
    INT             reduce using rule 8 (expression -> while .)
    STR             reduce using rule 8 (expression -> while .)
    BOOL            reduce using rule 8 (expression -> while .)


state 52

    (6) expressions -> expression .

    RBRACE          reduce using rule 6 (expressions -> expression .)
    ID              reduce using rule 6 (expressions -> expression .)
    WHILE           reduce using rule 6 (expressions -> expression .)
    IF              reduce using rule 6 (expressions -> expression .)
    WRITELN         reduce using rule 6 (expressions -> expression .)
    READF           reduce using rule 6 (expressions -> expression .)
    ENUM            reduce using rule 6 (expressions -> expression .)
    INT             reduce using rule 6 (expressions -> expression .)
    STR             reduce using rule 6 (expressions -> expression .)
    BOOL            reduce using rule 6 (expressions -> expression .)


state 53

    (13) while -> WHILE LPAREN . statement RPAREN LBRACE expressions RBRACE
    (16) statement -> . type logic_op type
    (28) type -> . NUMBER
    (29) type -> . STRING
    (30) type -> . boolean
    (31) type -> . ID
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    NUMBER          shift and go to state 24
    STRING          shift and go to state 28
    ID              shift and go to state 27
    TRUE            shift and go to state 23
    FALSE           shift and go to state 22

    boolean                        shift and go to state 25
    type                           shift and go to state 61
    statement                      shift and go to state 60

state 54

    (2) function -> constants VOID MAIN LPAREN params RPAREN LBRACE expressions RBRACE . constants
    (34) constants -> . constants constant
    (35) constants -> . constants variable
    (36) constants -> . constant
    (37) constants -> . variable
    (38) constant -> . ENUM ID ASSIGN type SEMICOLON
    (39) constant -> . ENUM ID SEMICOLON
    (40) constant -> . empty
    (23) variable -> . var_type ID ASSIGN type SEMICOLON
    (24) variable -> . var_type ID SEMICOLON
    (46) empty -> .
    (25) var_type -> . INT
    (26) var_type -> . STR
    (27) var_type -> . BOOL

  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    ENUM            shift and go to state 7
    $end            reduce using rule 46 (empty -> .)
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 11

  ! ENUM            [ reduce using rule 46 (empty -> .) ]
  ! INT             [ reduce using rule 46 (empty -> .) ]
  ! STR             [ reduce using rule 46 (empty -> .) ]
  ! BOOL            [ reduce using rule 46 (empty -> .) ]

    constant                       shift and go to state 1
    var_type                       shift and go to state 3
    empty                          shift and go to state 5
    variable                       shift and go to state 8
    constants                      shift and go to state 62

state 55

    (5) expressions -> expressions expression .

    RBRACE          reduce using rule 5 (expressions -> expressions expression .)
    ID              reduce using rule 5 (expressions -> expressions expression .)
    WHILE           reduce using rule 5 (expressions -> expressions expression .)
    IF              reduce using rule 5 (expressions -> expressions expression .)
    WRITELN         reduce using rule 5 (expressions -> expressions expression .)
    READF           reduce using rule 5 (expressions -> expressions expression .)
    ENUM            reduce using rule 5 (expressions -> expressions expression .)
    INT             reduce using rule 5 (expressions -> expressions expression .)
    STR             reduce using rule 5 (expressions -> expressions expression .)
    BOOL            reduce using rule 5 (expressions -> expressions expression .)


state 56

    (41) print -> WRITELN LPAREN . type RPAREN SEMICOLON
    (28) type -> . NUMBER
    (29) type -> . STRING
    (30) type -> . boolean
    (31) type -> . ID
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    NUMBER          shift and go to state 24
    STRING          shift and go to state 28
    ID              shift and go to state 27
    TRUE            shift and go to state 23
    FALSE           shift and go to state 22

    boolean                        shift and go to state 25
    type                           shift and go to state 63

state 57

    (10) expression -> ID ASSIGN . type SEMICOLON
    (28) type -> . NUMBER
    (29) type -> . STRING
    (30) type -> . boolean
    (31) type -> . ID
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    NUMBER          shift and go to state 24
    STRING          shift and go to state 28
    ID              shift and go to state 27
    TRUE            shift and go to state 23
    FALSE           shift and go to state 22

    boolean                        shift and go to state 25
    type                           shift and go to state 64

state 58

    (14) if -> IF LPAREN . statement RPAREN LBRACE expressions RBRACE
    (15) if -> IF LPAREN . statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
    (16) statement -> . type logic_op type
    (28) type -> . NUMBER
    (29) type -> . STRING
    (30) type -> . boolean
    (31) type -> . ID
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    NUMBER          shift and go to state 24
    STRING          shift and go to state 28
    ID              shift and go to state 27
    TRUE            shift and go to state 23
    FALSE           shift and go to state 22

    boolean                        shift and go to state 25
    type                           shift and go to state 61
    statement                      shift and go to state 65

state 59

    (42) get -> READF LPAREN . gets COMMA AMPERSAND ID RPAREN SEMICOLON
    (43) gets -> . GET_INT
    (44) gets -> . GET_STRING
    (45) gets -> . GET_BOOL

    GET_INT         shift and go to state 68
    GET_STRING      shift and go to state 67
    GET_BOOL        shift and go to state 66

    gets                           shift and go to state 69

state 60

    (13) while -> WHILE LPAREN statement . RPAREN LBRACE expressions RBRACE

    RPAREN          shift and go to state 70


state 61

    (16) statement -> type . logic_op type
    (17) logic_op -> . EQ
    (18) logic_op -> . NOT_EQ
    (19) logic_op -> . GREATER
    (20) logic_op -> . GREATER_EQ
    (21) logic_op -> . LESS
    (22) logic_op -> . LESS_EQ

    EQ              shift and go to state 75
    NOT_EQ          shift and go to state 77
    GREATER         shift and go to state 73
    GREATER_EQ      shift and go to state 76
    LESS            shift and go to state 74
    LESS_EQ         shift and go to state 71

    logic_op                       shift and go to state 72

state 62

    (2) function -> constants VOID MAIN LPAREN params RPAREN LBRACE expressions RBRACE constants .
    (34) constants -> constants . constant
    (35) constants -> constants . variable
    (38) constant -> . ENUM ID ASSIGN type SEMICOLON
    (39) constant -> . ENUM ID SEMICOLON
    (40) constant -> . empty
    (23) variable -> . var_type ID ASSIGN type SEMICOLON
    (24) variable -> . var_type ID SEMICOLON
    (46) empty -> .
    (25) var_type -> . INT
    (26) var_type -> . STR
    (27) var_type -> . BOOL

  ! shift/reduce conflict for ENUM resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 2 (function -> constants VOID MAIN LPAREN params RPAREN LBRACE expressions RBRACE constants .)
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    $end            reduce using rule 2 (function -> constants VOID MAIN LPAREN params RPAREN LBRACE expressions RBRACE constants .)
    ENUM            shift and go to state 7
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 11

  ! ENUM            [ reduce using rule 46 (empty -> .) ]
  ! INT             [ reduce using rule 46 (empty -> .) ]
  ! STR             [ reduce using rule 46 (empty -> .) ]
  ! BOOL            [ reduce using rule 46 (empty -> .) ]
  ! $end            [ reduce using rule 46 (empty -> .) ]

    constant                       shift and go to state 16
    var_type                       shift and go to state 3
    empty                          shift and go to state 5
    variable                       shift and go to state 15

state 63

    (41) print -> WRITELN LPAREN type . RPAREN SEMICOLON

    RPAREN          shift and go to state 78


state 64

    (10) expression -> ID ASSIGN type . SEMICOLON

    SEMICOLON       shift and go to state 79


state 65

    (14) if -> IF LPAREN statement . RPAREN LBRACE expressions RBRACE
    (15) if -> IF LPAREN statement . RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE

    RPAREN          shift and go to state 80


state 66

    (45) gets -> GET_BOOL .

    COMMA           reduce using rule 45 (gets -> GET_BOOL .)


state 67

    (44) gets -> GET_STRING .

    COMMA           reduce using rule 44 (gets -> GET_STRING .)


state 68

    (43) gets -> GET_INT .

    COMMA           reduce using rule 43 (gets -> GET_INT .)


state 69

    (42) get -> READF LPAREN gets . COMMA AMPERSAND ID RPAREN SEMICOLON

    COMMA           shift and go to state 81


state 70

    (13) while -> WHILE LPAREN statement RPAREN . LBRACE expressions RBRACE

    LBRACE          shift and go to state 82


state 71

    (22) logic_op -> LESS_EQ .

    NUMBER          reduce using rule 22 (logic_op -> LESS_EQ .)
    STRING          reduce using rule 22 (logic_op -> LESS_EQ .)
    ID              reduce using rule 22 (logic_op -> LESS_EQ .)
    TRUE            reduce using rule 22 (logic_op -> LESS_EQ .)
    FALSE           reduce using rule 22 (logic_op -> LESS_EQ .)


state 72

    (16) statement -> type logic_op . type
    (28) type -> . NUMBER
    (29) type -> . STRING
    (30) type -> . boolean
    (31) type -> . ID
    (32) boolean -> . TRUE
    (33) boolean -> . FALSE

    NUMBER          shift and go to state 24
    STRING          shift and go to state 28
    ID              shift and go to state 27
    TRUE            shift and go to state 23
    FALSE           shift and go to state 22

    boolean                        shift and go to state 25
    type                           shift and go to state 83

state 73

    (19) logic_op -> GREATER .

    NUMBER          reduce using rule 19 (logic_op -> GREATER .)
    STRING          reduce using rule 19 (logic_op -> GREATER .)
    ID              reduce using rule 19 (logic_op -> GREATER .)
    TRUE            reduce using rule 19 (logic_op -> GREATER .)
    FALSE           reduce using rule 19 (logic_op -> GREATER .)


state 74

    (21) logic_op -> LESS .

    NUMBER          reduce using rule 21 (logic_op -> LESS .)
    STRING          reduce using rule 21 (logic_op -> LESS .)
    ID              reduce using rule 21 (logic_op -> LESS .)
    TRUE            reduce using rule 21 (logic_op -> LESS .)
    FALSE           reduce using rule 21 (logic_op -> LESS .)


state 75

    (17) logic_op -> EQ .

    NUMBER          reduce using rule 17 (logic_op -> EQ .)
    STRING          reduce using rule 17 (logic_op -> EQ .)
    ID              reduce using rule 17 (logic_op -> EQ .)
    TRUE            reduce using rule 17 (logic_op -> EQ .)
    FALSE           reduce using rule 17 (logic_op -> EQ .)


state 76

    (20) logic_op -> GREATER_EQ .

    NUMBER          reduce using rule 20 (logic_op -> GREATER_EQ .)
    STRING          reduce using rule 20 (logic_op -> GREATER_EQ .)
    ID              reduce using rule 20 (logic_op -> GREATER_EQ .)
    TRUE            reduce using rule 20 (logic_op -> GREATER_EQ .)
    FALSE           reduce using rule 20 (logic_op -> GREATER_EQ .)


state 77

    (18) logic_op -> NOT_EQ .

    NUMBER          reduce using rule 18 (logic_op -> NOT_EQ .)
    STRING          reduce using rule 18 (logic_op -> NOT_EQ .)
    ID              reduce using rule 18 (logic_op -> NOT_EQ .)
    TRUE            reduce using rule 18 (logic_op -> NOT_EQ .)
    FALSE           reduce using rule 18 (logic_op -> NOT_EQ .)


state 78

    (41) print -> WRITELN LPAREN type RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 84


state 79

    (10) expression -> ID ASSIGN type SEMICOLON .

    RBRACE          reduce using rule 10 (expression -> ID ASSIGN type SEMICOLON .)
    ID              reduce using rule 10 (expression -> ID ASSIGN type SEMICOLON .)
    WHILE           reduce using rule 10 (expression -> ID ASSIGN type SEMICOLON .)
    IF              reduce using rule 10 (expression -> ID ASSIGN type SEMICOLON .)
    WRITELN         reduce using rule 10 (expression -> ID ASSIGN type SEMICOLON .)
    READF           reduce using rule 10 (expression -> ID ASSIGN type SEMICOLON .)
    ENUM            reduce using rule 10 (expression -> ID ASSIGN type SEMICOLON .)
    INT             reduce using rule 10 (expression -> ID ASSIGN type SEMICOLON .)
    STR             reduce using rule 10 (expression -> ID ASSIGN type SEMICOLON .)
    BOOL            reduce using rule 10 (expression -> ID ASSIGN type SEMICOLON .)


state 80

    (14) if -> IF LPAREN statement RPAREN . LBRACE expressions RBRACE
    (15) if -> IF LPAREN statement RPAREN . LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE

    LBRACE          shift and go to state 85


state 81

    (42) get -> READF LPAREN gets COMMA . AMPERSAND ID RPAREN SEMICOLON

    AMPERSAND       shift and go to state 86


state 82

    (13) while -> WHILE LPAREN statement RPAREN LBRACE . expressions RBRACE
    (5) expressions -> . expressions expression
    (6) expressions -> . expression
    (7) expression -> . constants
    (8) expression -> . while
    (9) expression -> . if
    (10) expression -> . ID ASSIGN type SEMICOLON
    (11) expression -> . print
    (12) expression -> . get
    (34) constants -> . constants constant
    (35) constants -> . constants variable
    (36) constants -> . constant
    (37) constants -> . variable
    (13) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (14) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (15) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
    (41) print -> . WRITELN LPAREN type RPAREN SEMICOLON
    (42) get -> . READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON
    (38) constant -> . ENUM ID ASSIGN type SEMICOLON
    (39) constant -> . ENUM ID SEMICOLON
    (40) constant -> . empty
    (23) variable -> . var_type ID ASSIGN type SEMICOLON
    (24) variable -> . var_type ID SEMICOLON
    (46) empty -> .
    (25) var_type -> . INT
    (26) var_type -> . STR
    (27) var_type -> . BOOL

  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for READF resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    ID              shift and go to state 47
    WHILE           shift and go to state 41
    IF              shift and go to state 49
    WRITELN         shift and go to state 46
    READF           shift and go to state 50
    ENUM            shift and go to state 7
    RBRACE          reduce using rule 46 (empty -> .)
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 11

  ! ENUM            [ reduce using rule 46 (empty -> .) ]
  ! INT             [ reduce using rule 46 (empty -> .) ]
  ! STR             [ reduce using rule 46 (empty -> .) ]
  ! BOOL            [ reduce using rule 46 (empty -> .) ]
  ! ID              [ reduce using rule 46 (empty -> .) ]
  ! WHILE           [ reduce using rule 46 (empty -> .) ]
  ! IF              [ reduce using rule 46 (empty -> .) ]
  ! WRITELN         [ reduce using rule 46 (empty -> .) ]
  ! READF           [ reduce using rule 46 (empty -> .) ]

    constant                       shift and go to state 1
    var_type                       shift and go to state 3
    get                            shift and go to state 45
    variable                       shift and go to state 8
    while                          shift and go to state 51
    empty                          shift and go to state 5
    print                          shift and go to state 44
    expressions                    shift and go to state 87
    expression                     shift and go to state 52
    constants                      shift and go to state 48
    if                             shift and go to state 43

state 83

    (16) statement -> type logic_op type .

    RPAREN          reduce using rule 16 (statement -> type logic_op type .)


state 84

    (41) print -> WRITELN LPAREN type RPAREN SEMICOLON .

    RBRACE          reduce using rule 41 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)
    ID              reduce using rule 41 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)
    WHILE           reduce using rule 41 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)
    IF              reduce using rule 41 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)
    WRITELN         reduce using rule 41 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)
    READF           reduce using rule 41 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)
    ENUM            reduce using rule 41 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)
    INT             reduce using rule 41 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)
    STR             reduce using rule 41 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)
    BOOL            reduce using rule 41 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)


state 85

    (14) if -> IF LPAREN statement RPAREN LBRACE . expressions RBRACE
    (15) if -> IF LPAREN statement RPAREN LBRACE . expressions RBRACE ELSE LBRACE expressions RBRACE
    (5) expressions -> . expressions expression
    (6) expressions -> . expression
    (7) expression -> . constants
    (8) expression -> . while
    (9) expression -> . if
    (10) expression -> . ID ASSIGN type SEMICOLON
    (11) expression -> . print
    (12) expression -> . get
    (34) constants -> . constants constant
    (35) constants -> . constants variable
    (36) constants -> . constant
    (37) constants -> . variable
    (13) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (14) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (15) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
    (41) print -> . WRITELN LPAREN type RPAREN SEMICOLON
    (42) get -> . READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON
    (38) constant -> . ENUM ID ASSIGN type SEMICOLON
    (39) constant -> . ENUM ID SEMICOLON
    (40) constant -> . empty
    (23) variable -> . var_type ID ASSIGN type SEMICOLON
    (24) variable -> . var_type ID SEMICOLON
    (46) empty -> .
    (25) var_type -> . INT
    (26) var_type -> . STR
    (27) var_type -> . BOOL

  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for READF resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    ID              shift and go to state 47
    WHILE           shift and go to state 41
    IF              shift and go to state 49
    WRITELN         shift and go to state 46
    READF           shift and go to state 50
    ENUM            shift and go to state 7
    RBRACE          reduce using rule 46 (empty -> .)
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 11

  ! ENUM            [ reduce using rule 46 (empty -> .) ]
  ! INT             [ reduce using rule 46 (empty -> .) ]
  ! STR             [ reduce using rule 46 (empty -> .) ]
  ! BOOL            [ reduce using rule 46 (empty -> .) ]
  ! ID              [ reduce using rule 46 (empty -> .) ]
  ! WHILE           [ reduce using rule 46 (empty -> .) ]
  ! IF              [ reduce using rule 46 (empty -> .) ]
  ! WRITELN         [ reduce using rule 46 (empty -> .) ]
  ! READF           [ reduce using rule 46 (empty -> .) ]

    constant                       shift and go to state 1
    var_type                       shift and go to state 3
    get                            shift and go to state 45
    variable                       shift and go to state 8
    while                          shift and go to state 51
    empty                          shift and go to state 5
    print                          shift and go to state 44
    expressions                    shift and go to state 88
    expression                     shift and go to state 52
    constants                      shift and go to state 48
    if                             shift and go to state 43

state 86

    (42) get -> READF LPAREN gets COMMA AMPERSAND . ID RPAREN SEMICOLON

    ID              shift and go to state 89


state 87

    (13) while -> WHILE LPAREN statement RPAREN LBRACE expressions . RBRACE
    (5) expressions -> expressions . expression
    (7) expression -> . constants
    (8) expression -> . while
    (9) expression -> . if
    (10) expression -> . ID ASSIGN type SEMICOLON
    (11) expression -> . print
    (12) expression -> . get
    (34) constants -> . constants constant
    (35) constants -> . constants variable
    (36) constants -> . constant
    (37) constants -> . variable
    (13) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (14) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (15) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
    (41) print -> . WRITELN LPAREN type RPAREN SEMICOLON
    (42) get -> . READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON
    (38) constant -> . ENUM ID ASSIGN type SEMICOLON
    (39) constant -> . ENUM ID SEMICOLON
    (40) constant -> . empty
    (23) variable -> . var_type ID ASSIGN type SEMICOLON
    (24) variable -> . var_type ID SEMICOLON
    (46) empty -> .
    (25) var_type -> . INT
    (26) var_type -> . STR
    (27) var_type -> . BOOL

  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for READF resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    RBRACE          shift and go to state 90
    ID              shift and go to state 47
    WHILE           shift and go to state 41
    IF              shift and go to state 49
    WRITELN         shift and go to state 46
    READF           shift and go to state 50
    ENUM            shift and go to state 7
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 11

  ! ENUM            [ reduce using rule 46 (empty -> .) ]
  ! INT             [ reduce using rule 46 (empty -> .) ]
  ! STR             [ reduce using rule 46 (empty -> .) ]
  ! BOOL            [ reduce using rule 46 (empty -> .) ]
  ! RBRACE          [ reduce using rule 46 (empty -> .) ]
  ! ID              [ reduce using rule 46 (empty -> .) ]
  ! WHILE           [ reduce using rule 46 (empty -> .) ]
  ! IF              [ reduce using rule 46 (empty -> .) ]
  ! WRITELN         [ reduce using rule 46 (empty -> .) ]
  ! READF           [ reduce using rule 46 (empty -> .) ]

    constant                       shift and go to state 1
    var_type                       shift and go to state 3
    get                            shift and go to state 45
    variable                       shift and go to state 8
    while                          shift and go to state 51
    empty                          shift and go to state 5
    print                          shift and go to state 44
    expression                     shift and go to state 55
    constants                      shift and go to state 48
    if                             shift and go to state 43

state 88

    (14) if -> IF LPAREN statement RPAREN LBRACE expressions . RBRACE
    (15) if -> IF LPAREN statement RPAREN LBRACE expressions . RBRACE ELSE LBRACE expressions RBRACE
    (5) expressions -> expressions . expression
    (7) expression -> . constants
    (8) expression -> . while
    (9) expression -> . if
    (10) expression -> . ID ASSIGN type SEMICOLON
    (11) expression -> . print
    (12) expression -> . get
    (34) constants -> . constants constant
    (35) constants -> . constants variable
    (36) constants -> . constant
    (37) constants -> . variable
    (13) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (14) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (15) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
    (41) print -> . WRITELN LPAREN type RPAREN SEMICOLON
    (42) get -> . READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON
    (38) constant -> . ENUM ID ASSIGN type SEMICOLON
    (39) constant -> . ENUM ID SEMICOLON
    (40) constant -> . empty
    (23) variable -> . var_type ID ASSIGN type SEMICOLON
    (24) variable -> . var_type ID SEMICOLON
    (46) empty -> .
    (25) var_type -> . INT
    (26) var_type -> . STR
    (27) var_type -> . BOOL

  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for READF resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    RBRACE          shift and go to state 91
    ID              shift and go to state 47
    WHILE           shift and go to state 41
    IF              shift and go to state 49
    WRITELN         shift and go to state 46
    READF           shift and go to state 50
    ENUM            shift and go to state 7
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 11

  ! ENUM            [ reduce using rule 46 (empty -> .) ]
  ! INT             [ reduce using rule 46 (empty -> .) ]
  ! STR             [ reduce using rule 46 (empty -> .) ]
  ! BOOL            [ reduce using rule 46 (empty -> .) ]
  ! RBRACE          [ reduce using rule 46 (empty -> .) ]
  ! ID              [ reduce using rule 46 (empty -> .) ]
  ! WHILE           [ reduce using rule 46 (empty -> .) ]
  ! IF              [ reduce using rule 46 (empty -> .) ]
  ! WRITELN         [ reduce using rule 46 (empty -> .) ]
  ! READF           [ reduce using rule 46 (empty -> .) ]

    constant                       shift and go to state 1
    var_type                       shift and go to state 3
    get                            shift and go to state 45
    variable                       shift and go to state 8
    while                          shift and go to state 51
    empty                          shift and go to state 5
    print                          shift and go to state 44
    expression                     shift and go to state 55
    constants                      shift and go to state 48
    if                             shift and go to state 43

state 89

    (42) get -> READF LPAREN gets COMMA AMPERSAND ID . RPAREN SEMICOLON

    RPAREN          shift and go to state 92


state 90

    (13) while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .

    RBRACE          reduce using rule 13 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    ID              reduce using rule 13 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    WHILE           reduce using rule 13 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    IF              reduce using rule 13 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    WRITELN         reduce using rule 13 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    READF           reduce using rule 13 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    ENUM            reduce using rule 13 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    INT             reduce using rule 13 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    STR             reduce using rule 13 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    BOOL            reduce using rule 13 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)


state 91

    (14) if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .
    (15) if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE . ELSE LBRACE expressions RBRACE

    RBRACE          reduce using rule 14 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    ID              reduce using rule 14 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    WHILE           reduce using rule 14 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    IF              reduce using rule 14 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    WRITELN         reduce using rule 14 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    READF           reduce using rule 14 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    ENUM            reduce using rule 14 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    INT             reduce using rule 14 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    STR             reduce using rule 14 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    BOOL            reduce using rule 14 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    ELSE            shift and go to state 93


state 92

    (42) get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 94


state 93

    (15) if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE . LBRACE expressions RBRACE

    LBRACE          shift and go to state 95


state 94

    (42) get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .

    RBRACE          reduce using rule 42 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)
    ID              reduce using rule 42 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)
    WHILE           reduce using rule 42 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)
    IF              reduce using rule 42 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)
    WRITELN         reduce using rule 42 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)
    READF           reduce using rule 42 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)
    ENUM            reduce using rule 42 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)
    INT             reduce using rule 42 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)
    STR             reduce using rule 42 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)
    BOOL            reduce using rule 42 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)


state 95

    (15) if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE . expressions RBRACE
    (5) expressions -> . expressions expression
    (6) expressions -> . expression
    (7) expression -> . constants
    (8) expression -> . while
    (9) expression -> . if
    (10) expression -> . ID ASSIGN type SEMICOLON
    (11) expression -> . print
    (12) expression -> . get
    (34) constants -> . constants constant
    (35) constants -> . constants variable
    (36) constants -> . constant
    (37) constants -> . variable
    (13) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (14) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (15) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
    (41) print -> . WRITELN LPAREN type RPAREN SEMICOLON
    (42) get -> . READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON
    (38) constant -> . ENUM ID ASSIGN type SEMICOLON
    (39) constant -> . ENUM ID SEMICOLON
    (40) constant -> . empty
    (23) variable -> . var_type ID ASSIGN type SEMICOLON
    (24) variable -> . var_type ID SEMICOLON
    (46) empty -> .
    (25) var_type -> . INT
    (26) var_type -> . STR
    (27) var_type -> . BOOL

  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for READF resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    ID              shift and go to state 47
    WHILE           shift and go to state 41
    IF              shift and go to state 49
    WRITELN         shift and go to state 46
    READF           shift and go to state 50
    ENUM            shift and go to state 7
    RBRACE          reduce using rule 46 (empty -> .)
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 11

  ! ENUM            [ reduce using rule 46 (empty -> .) ]
  ! INT             [ reduce using rule 46 (empty -> .) ]
  ! STR             [ reduce using rule 46 (empty -> .) ]
  ! BOOL            [ reduce using rule 46 (empty -> .) ]
  ! ID              [ reduce using rule 46 (empty -> .) ]
  ! WHILE           [ reduce using rule 46 (empty -> .) ]
  ! IF              [ reduce using rule 46 (empty -> .) ]
  ! WRITELN         [ reduce using rule 46 (empty -> .) ]
  ! READF           [ reduce using rule 46 (empty -> .) ]

    constant                       shift and go to state 1
    var_type                       shift and go to state 3
    get                            shift and go to state 45
    variable                       shift and go to state 8
    while                          shift and go to state 51
    empty                          shift and go to state 5
    print                          shift and go to state 44
    expressions                    shift and go to state 96
    expression                     shift and go to state 52
    constants                      shift and go to state 48
    if                             shift and go to state 43

state 96

    (15) if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions . RBRACE
    (5) expressions -> expressions . expression
    (7) expression -> . constants
    (8) expression -> . while
    (9) expression -> . if
    (10) expression -> . ID ASSIGN type SEMICOLON
    (11) expression -> . print
    (12) expression -> . get
    (34) constants -> . constants constant
    (35) constants -> . constants variable
    (36) constants -> . constant
    (37) constants -> . variable
    (13) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (14) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (15) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
    (41) print -> . WRITELN LPAREN type RPAREN SEMICOLON
    (42) get -> . READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON
    (38) constant -> . ENUM ID ASSIGN type SEMICOLON
    (39) constant -> . ENUM ID SEMICOLON
    (40) constant -> . empty
    (23) variable -> . var_type ID ASSIGN type SEMICOLON
    (24) variable -> . var_type ID SEMICOLON
    (46) empty -> .
    (25) var_type -> . INT
    (26) var_type -> . STR
    (27) var_type -> . BOOL

  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for READF resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    RBRACE          shift and go to state 97
    ID              shift and go to state 47
    WHILE           shift and go to state 41
    IF              shift and go to state 49
    WRITELN         shift and go to state 46
    READF           shift and go to state 50
    ENUM            shift and go to state 7
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 11

  ! ENUM            [ reduce using rule 46 (empty -> .) ]
  ! INT             [ reduce using rule 46 (empty -> .) ]
  ! STR             [ reduce using rule 46 (empty -> .) ]
  ! BOOL            [ reduce using rule 46 (empty -> .) ]
  ! RBRACE          [ reduce using rule 46 (empty -> .) ]
  ! ID              [ reduce using rule 46 (empty -> .) ]
  ! WHILE           [ reduce using rule 46 (empty -> .) ]
  ! IF              [ reduce using rule 46 (empty -> .) ]
  ! WRITELN         [ reduce using rule 46 (empty -> .) ]
  ! READF           [ reduce using rule 46 (empty -> .) ]

    constant                       shift and go to state 1
    var_type                       shift and go to state 3
    get                            shift and go to state 45
    variable                       shift and go to state 8
    while                          shift and go to state 51
    empty                          shift and go to state 5
    print                          shift and go to state 44
    expression                     shift and go to state 55
    constants                      shift and go to state 48
    if                             shift and go to state 43

state 97

    (15) if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .

    RBRACE          reduce using rule 15 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)
    ID              reduce using rule 15 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)
    WHILE           reduce using rule 15 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)
    IF              reduce using rule 15 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)
    WRITELN         reduce using rule 15 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)
    READF           reduce using rule 15 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)
    ENUM            reduce using rule 15 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)
    INT             reduce using rule 15 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)
    STR             reduce using rule 15 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)
    BOOL            reduce using rule 15 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ENUM in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for STR in state 0 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 0 resolved as shift
WARNING: shift/reduce conflict for VOID in state 9 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 9 resolved as shift
WARNING: shift/reduce conflict for INT in state 9 resolved as shift
WARNING: shift/reduce conflict for STR in state 9 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 9 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 39 resolved as shift
WARNING: shift/reduce conflict for ID in state 39 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 39 resolved as shift
WARNING: shift/reduce conflict for IF in state 39 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 39 resolved as shift
WARNING: shift/reduce conflict for READF in state 39 resolved as shift
WARNING: shift/reduce conflict for INT in state 39 resolved as shift
WARNING: shift/reduce conflict for STR in state 39 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 39 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 42 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 42 resolved as shift
WARNING: shift/reduce conflict for ID in state 42 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 42 resolved as shift
WARNING: shift/reduce conflict for IF in state 42 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 42 resolved as shift
WARNING: shift/reduce conflict for READF in state 42 resolved as shift
WARNING: shift/reduce conflict for INT in state 42 resolved as shift
WARNING: shift/reduce conflict for STR in state 42 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 42 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 48 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 48 resolved as shift
WARNING: shift/reduce conflict for INT in state 48 resolved as shift
WARNING: shift/reduce conflict for STR in state 48 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 48 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 54 resolved as shift
WARNING: shift/reduce conflict for INT in state 54 resolved as shift
WARNING: shift/reduce conflict for STR in state 54 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 54 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 62 resolved as shift
WARNING: shift/reduce conflict for INT in state 62 resolved as shift
WARNING: shift/reduce conflict for STR in state 62 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 62 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 82 resolved as shift
WARNING: shift/reduce conflict for ID in state 82 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 82 resolved as shift
WARNING: shift/reduce conflict for IF in state 82 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 82 resolved as shift
WARNING: shift/reduce conflict for READF in state 82 resolved as shift
WARNING: shift/reduce conflict for INT in state 82 resolved as shift
WARNING: shift/reduce conflict for STR in state 82 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 82 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 85 resolved as shift
WARNING: shift/reduce conflict for ID in state 85 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 85 resolved as shift
WARNING: shift/reduce conflict for IF in state 85 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 85 resolved as shift
WARNING: shift/reduce conflict for READF in state 85 resolved as shift
WARNING: shift/reduce conflict for INT in state 85 resolved as shift
WARNING: shift/reduce conflict for STR in state 85 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 85 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 87 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 87 resolved as shift
WARNING: shift/reduce conflict for ID in state 87 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 87 resolved as shift
WARNING: shift/reduce conflict for IF in state 87 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 87 resolved as shift
WARNING: shift/reduce conflict for READF in state 87 resolved as shift
WARNING: shift/reduce conflict for INT in state 87 resolved as shift
WARNING: shift/reduce conflict for STR in state 87 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 87 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 88 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 88 resolved as shift
WARNING: shift/reduce conflict for ID in state 88 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 88 resolved as shift
WARNING: shift/reduce conflict for IF in state 88 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 88 resolved as shift
WARNING: shift/reduce conflict for READF in state 88 resolved as shift
WARNING: shift/reduce conflict for INT in state 88 resolved as shift
WARNING: shift/reduce conflict for STR in state 88 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 88 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 95 resolved as shift
WARNING: shift/reduce conflict for ID in state 95 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 95 resolved as shift
WARNING: shift/reduce conflict for IF in state 95 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 95 resolved as shift
WARNING: shift/reduce conflict for READF in state 95 resolved as shift
WARNING: shift/reduce conflict for INT in state 95 resolved as shift
WARNING: shift/reduce conflict for STR in state 95 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 95 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 96 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 96 resolved as shift
WARNING: shift/reduce conflict for ID in state 96 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 96 resolved as shift
WARNING: shift/reduce conflict for IF in state 96 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 96 resolved as shift
WARNING: shift/reduce conflict for READF in state 96 resolved as shift
WARNING: shift/reduce conflict for INT in state 96 resolved as shift
WARNING: shift/reduce conflict for STR in state 96 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 96 resolved as shift
WARNING: reduce/reduce conflict in state 48 resolved using rule (expression -> constants)
WARNING: rejected rule (empty -> <empty>) in state 48
WARNING: reduce/reduce conflict in state 62 resolved using rule (function -> constants VOID MAIN LPAREN params RPAREN LBRACE expressions RBRACE constants)
WARNING: rejected rule (empty -> <empty>) in state 62
