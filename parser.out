Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> function
Rule 2     function -> constants VOID MAIN LPAREN params RPAREN LBRACE expressions RBRACE constants
Rule 3     params -> STR LSQUARE RSQUARE ID
Rule 4     params -> empty
Rule 5     expressions -> expressions expression
Rule 6     expressions -> expression
Rule 7     expression -> constants
Rule 8     expression -> while
Rule 9     expression -> if
Rule 10    expression -> ID assigned SEMICOLON
Rule 11    expression -> print
Rule 12    expression -> get
Rule 13    expression -> empty
Rule 14    while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
Rule 15    if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE
Rule 16    if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
Rule 17    statement -> type logic_op type
Rule 18    logic_op -> EQ
Rule 19    logic_op -> NOT_EQ
Rule 20    logic_op -> GREATER
Rule 21    logic_op -> GREATER_EQ
Rule 22    logic_op -> LESS
Rule 23    logic_op -> LESS_EQ
Rule 24    variable -> var_type ID assigned SEMICOLON
Rule 25    var_type -> INT
Rule 26    var_type -> STR
Rule 27    var_type -> BOOL
Rule 28    assigned -> ASSIGN type
Rule 29    assigned -> empty
Rule 30    type -> NUMBER
Rule 31    type -> STRING
Rule 32    type -> boolean
Rule 33    type -> ID
Rule 34    boolean -> TRUE
Rule 35    boolean -> FALSE
Rule 36    constants -> constants constant
Rule 37    constants -> constants variable
Rule 38    constants -> constant
Rule 39    constants -> variable
Rule 40    constant -> ENUM ID ASSIGN NUMBER SEMICOLON
Rule 41    constant -> ENUM ID ASSIGN STRING SEMICOLON
Rule 42    constant -> ENUM ID ASSIGN boolean SEMICOLON
Rule 43    constant -> ENUM ID SEMICOLON
Rule 44    constant -> empty
Rule 45    print -> WRITELN LPAREN ID RPAREN SEMICOLON
Rule 46    print -> WRITELN LPAREN STRING RPAREN SEMICOLON
Rule 47    print -> WRITELN LPAREN NUMBER RPAREN SEMICOLON
Rule 48    print -> WRITELN LPAREN boolean RPAREN SEMICOLON
Rule 49    get -> READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
Rule 50    empty -> <empty>

Terminals, with rules where they appear

AMPERSAND            : 49
ASSIGN               : 28 40 41 42
BOOL                 : 27
COMMA                : 49
ELSE                 : 16
ENUM                 : 40 41 42 43
EQ                   : 18
FALSE                : 35
GREATER              : 20
GREATER_EQ           : 21
ID                   : 3 10 24 33 40 41 42 43 45 49
IF                   : 15 16
INT                  : 25
LBRACE               : 2 14 15 16 16
LESS                 : 22
LESS_EQ              : 23
LPAREN               : 2 14 15 16 45 46 47 48 49
LSQUARE              : 3
MAIN                 : 2
NOT_EQ               : 19
NUMBER               : 30 40 47
RBRACE               : 2 14 15 16 16
READF                : 49
RPAREN               : 2 14 15 16 45 46 47 48 49
RSQUARE              : 3
SEMICOLON            : 10 24 40 41 42 43 45 46 47 48 49
STR                  : 3 26
STRING               : 31 41 46 49
TRUE                 : 34
VOID                 : 2
WHILE                : 14
WRITELN              : 45 46 47 48
error                : 

Nonterminals, with rules where they appear

assigned             : 10 24
boolean              : 32 42 48
constant             : 36 38
constants            : 2 2 7 36 37
empty                : 4 13 29 44
expression           : 5 6
expressions          : 2 5 14 15 16 16
function             : 1
get                  : 12
if                   : 9
logic_op             : 17
params               : 2
print                : 11
start                : 0
statement            : 14 15 16
type                 : 17 17 28
var_type             : 24
variable             : 37 39
while                : 8

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . function
    (2) function -> . constants VOID MAIN LPAREN params RPAREN LBRACE expressions RBRACE constants
    (36) constants -> . constants constant
    (37) constants -> . constants variable
    (38) constants -> . constant
    (39) constants -> . variable
    (40) constant -> . ENUM ID ASSIGN NUMBER SEMICOLON
    (41) constant -> . ENUM ID ASSIGN STRING SEMICOLON
    (42) constant -> . ENUM ID ASSIGN boolean SEMICOLON
    (43) constant -> . ENUM ID SEMICOLON
    (44) constant -> . empty
    (24) variable -> . var_type ID assigned SEMICOLON
    (50) empty -> .
    (25) var_type -> . INT
    (26) var_type -> . STR
    (27) var_type -> . BOOL

  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    ENUM            shift and go to state 7
    VOID            reduce using rule 50 (empty -> .)
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 11

  ! ENUM            [ reduce using rule 50 (empty -> .) ]
  ! INT             [ reduce using rule 50 (empty -> .) ]
  ! STR             [ reduce using rule 50 (empty -> .) ]
  ! BOOL            [ reduce using rule 50 (empty -> .) ]

    function                       shift and go to state 6
    constant                       shift and go to state 1
    var_type                       shift and go to state 3
    start                          shift and go to state 4
    empty                          shift and go to state 5
    variable                       shift and go to state 8
    constants                      shift and go to state 9

state 1

    (38) constants -> constant .

    ENUM            reduce using rule 38 (constants -> constant .)
    INT             reduce using rule 38 (constants -> constant .)
    STR             reduce using rule 38 (constants -> constant .)
    BOOL            reduce using rule 38 (constants -> constant .)
    $end            reduce using rule 38 (constants -> constant .)
    RBRACE          reduce using rule 38 (constants -> constant .)
    ID              reduce using rule 38 (constants -> constant .)
    WHILE           reduce using rule 38 (constants -> constant .)
    IF              reduce using rule 38 (constants -> constant .)
    WRITELN         reduce using rule 38 (constants -> constant .)
    READF           reduce using rule 38 (constants -> constant .)
    VOID            reduce using rule 38 (constants -> constant .)


state 2

    (26) var_type -> STR .

    ID              reduce using rule 26 (var_type -> STR .)


state 3

    (24) variable -> var_type . ID assigned SEMICOLON

    ID              shift and go to state 12


state 4

    (0) S' -> start .



state 5

    (44) constant -> empty .

    ENUM            reduce using rule 44 (constant -> empty .)
    INT             reduce using rule 44 (constant -> empty .)
    STR             reduce using rule 44 (constant -> empty .)
    BOOL            reduce using rule 44 (constant -> empty .)
    $end            reduce using rule 44 (constant -> empty .)
    VOID            reduce using rule 44 (constant -> empty .)
    RBRACE          reduce using rule 44 (constant -> empty .)
    ID              reduce using rule 44 (constant -> empty .)
    WHILE           reduce using rule 44 (constant -> empty .)
    IF              reduce using rule 44 (constant -> empty .)
    WRITELN         reduce using rule 44 (constant -> empty .)
    READF           reduce using rule 44 (constant -> empty .)


state 6

    (1) start -> function .

    $end            reduce using rule 1 (start -> function .)


state 7

    (40) constant -> ENUM . ID ASSIGN NUMBER SEMICOLON
    (41) constant -> ENUM . ID ASSIGN STRING SEMICOLON
    (42) constant -> ENUM . ID ASSIGN boolean SEMICOLON
    (43) constant -> ENUM . ID SEMICOLON

    ID              shift and go to state 13


state 8

    (39) constants -> variable .

    ENUM            reduce using rule 39 (constants -> variable .)
    INT             reduce using rule 39 (constants -> variable .)
    STR             reduce using rule 39 (constants -> variable .)
    BOOL            reduce using rule 39 (constants -> variable .)
    $end            reduce using rule 39 (constants -> variable .)
    RBRACE          reduce using rule 39 (constants -> variable .)
    ID              reduce using rule 39 (constants -> variable .)
    WHILE           reduce using rule 39 (constants -> variable .)
    IF              reduce using rule 39 (constants -> variable .)
    WRITELN         reduce using rule 39 (constants -> variable .)
    READF           reduce using rule 39 (constants -> variable .)
    VOID            reduce using rule 39 (constants -> variable .)


state 9

    (2) function -> constants . VOID MAIN LPAREN params RPAREN LBRACE expressions RBRACE constants
    (36) constants -> constants . constant
    (37) constants -> constants . variable
    (40) constant -> . ENUM ID ASSIGN NUMBER SEMICOLON
    (41) constant -> . ENUM ID ASSIGN STRING SEMICOLON
    (42) constant -> . ENUM ID ASSIGN boolean SEMICOLON
    (43) constant -> . ENUM ID SEMICOLON
    (44) constant -> . empty
    (24) variable -> . var_type ID assigned SEMICOLON
    (50) empty -> .
    (25) var_type -> . INT
    (26) var_type -> . STR
    (27) var_type -> . BOOL

  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    VOID            shift and go to state 15
    ENUM            shift and go to state 7
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 11

  ! VOID            [ reduce using rule 50 (empty -> .) ]
  ! ENUM            [ reduce using rule 50 (empty -> .) ]
  ! INT             [ reduce using rule 50 (empty -> .) ]
  ! STR             [ reduce using rule 50 (empty -> .) ]
  ! BOOL            [ reduce using rule 50 (empty -> .) ]

    constant                       shift and go to state 14
    var_type                       shift and go to state 3
    empty                          shift and go to state 5
    variable                       shift and go to state 16

state 10

    (25) var_type -> INT .

    ID              reduce using rule 25 (var_type -> INT .)


state 11

    (27) var_type -> BOOL .

    ID              reduce using rule 27 (var_type -> BOOL .)


state 12

    (24) variable -> var_type ID . assigned SEMICOLON
    (28) assigned -> . ASSIGN type
    (29) assigned -> . empty
    (50) empty -> .

    ASSIGN          shift and go to state 17
    SEMICOLON       reduce using rule 50 (empty -> .)

    assigned                       shift and go to state 18
    empty                          shift and go to state 19

state 13

    (40) constant -> ENUM ID . ASSIGN NUMBER SEMICOLON
    (41) constant -> ENUM ID . ASSIGN STRING SEMICOLON
    (42) constant -> ENUM ID . ASSIGN boolean SEMICOLON
    (43) constant -> ENUM ID . SEMICOLON

    ASSIGN          shift and go to state 21
    SEMICOLON       shift and go to state 20


state 14

    (36) constants -> constants constant .

    ENUM            reduce using rule 36 (constants -> constants constant .)
    INT             reduce using rule 36 (constants -> constants constant .)
    STR             reduce using rule 36 (constants -> constants constant .)
    BOOL            reduce using rule 36 (constants -> constants constant .)
    $end            reduce using rule 36 (constants -> constants constant .)
    RBRACE          reduce using rule 36 (constants -> constants constant .)
    ID              reduce using rule 36 (constants -> constants constant .)
    WHILE           reduce using rule 36 (constants -> constants constant .)
    IF              reduce using rule 36 (constants -> constants constant .)
    WRITELN         reduce using rule 36 (constants -> constants constant .)
    READF           reduce using rule 36 (constants -> constants constant .)
    VOID            reduce using rule 36 (constants -> constants constant .)


state 15

    (2) function -> constants VOID . MAIN LPAREN params RPAREN LBRACE expressions RBRACE constants

    MAIN            shift and go to state 22


state 16

    (37) constants -> constants variable .

    ENUM            reduce using rule 37 (constants -> constants variable .)
    INT             reduce using rule 37 (constants -> constants variable .)
    STR             reduce using rule 37 (constants -> constants variable .)
    BOOL            reduce using rule 37 (constants -> constants variable .)
    $end            reduce using rule 37 (constants -> constants variable .)
    RBRACE          reduce using rule 37 (constants -> constants variable .)
    ID              reduce using rule 37 (constants -> constants variable .)
    WHILE           reduce using rule 37 (constants -> constants variable .)
    IF              reduce using rule 37 (constants -> constants variable .)
    WRITELN         reduce using rule 37 (constants -> constants variable .)
    READF           reduce using rule 37 (constants -> constants variable .)
    VOID            reduce using rule 37 (constants -> constants variable .)


state 17

    (28) assigned -> ASSIGN . type
    (30) type -> . NUMBER
    (31) type -> . STRING
    (32) type -> . boolean
    (33) type -> . ID
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    NUMBER          shift and go to state 26
    STRING          shift and go to state 24
    ID              shift and go to state 27
    TRUE            shift and go to state 25
    FALSE           shift and go to state 23

    boolean                        shift and go to state 28
    type                           shift and go to state 29

state 18

    (24) variable -> var_type ID assigned . SEMICOLON

    SEMICOLON       shift and go to state 30


state 19

    (29) assigned -> empty .

    SEMICOLON       reduce using rule 29 (assigned -> empty .)


state 20

    (43) constant -> ENUM ID SEMICOLON .

    ENUM            reduce using rule 43 (constant -> ENUM ID SEMICOLON .)
    INT             reduce using rule 43 (constant -> ENUM ID SEMICOLON .)
    STR             reduce using rule 43 (constant -> ENUM ID SEMICOLON .)
    BOOL            reduce using rule 43 (constant -> ENUM ID SEMICOLON .)
    RBRACE          reduce using rule 43 (constant -> ENUM ID SEMICOLON .)
    ID              reduce using rule 43 (constant -> ENUM ID SEMICOLON .)
    WHILE           reduce using rule 43 (constant -> ENUM ID SEMICOLON .)
    IF              reduce using rule 43 (constant -> ENUM ID SEMICOLON .)
    WRITELN         reduce using rule 43 (constant -> ENUM ID SEMICOLON .)
    READF           reduce using rule 43 (constant -> ENUM ID SEMICOLON .)
    $end            reduce using rule 43 (constant -> ENUM ID SEMICOLON .)
    VOID            reduce using rule 43 (constant -> ENUM ID SEMICOLON .)


state 21

    (40) constant -> ENUM ID ASSIGN . NUMBER SEMICOLON
    (41) constant -> ENUM ID ASSIGN . STRING SEMICOLON
    (42) constant -> ENUM ID ASSIGN . boolean SEMICOLON
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    NUMBER          shift and go to state 32
    STRING          shift and go to state 31
    TRUE            shift and go to state 25
    FALSE           shift and go to state 23

    boolean                        shift and go to state 33

state 22

    (2) function -> constants VOID MAIN . LPAREN params RPAREN LBRACE expressions RBRACE constants

    LPAREN          shift and go to state 34


state 23

    (35) boolean -> FALSE .

    RPAREN          reduce using rule 35 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 35 (boolean -> FALSE .)
    EQ              reduce using rule 35 (boolean -> FALSE .)
    NOT_EQ          reduce using rule 35 (boolean -> FALSE .)
    GREATER         reduce using rule 35 (boolean -> FALSE .)
    GREATER_EQ      reduce using rule 35 (boolean -> FALSE .)
    LESS            reduce using rule 35 (boolean -> FALSE .)
    LESS_EQ         reduce using rule 35 (boolean -> FALSE .)


state 24

    (31) type -> STRING .

    RPAREN          reduce using rule 31 (type -> STRING .)
    EQ              reduce using rule 31 (type -> STRING .)
    NOT_EQ          reduce using rule 31 (type -> STRING .)
    GREATER         reduce using rule 31 (type -> STRING .)
    GREATER_EQ      reduce using rule 31 (type -> STRING .)
    LESS            reduce using rule 31 (type -> STRING .)
    LESS_EQ         reduce using rule 31 (type -> STRING .)
    SEMICOLON       reduce using rule 31 (type -> STRING .)


state 25

    (34) boolean -> TRUE .

    RPAREN          reduce using rule 34 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 34 (boolean -> TRUE .)
    EQ              reduce using rule 34 (boolean -> TRUE .)
    NOT_EQ          reduce using rule 34 (boolean -> TRUE .)
    GREATER         reduce using rule 34 (boolean -> TRUE .)
    GREATER_EQ      reduce using rule 34 (boolean -> TRUE .)
    LESS            reduce using rule 34 (boolean -> TRUE .)
    LESS_EQ         reduce using rule 34 (boolean -> TRUE .)


state 26

    (30) type -> NUMBER .

    RPAREN          reduce using rule 30 (type -> NUMBER .)
    EQ              reduce using rule 30 (type -> NUMBER .)
    NOT_EQ          reduce using rule 30 (type -> NUMBER .)
    GREATER         reduce using rule 30 (type -> NUMBER .)
    GREATER_EQ      reduce using rule 30 (type -> NUMBER .)
    LESS            reduce using rule 30 (type -> NUMBER .)
    LESS_EQ         reduce using rule 30 (type -> NUMBER .)
    SEMICOLON       reduce using rule 30 (type -> NUMBER .)


state 27

    (33) type -> ID .

    RPAREN          reduce using rule 33 (type -> ID .)
    EQ              reduce using rule 33 (type -> ID .)
    NOT_EQ          reduce using rule 33 (type -> ID .)
    GREATER         reduce using rule 33 (type -> ID .)
    GREATER_EQ      reduce using rule 33 (type -> ID .)
    LESS            reduce using rule 33 (type -> ID .)
    LESS_EQ         reduce using rule 33 (type -> ID .)
    SEMICOLON       reduce using rule 33 (type -> ID .)


state 28

    (32) type -> boolean .

    RPAREN          reduce using rule 32 (type -> boolean .)
    EQ              reduce using rule 32 (type -> boolean .)
    NOT_EQ          reduce using rule 32 (type -> boolean .)
    GREATER         reduce using rule 32 (type -> boolean .)
    GREATER_EQ      reduce using rule 32 (type -> boolean .)
    LESS            reduce using rule 32 (type -> boolean .)
    LESS_EQ         reduce using rule 32 (type -> boolean .)
    SEMICOLON       reduce using rule 32 (type -> boolean .)


state 29

    (28) assigned -> ASSIGN type .

    SEMICOLON       reduce using rule 28 (assigned -> ASSIGN type .)


state 30

    (24) variable -> var_type ID assigned SEMICOLON .

    ENUM            reduce using rule 24 (variable -> var_type ID assigned SEMICOLON .)
    INT             reduce using rule 24 (variable -> var_type ID assigned SEMICOLON .)
    STR             reduce using rule 24 (variable -> var_type ID assigned SEMICOLON .)
    BOOL            reduce using rule 24 (variable -> var_type ID assigned SEMICOLON .)
    RBRACE          reduce using rule 24 (variable -> var_type ID assigned SEMICOLON .)
    ID              reduce using rule 24 (variable -> var_type ID assigned SEMICOLON .)
    WHILE           reduce using rule 24 (variable -> var_type ID assigned SEMICOLON .)
    IF              reduce using rule 24 (variable -> var_type ID assigned SEMICOLON .)
    WRITELN         reduce using rule 24 (variable -> var_type ID assigned SEMICOLON .)
    READF           reduce using rule 24 (variable -> var_type ID assigned SEMICOLON .)
    VOID            reduce using rule 24 (variable -> var_type ID assigned SEMICOLON .)
    $end            reduce using rule 24 (variable -> var_type ID assigned SEMICOLON .)


state 31

    (41) constant -> ENUM ID ASSIGN STRING . SEMICOLON

    SEMICOLON       shift and go to state 35


state 32

    (40) constant -> ENUM ID ASSIGN NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 36


state 33

    (42) constant -> ENUM ID ASSIGN boolean . SEMICOLON

    SEMICOLON       shift and go to state 37


state 34

    (2) function -> constants VOID MAIN LPAREN . params RPAREN LBRACE expressions RBRACE constants
    (3) params -> . STR LSQUARE RSQUARE ID
    (4) params -> . empty
    (50) empty -> .

    STR             shift and go to state 38
    RPAREN          reduce using rule 50 (empty -> .)

    params                         shift and go to state 39
    empty                          shift and go to state 40

state 35

    (41) constant -> ENUM ID ASSIGN STRING SEMICOLON .

    ENUM            reduce using rule 41 (constant -> ENUM ID ASSIGN STRING SEMICOLON .)
    INT             reduce using rule 41 (constant -> ENUM ID ASSIGN STRING SEMICOLON .)
    STR             reduce using rule 41 (constant -> ENUM ID ASSIGN STRING SEMICOLON .)
    BOOL            reduce using rule 41 (constant -> ENUM ID ASSIGN STRING SEMICOLON .)
    RBRACE          reduce using rule 41 (constant -> ENUM ID ASSIGN STRING SEMICOLON .)
    ID              reduce using rule 41 (constant -> ENUM ID ASSIGN STRING SEMICOLON .)
    WHILE           reduce using rule 41 (constant -> ENUM ID ASSIGN STRING SEMICOLON .)
    IF              reduce using rule 41 (constant -> ENUM ID ASSIGN STRING SEMICOLON .)
    WRITELN         reduce using rule 41 (constant -> ENUM ID ASSIGN STRING SEMICOLON .)
    READF           reduce using rule 41 (constant -> ENUM ID ASSIGN STRING SEMICOLON .)
    $end            reduce using rule 41 (constant -> ENUM ID ASSIGN STRING SEMICOLON .)
    VOID            reduce using rule 41 (constant -> ENUM ID ASSIGN STRING SEMICOLON .)


state 36

    (40) constant -> ENUM ID ASSIGN NUMBER SEMICOLON .

    ENUM            reduce using rule 40 (constant -> ENUM ID ASSIGN NUMBER SEMICOLON .)
    INT             reduce using rule 40 (constant -> ENUM ID ASSIGN NUMBER SEMICOLON .)
    STR             reduce using rule 40 (constant -> ENUM ID ASSIGN NUMBER SEMICOLON .)
    BOOL            reduce using rule 40 (constant -> ENUM ID ASSIGN NUMBER SEMICOLON .)
    RBRACE          reduce using rule 40 (constant -> ENUM ID ASSIGN NUMBER SEMICOLON .)
    ID              reduce using rule 40 (constant -> ENUM ID ASSIGN NUMBER SEMICOLON .)
    WHILE           reduce using rule 40 (constant -> ENUM ID ASSIGN NUMBER SEMICOLON .)
    IF              reduce using rule 40 (constant -> ENUM ID ASSIGN NUMBER SEMICOLON .)
    WRITELN         reduce using rule 40 (constant -> ENUM ID ASSIGN NUMBER SEMICOLON .)
    READF           reduce using rule 40 (constant -> ENUM ID ASSIGN NUMBER SEMICOLON .)
    $end            reduce using rule 40 (constant -> ENUM ID ASSIGN NUMBER SEMICOLON .)
    VOID            reduce using rule 40 (constant -> ENUM ID ASSIGN NUMBER SEMICOLON .)


state 37

    (42) constant -> ENUM ID ASSIGN boolean SEMICOLON .

    ENUM            reduce using rule 42 (constant -> ENUM ID ASSIGN boolean SEMICOLON .)
    INT             reduce using rule 42 (constant -> ENUM ID ASSIGN boolean SEMICOLON .)
    STR             reduce using rule 42 (constant -> ENUM ID ASSIGN boolean SEMICOLON .)
    BOOL            reduce using rule 42 (constant -> ENUM ID ASSIGN boolean SEMICOLON .)
    RBRACE          reduce using rule 42 (constant -> ENUM ID ASSIGN boolean SEMICOLON .)
    ID              reduce using rule 42 (constant -> ENUM ID ASSIGN boolean SEMICOLON .)
    WHILE           reduce using rule 42 (constant -> ENUM ID ASSIGN boolean SEMICOLON .)
    IF              reduce using rule 42 (constant -> ENUM ID ASSIGN boolean SEMICOLON .)
    WRITELN         reduce using rule 42 (constant -> ENUM ID ASSIGN boolean SEMICOLON .)
    READF           reduce using rule 42 (constant -> ENUM ID ASSIGN boolean SEMICOLON .)
    $end            reduce using rule 42 (constant -> ENUM ID ASSIGN boolean SEMICOLON .)
    VOID            reduce using rule 42 (constant -> ENUM ID ASSIGN boolean SEMICOLON .)


state 38

    (3) params -> STR . LSQUARE RSQUARE ID

    LSQUARE         shift and go to state 41


state 39

    (2) function -> constants VOID MAIN LPAREN params . RPAREN LBRACE expressions RBRACE constants

    RPAREN          shift and go to state 42


state 40

    (4) params -> empty .

    RPAREN          reduce using rule 4 (params -> empty .)


state 41

    (3) params -> STR LSQUARE . RSQUARE ID

    RSQUARE         shift and go to state 43


state 42

    (2) function -> constants VOID MAIN LPAREN params RPAREN . LBRACE expressions RBRACE constants

    LBRACE          shift and go to state 44


state 43

    (3) params -> STR LSQUARE RSQUARE . ID

    ID              shift and go to state 45


state 44

    (2) function -> constants VOID MAIN LPAREN params RPAREN LBRACE . expressions RBRACE constants
    (5) expressions -> . expressions expression
    (6) expressions -> . expression
    (7) expression -> . constants
    (8) expression -> . while
    (9) expression -> . if
    (10) expression -> . ID assigned SEMICOLON
    (11) expression -> . print
    (12) expression -> . get
    (13) expression -> . empty
    (36) constants -> . constants constant
    (37) constants -> . constants variable
    (38) constants -> . constant
    (39) constants -> . variable
    (14) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (15) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (16) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
    (45) print -> . WRITELN LPAREN ID RPAREN SEMICOLON
    (46) print -> . WRITELN LPAREN STRING RPAREN SEMICOLON
    (47) print -> . WRITELN LPAREN NUMBER RPAREN SEMICOLON
    (48) print -> . WRITELN LPAREN boolean RPAREN SEMICOLON
    (49) get -> . READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (50) empty -> .
    (40) constant -> . ENUM ID ASSIGN NUMBER SEMICOLON
    (41) constant -> . ENUM ID ASSIGN STRING SEMICOLON
    (42) constant -> . ENUM ID ASSIGN boolean SEMICOLON
    (43) constant -> . ENUM ID SEMICOLON
    (44) constant -> . empty
    (24) variable -> . var_type ID assigned SEMICOLON
    (25) var_type -> . INT
    (26) var_type -> . STR
    (27) var_type -> . BOOL

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for READF resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    ID              shift and go to state 53
    WHILE           shift and go to state 46
    IF              shift and go to state 55
    WRITELN         shift and go to state 52
    READF           shift and go to state 56
    RBRACE          reduce using rule 50 (empty -> .)
    ENUM            shift and go to state 7
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 11

  ! ID              [ reduce using rule 50 (empty -> .) ]
  ! WHILE           [ reduce using rule 50 (empty -> .) ]
  ! IF              [ reduce using rule 50 (empty -> .) ]
  ! WRITELN         [ reduce using rule 50 (empty -> .) ]
  ! READF           [ reduce using rule 50 (empty -> .) ]
  ! ENUM            [ reduce using rule 50 (empty -> .) ]
  ! INT             [ reduce using rule 50 (empty -> .) ]
  ! STR             [ reduce using rule 50 (empty -> .) ]
  ! BOOL            [ reduce using rule 50 (empty -> .) ]

    constant                       shift and go to state 1
    var_type                       shift and go to state 3
    get                            shift and go to state 51
    variable                       shift and go to state 8
    while                          shift and go to state 57
    empty                          shift and go to state 50
    print                          shift and go to state 49
    expressions                    shift and go to state 47
    expression                     shift and go to state 58
    constants                      shift and go to state 54
    if                             shift and go to state 48

state 45

    (3) params -> STR LSQUARE RSQUARE ID .

    RPAREN          reduce using rule 3 (params -> STR LSQUARE RSQUARE ID .)


state 46

    (14) while -> WHILE . LPAREN statement RPAREN LBRACE expressions RBRACE

    LPAREN          shift and go to state 59


state 47

    (2) function -> constants VOID MAIN LPAREN params RPAREN LBRACE expressions . RBRACE constants
    (5) expressions -> expressions . expression
    (7) expression -> . constants
    (8) expression -> . while
    (9) expression -> . if
    (10) expression -> . ID assigned SEMICOLON
    (11) expression -> . print
    (12) expression -> . get
    (13) expression -> . empty
    (36) constants -> . constants constant
    (37) constants -> . constants variable
    (38) constants -> . constant
    (39) constants -> . variable
    (14) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (15) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (16) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
    (45) print -> . WRITELN LPAREN ID RPAREN SEMICOLON
    (46) print -> . WRITELN LPAREN STRING RPAREN SEMICOLON
    (47) print -> . WRITELN LPAREN NUMBER RPAREN SEMICOLON
    (48) print -> . WRITELN LPAREN boolean RPAREN SEMICOLON
    (49) get -> . READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (50) empty -> .
    (40) constant -> . ENUM ID ASSIGN NUMBER SEMICOLON
    (41) constant -> . ENUM ID ASSIGN STRING SEMICOLON
    (42) constant -> . ENUM ID ASSIGN boolean SEMICOLON
    (43) constant -> . ENUM ID SEMICOLON
    (44) constant -> . empty
    (24) variable -> . var_type ID assigned SEMICOLON
    (25) var_type -> . INT
    (26) var_type -> . STR
    (27) var_type -> . BOOL

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for READF resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    RBRACE          shift and go to state 60
    ID              shift and go to state 53
    WHILE           shift and go to state 46
    IF              shift and go to state 55
    WRITELN         shift and go to state 52
    READF           shift and go to state 56
    ENUM            shift and go to state 7
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 11

  ! RBRACE          [ reduce using rule 50 (empty -> .) ]
  ! ID              [ reduce using rule 50 (empty -> .) ]
  ! WHILE           [ reduce using rule 50 (empty -> .) ]
  ! IF              [ reduce using rule 50 (empty -> .) ]
  ! WRITELN         [ reduce using rule 50 (empty -> .) ]
  ! READF           [ reduce using rule 50 (empty -> .) ]
  ! ENUM            [ reduce using rule 50 (empty -> .) ]
  ! INT             [ reduce using rule 50 (empty -> .) ]
  ! STR             [ reduce using rule 50 (empty -> .) ]
  ! BOOL            [ reduce using rule 50 (empty -> .) ]

    constant                       shift and go to state 1
    var_type                       shift and go to state 3
    get                            shift and go to state 51
    variable                       shift and go to state 8
    while                          shift and go to state 57
    empty                          shift and go to state 50
    print                          shift and go to state 49
    expression                     shift and go to state 61
    constants                      shift and go to state 54
    if                             shift and go to state 48

state 48

    (9) expression -> if .

    RBRACE          reduce using rule 9 (expression -> if .)
    ID              reduce using rule 9 (expression -> if .)
    WHILE           reduce using rule 9 (expression -> if .)
    IF              reduce using rule 9 (expression -> if .)
    WRITELN         reduce using rule 9 (expression -> if .)
    READF           reduce using rule 9 (expression -> if .)
    ENUM            reduce using rule 9 (expression -> if .)
    INT             reduce using rule 9 (expression -> if .)
    STR             reduce using rule 9 (expression -> if .)
    BOOL            reduce using rule 9 (expression -> if .)


state 49

    (11) expression -> print .

    RBRACE          reduce using rule 11 (expression -> print .)
    ID              reduce using rule 11 (expression -> print .)
    WHILE           reduce using rule 11 (expression -> print .)
    IF              reduce using rule 11 (expression -> print .)
    WRITELN         reduce using rule 11 (expression -> print .)
    READF           reduce using rule 11 (expression -> print .)
    ENUM            reduce using rule 11 (expression -> print .)
    INT             reduce using rule 11 (expression -> print .)
    STR             reduce using rule 11 (expression -> print .)
    BOOL            reduce using rule 11 (expression -> print .)


state 50

    (13) expression -> empty .
    (44) constant -> empty .

  ! reduce/reduce conflict for ENUM resolved using rule 13 (expression -> empty .)
  ! reduce/reduce conflict for INT resolved using rule 13 (expression -> empty .)
  ! reduce/reduce conflict for STR resolved using rule 13 (expression -> empty .)
  ! reduce/reduce conflict for BOOL resolved using rule 13 (expression -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 13 (expression -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 13 (expression -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 13 (expression -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 13 (expression -> empty .)
  ! reduce/reduce conflict for WRITELN resolved using rule 13 (expression -> empty .)
  ! reduce/reduce conflict for READF resolved using rule 13 (expression -> empty .)
    RBRACE          reduce using rule 13 (expression -> empty .)
    ID              reduce using rule 13 (expression -> empty .)
    WHILE           reduce using rule 13 (expression -> empty .)
    IF              reduce using rule 13 (expression -> empty .)
    WRITELN         reduce using rule 13 (expression -> empty .)
    READF           reduce using rule 13 (expression -> empty .)
    ENUM            reduce using rule 13 (expression -> empty .)
    INT             reduce using rule 13 (expression -> empty .)
    STR             reduce using rule 13 (expression -> empty .)
    BOOL            reduce using rule 13 (expression -> empty .)

  ! ENUM            [ reduce using rule 44 (constant -> empty .) ]
  ! INT             [ reduce using rule 44 (constant -> empty .) ]
  ! STR             [ reduce using rule 44 (constant -> empty .) ]
  ! BOOL            [ reduce using rule 44 (constant -> empty .) ]
  ! RBRACE          [ reduce using rule 44 (constant -> empty .) ]
  ! ID              [ reduce using rule 44 (constant -> empty .) ]
  ! WHILE           [ reduce using rule 44 (constant -> empty .) ]
  ! IF              [ reduce using rule 44 (constant -> empty .) ]
  ! WRITELN         [ reduce using rule 44 (constant -> empty .) ]
  ! READF           [ reduce using rule 44 (constant -> empty .) ]


state 51

    (12) expression -> get .

    RBRACE          reduce using rule 12 (expression -> get .)
    ID              reduce using rule 12 (expression -> get .)
    WHILE           reduce using rule 12 (expression -> get .)
    IF              reduce using rule 12 (expression -> get .)
    WRITELN         reduce using rule 12 (expression -> get .)
    READF           reduce using rule 12 (expression -> get .)
    ENUM            reduce using rule 12 (expression -> get .)
    INT             reduce using rule 12 (expression -> get .)
    STR             reduce using rule 12 (expression -> get .)
    BOOL            reduce using rule 12 (expression -> get .)


state 52

    (45) print -> WRITELN . LPAREN ID RPAREN SEMICOLON
    (46) print -> WRITELN . LPAREN STRING RPAREN SEMICOLON
    (47) print -> WRITELN . LPAREN NUMBER RPAREN SEMICOLON
    (48) print -> WRITELN . LPAREN boolean RPAREN SEMICOLON

    LPAREN          shift and go to state 62


state 53

    (10) expression -> ID . assigned SEMICOLON
    (28) assigned -> . ASSIGN type
    (29) assigned -> . empty
    (50) empty -> .

    ASSIGN          shift and go to state 17
    SEMICOLON       reduce using rule 50 (empty -> .)

    assigned                       shift and go to state 63
    empty                          shift and go to state 19

state 54

    (7) expression -> constants .
    (36) constants -> constants . constant
    (37) constants -> constants . variable
    (40) constant -> . ENUM ID ASSIGN NUMBER SEMICOLON
    (41) constant -> . ENUM ID ASSIGN STRING SEMICOLON
    (42) constant -> . ENUM ID ASSIGN boolean SEMICOLON
    (43) constant -> . ENUM ID SEMICOLON
    (44) constant -> . empty
    (24) variable -> . var_type ID assigned SEMICOLON
    (50) empty -> .
    (25) var_type -> . INT
    (26) var_type -> . STR
    (27) var_type -> . BOOL

  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 7 (expression -> constants .)
  ! reduce/reduce conflict for STR resolved using rule 7 (expression -> constants .)
  ! reduce/reduce conflict for BOOL resolved using rule 7 (expression -> constants .)
  ! reduce/reduce conflict for RBRACE resolved using rule 7 (expression -> constants .)
  ! reduce/reduce conflict for ID resolved using rule 7 (expression -> constants .)
  ! reduce/reduce conflict for WHILE resolved using rule 7 (expression -> constants .)
  ! reduce/reduce conflict for IF resolved using rule 7 (expression -> constants .)
  ! reduce/reduce conflict for WRITELN resolved using rule 7 (expression -> constants .)
  ! reduce/reduce conflict for READF resolved using rule 7 (expression -> constants .)
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    RBRACE          reduce using rule 7 (expression -> constants .)
    ID              reduce using rule 7 (expression -> constants .)
    WHILE           reduce using rule 7 (expression -> constants .)
    IF              reduce using rule 7 (expression -> constants .)
    WRITELN         reduce using rule 7 (expression -> constants .)
    READF           reduce using rule 7 (expression -> constants .)
    ENUM            shift and go to state 7
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 11

  ! ENUM            [ reduce using rule 7 (expression -> constants .) ]
  ! INT             [ reduce using rule 7 (expression -> constants .) ]
  ! STR             [ reduce using rule 7 (expression -> constants .) ]
  ! BOOL            [ reduce using rule 7 (expression -> constants .) ]
  ! ENUM            [ reduce using rule 50 (empty -> .) ]
  ! INT             [ reduce using rule 50 (empty -> .) ]
  ! STR             [ reduce using rule 50 (empty -> .) ]
  ! BOOL            [ reduce using rule 50 (empty -> .) ]
  ! RBRACE          [ reduce using rule 50 (empty -> .) ]
  ! ID              [ reduce using rule 50 (empty -> .) ]
  ! WHILE           [ reduce using rule 50 (empty -> .) ]
  ! IF              [ reduce using rule 50 (empty -> .) ]
  ! WRITELN         [ reduce using rule 50 (empty -> .) ]
  ! READF           [ reduce using rule 50 (empty -> .) ]

    constant                       shift and go to state 14
    var_type                       shift and go to state 3
    variable                       shift and go to state 16
    empty                          shift and go to state 5

state 55

    (15) if -> IF . LPAREN statement RPAREN LBRACE expressions RBRACE
    (16) if -> IF . LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE

    LPAREN          shift and go to state 64


state 56

    (49) get -> READF . LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON

    LPAREN          shift and go to state 65


state 57

    (8) expression -> while .

    RBRACE          reduce using rule 8 (expression -> while .)
    ID              reduce using rule 8 (expression -> while .)
    WHILE           reduce using rule 8 (expression -> while .)
    IF              reduce using rule 8 (expression -> while .)
    WRITELN         reduce using rule 8 (expression -> while .)
    READF           reduce using rule 8 (expression -> while .)
    ENUM            reduce using rule 8 (expression -> while .)
    INT             reduce using rule 8 (expression -> while .)
    STR             reduce using rule 8 (expression -> while .)
    BOOL            reduce using rule 8 (expression -> while .)


state 58

    (6) expressions -> expression .

    RBRACE          reduce using rule 6 (expressions -> expression .)
    ID              reduce using rule 6 (expressions -> expression .)
    WHILE           reduce using rule 6 (expressions -> expression .)
    IF              reduce using rule 6 (expressions -> expression .)
    WRITELN         reduce using rule 6 (expressions -> expression .)
    READF           reduce using rule 6 (expressions -> expression .)
    ENUM            reduce using rule 6 (expressions -> expression .)
    INT             reduce using rule 6 (expressions -> expression .)
    STR             reduce using rule 6 (expressions -> expression .)
    BOOL            reduce using rule 6 (expressions -> expression .)


state 59

    (14) while -> WHILE LPAREN . statement RPAREN LBRACE expressions RBRACE
    (17) statement -> . type logic_op type
    (30) type -> . NUMBER
    (31) type -> . STRING
    (32) type -> . boolean
    (33) type -> . ID
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    NUMBER          shift and go to state 26
    STRING          shift and go to state 24
    ID              shift and go to state 27
    TRUE            shift and go to state 25
    FALSE           shift and go to state 23

    boolean                        shift and go to state 28
    type                           shift and go to state 67
    statement                      shift and go to state 66

state 60

    (2) function -> constants VOID MAIN LPAREN params RPAREN LBRACE expressions RBRACE . constants
    (36) constants -> . constants constant
    (37) constants -> . constants variable
    (38) constants -> . constant
    (39) constants -> . variable
    (40) constant -> . ENUM ID ASSIGN NUMBER SEMICOLON
    (41) constant -> . ENUM ID ASSIGN STRING SEMICOLON
    (42) constant -> . ENUM ID ASSIGN boolean SEMICOLON
    (43) constant -> . ENUM ID SEMICOLON
    (44) constant -> . empty
    (24) variable -> . var_type ID assigned SEMICOLON
    (50) empty -> .
    (25) var_type -> . INT
    (26) var_type -> . STR
    (27) var_type -> . BOOL

  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    ENUM            shift and go to state 7
    $end            reduce using rule 50 (empty -> .)
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 11

  ! ENUM            [ reduce using rule 50 (empty -> .) ]
  ! INT             [ reduce using rule 50 (empty -> .) ]
  ! STR             [ reduce using rule 50 (empty -> .) ]
  ! BOOL            [ reduce using rule 50 (empty -> .) ]

    constant                       shift and go to state 1
    var_type                       shift and go to state 3
    empty                          shift and go to state 5
    variable                       shift and go to state 8
    constants                      shift and go to state 68

state 61

    (5) expressions -> expressions expression .

    RBRACE          reduce using rule 5 (expressions -> expressions expression .)
    ID              reduce using rule 5 (expressions -> expressions expression .)
    WHILE           reduce using rule 5 (expressions -> expressions expression .)
    IF              reduce using rule 5 (expressions -> expressions expression .)
    WRITELN         reduce using rule 5 (expressions -> expressions expression .)
    READF           reduce using rule 5 (expressions -> expressions expression .)
    ENUM            reduce using rule 5 (expressions -> expressions expression .)
    INT             reduce using rule 5 (expressions -> expressions expression .)
    STR             reduce using rule 5 (expressions -> expressions expression .)
    BOOL            reduce using rule 5 (expressions -> expressions expression .)


state 62

    (45) print -> WRITELN LPAREN . ID RPAREN SEMICOLON
    (46) print -> WRITELN LPAREN . STRING RPAREN SEMICOLON
    (47) print -> WRITELN LPAREN . NUMBER RPAREN SEMICOLON
    (48) print -> WRITELN LPAREN . boolean RPAREN SEMICOLON
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    ID              shift and go to state 72
    STRING          shift and go to state 69
    NUMBER          shift and go to state 70
    TRUE            shift and go to state 25
    FALSE           shift and go to state 23

    boolean                        shift and go to state 71

state 63

    (10) expression -> ID assigned . SEMICOLON

    SEMICOLON       shift and go to state 73


state 64

    (15) if -> IF LPAREN . statement RPAREN LBRACE expressions RBRACE
    (16) if -> IF LPAREN . statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
    (17) statement -> . type logic_op type
    (30) type -> . NUMBER
    (31) type -> . STRING
    (32) type -> . boolean
    (33) type -> . ID
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    NUMBER          shift and go to state 26
    STRING          shift and go to state 24
    ID              shift and go to state 27
    TRUE            shift and go to state 25
    FALSE           shift and go to state 23

    boolean                        shift and go to state 28
    type                           shift and go to state 67
    statement                      shift and go to state 74

state 65

    (49) get -> READF LPAREN . STRING COMMA AMPERSAND ID RPAREN SEMICOLON

    STRING          shift and go to state 75


state 66

    (14) while -> WHILE LPAREN statement . RPAREN LBRACE expressions RBRACE

    RPAREN          shift and go to state 76


state 67

    (17) statement -> type . logic_op type
    (18) logic_op -> . EQ
    (19) logic_op -> . NOT_EQ
    (20) logic_op -> . GREATER
    (21) logic_op -> . GREATER_EQ
    (22) logic_op -> . LESS
    (23) logic_op -> . LESS_EQ

    EQ              shift and go to state 81
    NOT_EQ          shift and go to state 83
    GREATER         shift and go to state 79
    GREATER_EQ      shift and go to state 82
    LESS            shift and go to state 80
    LESS_EQ         shift and go to state 77

    logic_op                       shift and go to state 78

state 68

    (2) function -> constants VOID MAIN LPAREN params RPAREN LBRACE expressions RBRACE constants .
    (36) constants -> constants . constant
    (37) constants -> constants . variable
    (40) constant -> . ENUM ID ASSIGN NUMBER SEMICOLON
    (41) constant -> . ENUM ID ASSIGN STRING SEMICOLON
    (42) constant -> . ENUM ID ASSIGN boolean SEMICOLON
    (43) constant -> . ENUM ID SEMICOLON
    (44) constant -> . empty
    (24) variable -> . var_type ID assigned SEMICOLON
    (50) empty -> .
    (25) var_type -> . INT
    (26) var_type -> . STR
    (27) var_type -> . BOOL

  ! shift/reduce conflict for ENUM resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 2 (function -> constants VOID MAIN LPAREN params RPAREN LBRACE expressions RBRACE constants .)
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    $end            reduce using rule 2 (function -> constants VOID MAIN LPAREN params RPAREN LBRACE expressions RBRACE constants .)
    ENUM            shift and go to state 7
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 11

  ! ENUM            [ reduce using rule 50 (empty -> .) ]
  ! INT             [ reduce using rule 50 (empty -> .) ]
  ! STR             [ reduce using rule 50 (empty -> .) ]
  ! BOOL            [ reduce using rule 50 (empty -> .) ]
  ! $end            [ reduce using rule 50 (empty -> .) ]

    constant                       shift and go to state 14
    var_type                       shift and go to state 3
    empty                          shift and go to state 5
    variable                       shift and go to state 16

state 69

    (46) print -> WRITELN LPAREN STRING . RPAREN SEMICOLON

    RPAREN          shift and go to state 84


state 70

    (47) print -> WRITELN LPAREN NUMBER . RPAREN SEMICOLON

    RPAREN          shift and go to state 85


state 71

    (48) print -> WRITELN LPAREN boolean . RPAREN SEMICOLON

    RPAREN          shift and go to state 86


state 72

    (45) print -> WRITELN LPAREN ID . RPAREN SEMICOLON

    RPAREN          shift and go to state 87


state 73

    (10) expression -> ID assigned SEMICOLON .

    RBRACE          reduce using rule 10 (expression -> ID assigned SEMICOLON .)
    ID              reduce using rule 10 (expression -> ID assigned SEMICOLON .)
    WHILE           reduce using rule 10 (expression -> ID assigned SEMICOLON .)
    IF              reduce using rule 10 (expression -> ID assigned SEMICOLON .)
    WRITELN         reduce using rule 10 (expression -> ID assigned SEMICOLON .)
    READF           reduce using rule 10 (expression -> ID assigned SEMICOLON .)
    ENUM            reduce using rule 10 (expression -> ID assigned SEMICOLON .)
    INT             reduce using rule 10 (expression -> ID assigned SEMICOLON .)
    STR             reduce using rule 10 (expression -> ID assigned SEMICOLON .)
    BOOL            reduce using rule 10 (expression -> ID assigned SEMICOLON .)


state 74

    (15) if -> IF LPAREN statement . RPAREN LBRACE expressions RBRACE
    (16) if -> IF LPAREN statement . RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE

    RPAREN          shift and go to state 88


state 75

    (49) get -> READF LPAREN STRING . COMMA AMPERSAND ID RPAREN SEMICOLON

    COMMA           shift and go to state 89


state 76

    (14) while -> WHILE LPAREN statement RPAREN . LBRACE expressions RBRACE

    LBRACE          shift and go to state 90


state 77

    (23) logic_op -> LESS_EQ .

    NUMBER          reduce using rule 23 (logic_op -> LESS_EQ .)
    STRING          reduce using rule 23 (logic_op -> LESS_EQ .)
    ID              reduce using rule 23 (logic_op -> LESS_EQ .)
    TRUE            reduce using rule 23 (logic_op -> LESS_EQ .)
    FALSE           reduce using rule 23 (logic_op -> LESS_EQ .)


state 78

    (17) statement -> type logic_op . type
    (30) type -> . NUMBER
    (31) type -> . STRING
    (32) type -> . boolean
    (33) type -> . ID
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    NUMBER          shift and go to state 26
    STRING          shift and go to state 24
    ID              shift and go to state 27
    TRUE            shift and go to state 25
    FALSE           shift and go to state 23

    boolean                        shift and go to state 28
    type                           shift and go to state 91

state 79

    (20) logic_op -> GREATER .

    NUMBER          reduce using rule 20 (logic_op -> GREATER .)
    STRING          reduce using rule 20 (logic_op -> GREATER .)
    ID              reduce using rule 20 (logic_op -> GREATER .)
    TRUE            reduce using rule 20 (logic_op -> GREATER .)
    FALSE           reduce using rule 20 (logic_op -> GREATER .)


state 80

    (22) logic_op -> LESS .

    NUMBER          reduce using rule 22 (logic_op -> LESS .)
    STRING          reduce using rule 22 (logic_op -> LESS .)
    ID              reduce using rule 22 (logic_op -> LESS .)
    TRUE            reduce using rule 22 (logic_op -> LESS .)
    FALSE           reduce using rule 22 (logic_op -> LESS .)


state 81

    (18) logic_op -> EQ .

    NUMBER          reduce using rule 18 (logic_op -> EQ .)
    STRING          reduce using rule 18 (logic_op -> EQ .)
    ID              reduce using rule 18 (logic_op -> EQ .)
    TRUE            reduce using rule 18 (logic_op -> EQ .)
    FALSE           reduce using rule 18 (logic_op -> EQ .)


state 82

    (21) logic_op -> GREATER_EQ .

    NUMBER          reduce using rule 21 (logic_op -> GREATER_EQ .)
    STRING          reduce using rule 21 (logic_op -> GREATER_EQ .)
    ID              reduce using rule 21 (logic_op -> GREATER_EQ .)
    TRUE            reduce using rule 21 (logic_op -> GREATER_EQ .)
    FALSE           reduce using rule 21 (logic_op -> GREATER_EQ .)


state 83

    (19) logic_op -> NOT_EQ .

    NUMBER          reduce using rule 19 (logic_op -> NOT_EQ .)
    STRING          reduce using rule 19 (logic_op -> NOT_EQ .)
    ID              reduce using rule 19 (logic_op -> NOT_EQ .)
    TRUE            reduce using rule 19 (logic_op -> NOT_EQ .)
    FALSE           reduce using rule 19 (logic_op -> NOT_EQ .)


state 84

    (46) print -> WRITELN LPAREN STRING RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 92


state 85

    (47) print -> WRITELN LPAREN NUMBER RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 93


state 86

    (48) print -> WRITELN LPAREN boolean RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 94


state 87

    (45) print -> WRITELN LPAREN ID RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 95


state 88

    (15) if -> IF LPAREN statement RPAREN . LBRACE expressions RBRACE
    (16) if -> IF LPAREN statement RPAREN . LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE

    LBRACE          shift and go to state 96


state 89

    (49) get -> READF LPAREN STRING COMMA . AMPERSAND ID RPAREN SEMICOLON

    AMPERSAND       shift and go to state 97


state 90

    (14) while -> WHILE LPAREN statement RPAREN LBRACE . expressions RBRACE
    (5) expressions -> . expressions expression
    (6) expressions -> . expression
    (7) expression -> . constants
    (8) expression -> . while
    (9) expression -> . if
    (10) expression -> . ID assigned SEMICOLON
    (11) expression -> . print
    (12) expression -> . get
    (13) expression -> . empty
    (36) constants -> . constants constant
    (37) constants -> . constants variable
    (38) constants -> . constant
    (39) constants -> . variable
    (14) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (15) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (16) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
    (45) print -> . WRITELN LPAREN ID RPAREN SEMICOLON
    (46) print -> . WRITELN LPAREN STRING RPAREN SEMICOLON
    (47) print -> . WRITELN LPAREN NUMBER RPAREN SEMICOLON
    (48) print -> . WRITELN LPAREN boolean RPAREN SEMICOLON
    (49) get -> . READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (50) empty -> .
    (40) constant -> . ENUM ID ASSIGN NUMBER SEMICOLON
    (41) constant -> . ENUM ID ASSIGN STRING SEMICOLON
    (42) constant -> . ENUM ID ASSIGN boolean SEMICOLON
    (43) constant -> . ENUM ID SEMICOLON
    (44) constant -> . empty
    (24) variable -> . var_type ID assigned SEMICOLON
    (25) var_type -> . INT
    (26) var_type -> . STR
    (27) var_type -> . BOOL

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for READF resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    ID              shift and go to state 53
    WHILE           shift and go to state 46
    IF              shift and go to state 55
    WRITELN         shift and go to state 52
    READF           shift and go to state 56
    RBRACE          reduce using rule 50 (empty -> .)
    ENUM            shift and go to state 7
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 11

  ! ID              [ reduce using rule 50 (empty -> .) ]
  ! WHILE           [ reduce using rule 50 (empty -> .) ]
  ! IF              [ reduce using rule 50 (empty -> .) ]
  ! WRITELN         [ reduce using rule 50 (empty -> .) ]
  ! READF           [ reduce using rule 50 (empty -> .) ]
  ! ENUM            [ reduce using rule 50 (empty -> .) ]
  ! INT             [ reduce using rule 50 (empty -> .) ]
  ! STR             [ reduce using rule 50 (empty -> .) ]
  ! BOOL            [ reduce using rule 50 (empty -> .) ]

    constant                       shift and go to state 1
    var_type                       shift and go to state 3
    get                            shift and go to state 51
    variable                       shift and go to state 8
    while                          shift and go to state 57
    empty                          shift and go to state 50
    print                          shift and go to state 49
    expressions                    shift and go to state 98
    expression                     shift and go to state 58
    constants                      shift and go to state 54
    if                             shift and go to state 48

state 91

    (17) statement -> type logic_op type .

    RPAREN          reduce using rule 17 (statement -> type logic_op type .)


state 92

    (46) print -> WRITELN LPAREN STRING RPAREN SEMICOLON .

    RBRACE          reduce using rule 46 (print -> WRITELN LPAREN STRING RPAREN SEMICOLON .)
    ID              reduce using rule 46 (print -> WRITELN LPAREN STRING RPAREN SEMICOLON .)
    WHILE           reduce using rule 46 (print -> WRITELN LPAREN STRING RPAREN SEMICOLON .)
    IF              reduce using rule 46 (print -> WRITELN LPAREN STRING RPAREN SEMICOLON .)
    WRITELN         reduce using rule 46 (print -> WRITELN LPAREN STRING RPAREN SEMICOLON .)
    READF           reduce using rule 46 (print -> WRITELN LPAREN STRING RPAREN SEMICOLON .)
    ENUM            reduce using rule 46 (print -> WRITELN LPAREN STRING RPAREN SEMICOLON .)
    INT             reduce using rule 46 (print -> WRITELN LPAREN STRING RPAREN SEMICOLON .)
    STR             reduce using rule 46 (print -> WRITELN LPAREN STRING RPAREN SEMICOLON .)
    BOOL            reduce using rule 46 (print -> WRITELN LPAREN STRING RPAREN SEMICOLON .)


state 93

    (47) print -> WRITELN LPAREN NUMBER RPAREN SEMICOLON .

    RBRACE          reduce using rule 47 (print -> WRITELN LPAREN NUMBER RPAREN SEMICOLON .)
    ID              reduce using rule 47 (print -> WRITELN LPAREN NUMBER RPAREN SEMICOLON .)
    WHILE           reduce using rule 47 (print -> WRITELN LPAREN NUMBER RPAREN SEMICOLON .)
    IF              reduce using rule 47 (print -> WRITELN LPAREN NUMBER RPAREN SEMICOLON .)
    WRITELN         reduce using rule 47 (print -> WRITELN LPAREN NUMBER RPAREN SEMICOLON .)
    READF           reduce using rule 47 (print -> WRITELN LPAREN NUMBER RPAREN SEMICOLON .)
    ENUM            reduce using rule 47 (print -> WRITELN LPAREN NUMBER RPAREN SEMICOLON .)
    INT             reduce using rule 47 (print -> WRITELN LPAREN NUMBER RPAREN SEMICOLON .)
    STR             reduce using rule 47 (print -> WRITELN LPAREN NUMBER RPAREN SEMICOLON .)
    BOOL            reduce using rule 47 (print -> WRITELN LPAREN NUMBER RPAREN SEMICOLON .)


state 94

    (48) print -> WRITELN LPAREN boolean RPAREN SEMICOLON .

    RBRACE          reduce using rule 48 (print -> WRITELN LPAREN boolean RPAREN SEMICOLON .)
    ID              reduce using rule 48 (print -> WRITELN LPAREN boolean RPAREN SEMICOLON .)
    WHILE           reduce using rule 48 (print -> WRITELN LPAREN boolean RPAREN SEMICOLON .)
    IF              reduce using rule 48 (print -> WRITELN LPAREN boolean RPAREN SEMICOLON .)
    WRITELN         reduce using rule 48 (print -> WRITELN LPAREN boolean RPAREN SEMICOLON .)
    READF           reduce using rule 48 (print -> WRITELN LPAREN boolean RPAREN SEMICOLON .)
    ENUM            reduce using rule 48 (print -> WRITELN LPAREN boolean RPAREN SEMICOLON .)
    INT             reduce using rule 48 (print -> WRITELN LPAREN boolean RPAREN SEMICOLON .)
    STR             reduce using rule 48 (print -> WRITELN LPAREN boolean RPAREN SEMICOLON .)
    BOOL            reduce using rule 48 (print -> WRITELN LPAREN boolean RPAREN SEMICOLON .)


state 95

    (45) print -> WRITELN LPAREN ID RPAREN SEMICOLON .

    RBRACE          reduce using rule 45 (print -> WRITELN LPAREN ID RPAREN SEMICOLON .)
    ID              reduce using rule 45 (print -> WRITELN LPAREN ID RPAREN SEMICOLON .)
    WHILE           reduce using rule 45 (print -> WRITELN LPAREN ID RPAREN SEMICOLON .)
    IF              reduce using rule 45 (print -> WRITELN LPAREN ID RPAREN SEMICOLON .)
    WRITELN         reduce using rule 45 (print -> WRITELN LPAREN ID RPAREN SEMICOLON .)
    READF           reduce using rule 45 (print -> WRITELN LPAREN ID RPAREN SEMICOLON .)
    ENUM            reduce using rule 45 (print -> WRITELN LPAREN ID RPAREN SEMICOLON .)
    INT             reduce using rule 45 (print -> WRITELN LPAREN ID RPAREN SEMICOLON .)
    STR             reduce using rule 45 (print -> WRITELN LPAREN ID RPAREN SEMICOLON .)
    BOOL            reduce using rule 45 (print -> WRITELN LPAREN ID RPAREN SEMICOLON .)


state 96

    (15) if -> IF LPAREN statement RPAREN LBRACE . expressions RBRACE
    (16) if -> IF LPAREN statement RPAREN LBRACE . expressions RBRACE ELSE LBRACE expressions RBRACE
    (5) expressions -> . expressions expression
    (6) expressions -> . expression
    (7) expression -> . constants
    (8) expression -> . while
    (9) expression -> . if
    (10) expression -> . ID assigned SEMICOLON
    (11) expression -> . print
    (12) expression -> . get
    (13) expression -> . empty
    (36) constants -> . constants constant
    (37) constants -> . constants variable
    (38) constants -> . constant
    (39) constants -> . variable
    (14) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (15) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (16) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
    (45) print -> . WRITELN LPAREN ID RPAREN SEMICOLON
    (46) print -> . WRITELN LPAREN STRING RPAREN SEMICOLON
    (47) print -> . WRITELN LPAREN NUMBER RPAREN SEMICOLON
    (48) print -> . WRITELN LPAREN boolean RPAREN SEMICOLON
    (49) get -> . READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (50) empty -> .
    (40) constant -> . ENUM ID ASSIGN NUMBER SEMICOLON
    (41) constant -> . ENUM ID ASSIGN STRING SEMICOLON
    (42) constant -> . ENUM ID ASSIGN boolean SEMICOLON
    (43) constant -> . ENUM ID SEMICOLON
    (44) constant -> . empty
    (24) variable -> . var_type ID assigned SEMICOLON
    (25) var_type -> . INT
    (26) var_type -> . STR
    (27) var_type -> . BOOL

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for READF resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    ID              shift and go to state 53
    WHILE           shift and go to state 46
    IF              shift and go to state 55
    WRITELN         shift and go to state 52
    READF           shift and go to state 56
    RBRACE          reduce using rule 50 (empty -> .)
    ENUM            shift and go to state 7
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 11

  ! ID              [ reduce using rule 50 (empty -> .) ]
  ! WHILE           [ reduce using rule 50 (empty -> .) ]
  ! IF              [ reduce using rule 50 (empty -> .) ]
  ! WRITELN         [ reduce using rule 50 (empty -> .) ]
  ! READF           [ reduce using rule 50 (empty -> .) ]
  ! ENUM            [ reduce using rule 50 (empty -> .) ]
  ! INT             [ reduce using rule 50 (empty -> .) ]
  ! STR             [ reduce using rule 50 (empty -> .) ]
  ! BOOL            [ reduce using rule 50 (empty -> .) ]

    constant                       shift and go to state 1
    var_type                       shift and go to state 3
    get                            shift and go to state 51
    variable                       shift and go to state 8
    while                          shift and go to state 57
    empty                          shift and go to state 50
    print                          shift and go to state 49
    expressions                    shift and go to state 99
    expression                     shift and go to state 58
    constants                      shift and go to state 54
    if                             shift and go to state 48

state 97

    (49) get -> READF LPAREN STRING COMMA AMPERSAND . ID RPAREN SEMICOLON

    ID              shift and go to state 100


state 98

    (14) while -> WHILE LPAREN statement RPAREN LBRACE expressions . RBRACE
    (5) expressions -> expressions . expression
    (7) expression -> . constants
    (8) expression -> . while
    (9) expression -> . if
    (10) expression -> . ID assigned SEMICOLON
    (11) expression -> . print
    (12) expression -> . get
    (13) expression -> . empty
    (36) constants -> . constants constant
    (37) constants -> . constants variable
    (38) constants -> . constant
    (39) constants -> . variable
    (14) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (15) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (16) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
    (45) print -> . WRITELN LPAREN ID RPAREN SEMICOLON
    (46) print -> . WRITELN LPAREN STRING RPAREN SEMICOLON
    (47) print -> . WRITELN LPAREN NUMBER RPAREN SEMICOLON
    (48) print -> . WRITELN LPAREN boolean RPAREN SEMICOLON
    (49) get -> . READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (50) empty -> .
    (40) constant -> . ENUM ID ASSIGN NUMBER SEMICOLON
    (41) constant -> . ENUM ID ASSIGN STRING SEMICOLON
    (42) constant -> . ENUM ID ASSIGN boolean SEMICOLON
    (43) constant -> . ENUM ID SEMICOLON
    (44) constant -> . empty
    (24) variable -> . var_type ID assigned SEMICOLON
    (25) var_type -> . INT
    (26) var_type -> . STR
    (27) var_type -> . BOOL

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for READF resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    RBRACE          shift and go to state 101
    ID              shift and go to state 53
    WHILE           shift and go to state 46
    IF              shift and go to state 55
    WRITELN         shift and go to state 52
    READF           shift and go to state 56
    ENUM            shift and go to state 7
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 11

  ! RBRACE          [ reduce using rule 50 (empty -> .) ]
  ! ID              [ reduce using rule 50 (empty -> .) ]
  ! WHILE           [ reduce using rule 50 (empty -> .) ]
  ! IF              [ reduce using rule 50 (empty -> .) ]
  ! WRITELN         [ reduce using rule 50 (empty -> .) ]
  ! READF           [ reduce using rule 50 (empty -> .) ]
  ! ENUM            [ reduce using rule 50 (empty -> .) ]
  ! INT             [ reduce using rule 50 (empty -> .) ]
  ! STR             [ reduce using rule 50 (empty -> .) ]
  ! BOOL            [ reduce using rule 50 (empty -> .) ]

    constant                       shift and go to state 1
    var_type                       shift and go to state 3
    get                            shift and go to state 51
    variable                       shift and go to state 8
    while                          shift and go to state 57
    empty                          shift and go to state 50
    print                          shift and go to state 49
    expression                     shift and go to state 61
    constants                      shift and go to state 54
    if                             shift and go to state 48

state 99

    (15) if -> IF LPAREN statement RPAREN LBRACE expressions . RBRACE
    (16) if -> IF LPAREN statement RPAREN LBRACE expressions . RBRACE ELSE LBRACE expressions RBRACE
    (5) expressions -> expressions . expression
    (7) expression -> . constants
    (8) expression -> . while
    (9) expression -> . if
    (10) expression -> . ID assigned SEMICOLON
    (11) expression -> . print
    (12) expression -> . get
    (13) expression -> . empty
    (36) constants -> . constants constant
    (37) constants -> . constants variable
    (38) constants -> . constant
    (39) constants -> . variable
    (14) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (15) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (16) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
    (45) print -> . WRITELN LPAREN ID RPAREN SEMICOLON
    (46) print -> . WRITELN LPAREN STRING RPAREN SEMICOLON
    (47) print -> . WRITELN LPAREN NUMBER RPAREN SEMICOLON
    (48) print -> . WRITELN LPAREN boolean RPAREN SEMICOLON
    (49) get -> . READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (50) empty -> .
    (40) constant -> . ENUM ID ASSIGN NUMBER SEMICOLON
    (41) constant -> . ENUM ID ASSIGN STRING SEMICOLON
    (42) constant -> . ENUM ID ASSIGN boolean SEMICOLON
    (43) constant -> . ENUM ID SEMICOLON
    (44) constant -> . empty
    (24) variable -> . var_type ID assigned SEMICOLON
    (25) var_type -> . INT
    (26) var_type -> . STR
    (27) var_type -> . BOOL

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for READF resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    RBRACE          shift and go to state 102
    ID              shift and go to state 53
    WHILE           shift and go to state 46
    IF              shift and go to state 55
    WRITELN         shift and go to state 52
    READF           shift and go to state 56
    ENUM            shift and go to state 7
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 11

  ! RBRACE          [ reduce using rule 50 (empty -> .) ]
  ! ID              [ reduce using rule 50 (empty -> .) ]
  ! WHILE           [ reduce using rule 50 (empty -> .) ]
  ! IF              [ reduce using rule 50 (empty -> .) ]
  ! WRITELN         [ reduce using rule 50 (empty -> .) ]
  ! READF           [ reduce using rule 50 (empty -> .) ]
  ! ENUM            [ reduce using rule 50 (empty -> .) ]
  ! INT             [ reduce using rule 50 (empty -> .) ]
  ! STR             [ reduce using rule 50 (empty -> .) ]
  ! BOOL            [ reduce using rule 50 (empty -> .) ]

    constant                       shift and go to state 1
    var_type                       shift and go to state 3
    get                            shift and go to state 51
    variable                       shift and go to state 8
    while                          shift and go to state 57
    empty                          shift and go to state 50
    print                          shift and go to state 49
    expression                     shift and go to state 61
    constants                      shift and go to state 54
    if                             shift and go to state 48

state 100

    (49) get -> READF LPAREN STRING COMMA AMPERSAND ID . RPAREN SEMICOLON

    RPAREN          shift and go to state 103


state 101

    (14) while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .

    RBRACE          reduce using rule 14 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    ID              reduce using rule 14 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    WHILE           reduce using rule 14 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    IF              reduce using rule 14 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    WRITELN         reduce using rule 14 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    READF           reduce using rule 14 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    ENUM            reduce using rule 14 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    INT             reduce using rule 14 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    STR             reduce using rule 14 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    BOOL            reduce using rule 14 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)


state 102

    (15) if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .
    (16) if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE . ELSE LBRACE expressions RBRACE

    RBRACE          reduce using rule 15 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    ID              reduce using rule 15 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    WHILE           reduce using rule 15 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    IF              reduce using rule 15 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    WRITELN         reduce using rule 15 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    READF           reduce using rule 15 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    ENUM            reduce using rule 15 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    INT             reduce using rule 15 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    STR             reduce using rule 15 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    BOOL            reduce using rule 15 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    ELSE            shift and go to state 104


state 103

    (49) get -> READF LPAREN STRING COMMA AMPERSAND ID RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 105


state 104

    (16) if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE . LBRACE expressions RBRACE

    LBRACE          shift and go to state 106


state 105

    (49) get -> READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .

    RBRACE          reduce using rule 49 (get -> READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    ID              reduce using rule 49 (get -> READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    WHILE           reduce using rule 49 (get -> READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    IF              reduce using rule 49 (get -> READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    WRITELN         reduce using rule 49 (get -> READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    READF           reduce using rule 49 (get -> READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    ENUM            reduce using rule 49 (get -> READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    INT             reduce using rule 49 (get -> READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    STR             reduce using rule 49 (get -> READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    BOOL            reduce using rule 49 (get -> READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)


state 106

    (16) if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE . expressions RBRACE
    (5) expressions -> . expressions expression
    (6) expressions -> . expression
    (7) expression -> . constants
    (8) expression -> . while
    (9) expression -> . if
    (10) expression -> . ID assigned SEMICOLON
    (11) expression -> . print
    (12) expression -> . get
    (13) expression -> . empty
    (36) constants -> . constants constant
    (37) constants -> . constants variable
    (38) constants -> . constant
    (39) constants -> . variable
    (14) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (15) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (16) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
    (45) print -> . WRITELN LPAREN ID RPAREN SEMICOLON
    (46) print -> . WRITELN LPAREN STRING RPAREN SEMICOLON
    (47) print -> . WRITELN LPAREN NUMBER RPAREN SEMICOLON
    (48) print -> . WRITELN LPAREN boolean RPAREN SEMICOLON
    (49) get -> . READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (50) empty -> .
    (40) constant -> . ENUM ID ASSIGN NUMBER SEMICOLON
    (41) constant -> . ENUM ID ASSIGN STRING SEMICOLON
    (42) constant -> . ENUM ID ASSIGN boolean SEMICOLON
    (43) constant -> . ENUM ID SEMICOLON
    (44) constant -> . empty
    (24) variable -> . var_type ID assigned SEMICOLON
    (25) var_type -> . INT
    (26) var_type -> . STR
    (27) var_type -> . BOOL

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for READF resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    ID              shift and go to state 53
    WHILE           shift and go to state 46
    IF              shift and go to state 55
    WRITELN         shift and go to state 52
    READF           shift and go to state 56
    RBRACE          reduce using rule 50 (empty -> .)
    ENUM            shift and go to state 7
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 11

  ! ID              [ reduce using rule 50 (empty -> .) ]
  ! WHILE           [ reduce using rule 50 (empty -> .) ]
  ! IF              [ reduce using rule 50 (empty -> .) ]
  ! WRITELN         [ reduce using rule 50 (empty -> .) ]
  ! READF           [ reduce using rule 50 (empty -> .) ]
  ! ENUM            [ reduce using rule 50 (empty -> .) ]
  ! INT             [ reduce using rule 50 (empty -> .) ]
  ! STR             [ reduce using rule 50 (empty -> .) ]
  ! BOOL            [ reduce using rule 50 (empty -> .) ]

    constant                       shift and go to state 1
    var_type                       shift and go to state 3
    get                            shift and go to state 51
    variable                       shift and go to state 8
    while                          shift and go to state 57
    empty                          shift and go to state 50
    print                          shift and go to state 49
    expressions                    shift and go to state 107
    expression                     shift and go to state 58
    constants                      shift and go to state 54
    if                             shift and go to state 48

state 107

    (16) if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions . RBRACE
    (5) expressions -> expressions . expression
    (7) expression -> . constants
    (8) expression -> . while
    (9) expression -> . if
    (10) expression -> . ID assigned SEMICOLON
    (11) expression -> . print
    (12) expression -> . get
    (13) expression -> . empty
    (36) constants -> . constants constant
    (37) constants -> . constants variable
    (38) constants -> . constant
    (39) constants -> . variable
    (14) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (15) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (16) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
    (45) print -> . WRITELN LPAREN ID RPAREN SEMICOLON
    (46) print -> . WRITELN LPAREN STRING RPAREN SEMICOLON
    (47) print -> . WRITELN LPAREN NUMBER RPAREN SEMICOLON
    (48) print -> . WRITELN LPAREN boolean RPAREN SEMICOLON
    (49) get -> . READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (50) empty -> .
    (40) constant -> . ENUM ID ASSIGN NUMBER SEMICOLON
    (41) constant -> . ENUM ID ASSIGN STRING SEMICOLON
    (42) constant -> . ENUM ID ASSIGN boolean SEMICOLON
    (43) constant -> . ENUM ID SEMICOLON
    (44) constant -> . empty
    (24) variable -> . var_type ID assigned SEMICOLON
    (25) var_type -> . INT
    (26) var_type -> . STR
    (27) var_type -> . BOOL

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for READF resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    RBRACE          shift and go to state 108
    ID              shift and go to state 53
    WHILE           shift and go to state 46
    IF              shift and go to state 55
    WRITELN         shift and go to state 52
    READF           shift and go to state 56
    ENUM            shift and go to state 7
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 11

  ! RBRACE          [ reduce using rule 50 (empty -> .) ]
  ! ID              [ reduce using rule 50 (empty -> .) ]
  ! WHILE           [ reduce using rule 50 (empty -> .) ]
  ! IF              [ reduce using rule 50 (empty -> .) ]
  ! WRITELN         [ reduce using rule 50 (empty -> .) ]
  ! READF           [ reduce using rule 50 (empty -> .) ]
  ! ENUM            [ reduce using rule 50 (empty -> .) ]
  ! INT             [ reduce using rule 50 (empty -> .) ]
  ! STR             [ reduce using rule 50 (empty -> .) ]
  ! BOOL            [ reduce using rule 50 (empty -> .) ]

    constant                       shift and go to state 1
    var_type                       shift and go to state 3
    get                            shift and go to state 51
    variable                       shift and go to state 8
    while                          shift and go to state 57
    empty                          shift and go to state 50
    print                          shift and go to state 49
    expression                     shift and go to state 61
    constants                      shift and go to state 54
    if                             shift and go to state 48

state 108

    (16) if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .

    RBRACE          reduce using rule 16 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)
    ID              reduce using rule 16 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)
    WHILE           reduce using rule 16 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)
    IF              reduce using rule 16 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)
    WRITELN         reduce using rule 16 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)
    READF           reduce using rule 16 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)
    ENUM            reduce using rule 16 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)
    INT             reduce using rule 16 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)
    STR             reduce using rule 16 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)
    BOOL            reduce using rule 16 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ENUM in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for STR in state 0 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 0 resolved as shift
WARNING: shift/reduce conflict for VOID in state 9 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 9 resolved as shift
WARNING: shift/reduce conflict for INT in state 9 resolved as shift
WARNING: shift/reduce conflict for STR in state 9 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 9 resolved as shift
WARNING: shift/reduce conflict for ID in state 44 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 44 resolved as shift
WARNING: shift/reduce conflict for IF in state 44 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 44 resolved as shift
WARNING: shift/reduce conflict for READF in state 44 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 44 resolved as shift
WARNING: shift/reduce conflict for INT in state 44 resolved as shift
WARNING: shift/reduce conflict for STR in state 44 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 44 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 47 resolved as shift
WARNING: shift/reduce conflict for ID in state 47 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 47 resolved as shift
WARNING: shift/reduce conflict for IF in state 47 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 47 resolved as shift
WARNING: shift/reduce conflict for READF in state 47 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 47 resolved as shift
WARNING: shift/reduce conflict for INT in state 47 resolved as shift
WARNING: shift/reduce conflict for STR in state 47 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 47 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 54 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 54 resolved as shift
WARNING: shift/reduce conflict for INT in state 54 resolved as shift
WARNING: shift/reduce conflict for STR in state 54 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 54 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 60 resolved as shift
WARNING: shift/reduce conflict for INT in state 60 resolved as shift
WARNING: shift/reduce conflict for STR in state 60 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 60 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 68 resolved as shift
WARNING: shift/reduce conflict for INT in state 68 resolved as shift
WARNING: shift/reduce conflict for STR in state 68 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 68 resolved as shift
WARNING: shift/reduce conflict for ID in state 90 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 90 resolved as shift
WARNING: shift/reduce conflict for IF in state 90 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 90 resolved as shift
WARNING: shift/reduce conflict for READF in state 90 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 90 resolved as shift
WARNING: shift/reduce conflict for INT in state 90 resolved as shift
WARNING: shift/reduce conflict for STR in state 90 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 90 resolved as shift
WARNING: shift/reduce conflict for ID in state 96 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 96 resolved as shift
WARNING: shift/reduce conflict for IF in state 96 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 96 resolved as shift
WARNING: shift/reduce conflict for READF in state 96 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 96 resolved as shift
WARNING: shift/reduce conflict for INT in state 96 resolved as shift
WARNING: shift/reduce conflict for STR in state 96 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 96 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 98 resolved as shift
WARNING: shift/reduce conflict for ID in state 98 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 98 resolved as shift
WARNING: shift/reduce conflict for IF in state 98 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 98 resolved as shift
WARNING: shift/reduce conflict for READF in state 98 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 98 resolved as shift
WARNING: shift/reduce conflict for INT in state 98 resolved as shift
WARNING: shift/reduce conflict for STR in state 98 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 98 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 99 resolved as shift
WARNING: shift/reduce conflict for ID in state 99 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 99 resolved as shift
WARNING: shift/reduce conflict for IF in state 99 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 99 resolved as shift
WARNING: shift/reduce conflict for READF in state 99 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 99 resolved as shift
WARNING: shift/reduce conflict for INT in state 99 resolved as shift
WARNING: shift/reduce conflict for STR in state 99 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 99 resolved as shift
WARNING: shift/reduce conflict for ID in state 106 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 106 resolved as shift
WARNING: shift/reduce conflict for IF in state 106 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 106 resolved as shift
WARNING: shift/reduce conflict for READF in state 106 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 106 resolved as shift
WARNING: shift/reduce conflict for INT in state 106 resolved as shift
WARNING: shift/reduce conflict for STR in state 106 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 106 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 107 resolved as shift
WARNING: shift/reduce conflict for ID in state 107 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 107 resolved as shift
WARNING: shift/reduce conflict for IF in state 107 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 107 resolved as shift
WARNING: shift/reduce conflict for READF in state 107 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 107 resolved as shift
WARNING: shift/reduce conflict for INT in state 107 resolved as shift
WARNING: shift/reduce conflict for STR in state 107 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 107 resolved as shift
WARNING: reduce/reduce conflict in state 50 resolved using rule (expression -> empty)
WARNING: rejected rule (constant -> empty) in state 50
WARNING: reduce/reduce conflict in state 54 resolved using rule (expression -> constants)
WARNING: rejected rule (empty -> <empty>) in state 54
WARNING: reduce/reduce conflict in state 68 resolved using rule (function -> constants VOID MAIN LPAREN params RPAREN LBRACE expressions RBRACE constants)
WARNING: rejected rule (empty -> <empty>) in state 68
