Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> function
Rule 2     start -> constants function
Rule 3     function -> VOID MAIN LPAREN params RPAREN LBRACE expressions RBRACE
Rule 4     function -> VOID MAIN LPAREN params RPAREN LBRACE RBRACE
Rule 5     params -> STR LSQUARE RSQUARE ID
Rule 6     params -> empty
Rule 7     expressions -> expressions expression
Rule 8     expressions -> expression
Rule 9     expression -> constants
Rule 10    expression -> while
Rule 11    expression -> if
Rule 12    expression -> assigned
Rule 13    expression -> print
Rule 14    expression -> get
Rule 15    assigned -> ID ASSIGN type SEMICOLON
Rule 16    while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
Rule 17    if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE
Rule 18    if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
Rule 19    statement -> type logic_op type
Rule 20    logic_op -> EQ
Rule 21    logic_op -> NOT_EQ
Rule 22    logic_op -> GREATER
Rule 23    logic_op -> GREATER_EQ
Rule 24    logic_op -> LESS
Rule 25    logic_op -> LESS_EQ
Rule 26    variable -> var_type inits SEMICOLON
Rule 27    inits -> inits COMMA init
Rule 28    inits -> init
Rule 29    init -> ID ASSIGN type
Rule 30    init -> ID
Rule 31    var_type -> INT
Rule 32    var_type -> STR
Rule 33    var_type -> BOOL
Rule 34    type -> NUMBER
Rule 35    type -> STRING
Rule 36    type -> boolean
Rule 37    type -> ID
Rule 38    boolean -> TRUE
Rule 39    boolean -> FALSE
Rule 40    constants -> constants constant
Rule 41    constants -> constants variable
Rule 42    constants -> constant
Rule 43    constants -> variable
Rule 44    constant -> ENUM inits SEMICOLON
Rule 45    print -> WRITELN LPAREN type RPAREN SEMICOLON
Rule 46    get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON
Rule 47    gets -> GET_INT
Rule 48    gets -> GET_STRING
Rule 49    gets -> GET_BOOL
Rule 50    empty -> <empty>

Terminals, with rules where they appear

AMPERSAND            : 46
ASSIGN               : 15 29
BOOL                 : 33
COMMA                : 27 46
ELSE                 : 18
ENUM                 : 44
EQ                   : 20
FALSE                : 39
GET_BOOL             : 49
GET_INT              : 47
GET_STRING           : 48
GREATER              : 22
GREATER_EQ           : 23
ID                   : 5 15 29 30 37 46
IF                   : 17 18
INT                  : 31
LBRACE               : 3 4 16 17 18 18
LESS                 : 24
LESS_EQ              : 25
LPAREN               : 3 4 16 17 18 45 46
LSQUARE              : 5
MAIN                 : 3 4
NOT_EQ               : 21
NUMBER               : 34
RBRACE               : 3 4 16 17 18 18
READF                : 46
RPAREN               : 3 4 16 17 18 45 46
RSQUARE              : 5
SEMICOLON            : 15 26 44 45 46
STR                  : 5 32
STRING               : 35
TRUE                 : 38
VOID                 : 3 4
WHILE                : 16
WRITELN              : 45
error                : 

Nonterminals, with rules where they appear

assigned             : 12
boolean              : 36
constant             : 40 42
constants            : 2 9 40 41
empty                : 6
expression           : 7 8
expressions          : 3 7 16 17 18 18
function             : 1 2
get                  : 14
gets                 : 46
if                   : 11
init                 : 27 28
inits                : 26 27 44
logic_op             : 19
params               : 3 4
print                : 13
start                : 0
statement            : 16 17 18
type                 : 15 19 19 29 45
var_type             : 26
variable             : 41 43
while                : 10

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . function
    (2) start -> . constants function
    (3) function -> . VOID MAIN LPAREN params RPAREN LBRACE expressions RBRACE
    (4) function -> . VOID MAIN LPAREN params RPAREN LBRACE RBRACE
    (40) constants -> . constants constant
    (41) constants -> . constants variable
    (42) constants -> . constant
    (43) constants -> . variable
    (44) constant -> . ENUM inits SEMICOLON
    (26) variable -> . var_type inits SEMICOLON
    (31) var_type -> . INT
    (32) var_type -> . STR
    (33) var_type -> . BOOL

    VOID            shift and go to state 3
    ENUM            shift and go to state 4
    INT             shift and go to state 2
    STR             shift and go to state 10
    BOOL            shift and go to state 7

    function                       shift and go to state 1
    constant                       shift and go to state 9
    var_type                       shift and go to state 5
    start                          shift and go to state 6
    variable                       shift and go to state 8
    constants                      shift and go to state 11

state 1

    (1) start -> function .

    $end            reduce using rule 1 (start -> function .)


state 2

    (31) var_type -> INT .

    ID              reduce using rule 31 (var_type -> INT .)


state 3

    (3) function -> VOID . MAIN LPAREN params RPAREN LBRACE expressions RBRACE
    (4) function -> VOID . MAIN LPAREN params RPAREN LBRACE RBRACE

    MAIN            shift and go to state 12


state 4

    (44) constant -> ENUM . inits SEMICOLON
    (27) inits -> . inits COMMA init
    (28) inits -> . init
    (29) init -> . ID ASSIGN type
    (30) init -> . ID

    ID              shift and go to state 15

    init                           shift and go to state 13
    inits                          shift and go to state 14

state 5

    (26) variable -> var_type . inits SEMICOLON
    (27) inits -> . inits COMMA init
    (28) inits -> . init
    (29) init -> . ID ASSIGN type
    (30) init -> . ID

    ID              shift and go to state 15

    init                           shift and go to state 13
    inits                          shift and go to state 16

state 6

    (0) S' -> start .



state 7

    (33) var_type -> BOOL .

    ID              reduce using rule 33 (var_type -> BOOL .)


state 8

    (43) constants -> variable .

    ENUM            reduce using rule 43 (constants -> variable .)
    INT             reduce using rule 43 (constants -> variable .)
    STR             reduce using rule 43 (constants -> variable .)
    BOOL            reduce using rule 43 (constants -> variable .)
    RBRACE          reduce using rule 43 (constants -> variable .)
    WHILE           reduce using rule 43 (constants -> variable .)
    IF              reduce using rule 43 (constants -> variable .)
    ID              reduce using rule 43 (constants -> variable .)
    WRITELN         reduce using rule 43 (constants -> variable .)
    READF           reduce using rule 43 (constants -> variable .)
    VOID            reduce using rule 43 (constants -> variable .)


state 9

    (42) constants -> constant .

    ENUM            reduce using rule 42 (constants -> constant .)
    INT             reduce using rule 42 (constants -> constant .)
    STR             reduce using rule 42 (constants -> constant .)
    BOOL            reduce using rule 42 (constants -> constant .)
    RBRACE          reduce using rule 42 (constants -> constant .)
    WHILE           reduce using rule 42 (constants -> constant .)
    IF              reduce using rule 42 (constants -> constant .)
    ID              reduce using rule 42 (constants -> constant .)
    WRITELN         reduce using rule 42 (constants -> constant .)
    READF           reduce using rule 42 (constants -> constant .)
    VOID            reduce using rule 42 (constants -> constant .)


state 10

    (32) var_type -> STR .

    ID              reduce using rule 32 (var_type -> STR .)


state 11

    (2) start -> constants . function
    (40) constants -> constants . constant
    (41) constants -> constants . variable
    (3) function -> . VOID MAIN LPAREN params RPAREN LBRACE expressions RBRACE
    (4) function -> . VOID MAIN LPAREN params RPAREN LBRACE RBRACE
    (44) constant -> . ENUM inits SEMICOLON
    (26) variable -> . var_type inits SEMICOLON
    (31) var_type -> . INT
    (32) var_type -> . STR
    (33) var_type -> . BOOL

    VOID            shift and go to state 3
    ENUM            shift and go to state 4
    INT             shift and go to state 2
    STR             shift and go to state 10
    BOOL            shift and go to state 7

    function                       shift and go to state 17
    constant                       shift and go to state 18
    var_type                       shift and go to state 5
    variable                       shift and go to state 19

state 12

    (3) function -> VOID MAIN . LPAREN params RPAREN LBRACE expressions RBRACE
    (4) function -> VOID MAIN . LPAREN params RPAREN LBRACE RBRACE

    LPAREN          shift and go to state 20


state 13

    (28) inits -> init .

    SEMICOLON       reduce using rule 28 (inits -> init .)
    COMMA           reduce using rule 28 (inits -> init .)


state 14

    (44) constant -> ENUM inits . SEMICOLON
    (27) inits -> inits . COMMA init

    SEMICOLON       shift and go to state 22
    COMMA           shift and go to state 21


state 15

    (29) init -> ID . ASSIGN type
    (30) init -> ID .

    ASSIGN          shift and go to state 23
    SEMICOLON       reduce using rule 30 (init -> ID .)
    COMMA           reduce using rule 30 (init -> ID .)


state 16

    (26) variable -> var_type inits . SEMICOLON
    (27) inits -> inits . COMMA init

    SEMICOLON       shift and go to state 24
    COMMA           shift and go to state 21


state 17

    (2) start -> constants function .

    $end            reduce using rule 2 (start -> constants function .)


state 18

    (40) constants -> constants constant .

    ENUM            reduce using rule 40 (constants -> constants constant .)
    INT             reduce using rule 40 (constants -> constants constant .)
    STR             reduce using rule 40 (constants -> constants constant .)
    BOOL            reduce using rule 40 (constants -> constants constant .)
    RBRACE          reduce using rule 40 (constants -> constants constant .)
    WHILE           reduce using rule 40 (constants -> constants constant .)
    IF              reduce using rule 40 (constants -> constants constant .)
    ID              reduce using rule 40 (constants -> constants constant .)
    WRITELN         reduce using rule 40 (constants -> constants constant .)
    READF           reduce using rule 40 (constants -> constants constant .)
    VOID            reduce using rule 40 (constants -> constants constant .)


state 19

    (41) constants -> constants variable .

    ENUM            reduce using rule 41 (constants -> constants variable .)
    INT             reduce using rule 41 (constants -> constants variable .)
    STR             reduce using rule 41 (constants -> constants variable .)
    BOOL            reduce using rule 41 (constants -> constants variable .)
    RBRACE          reduce using rule 41 (constants -> constants variable .)
    WHILE           reduce using rule 41 (constants -> constants variable .)
    IF              reduce using rule 41 (constants -> constants variable .)
    ID              reduce using rule 41 (constants -> constants variable .)
    WRITELN         reduce using rule 41 (constants -> constants variable .)
    READF           reduce using rule 41 (constants -> constants variable .)
    VOID            reduce using rule 41 (constants -> constants variable .)


state 20

    (3) function -> VOID MAIN LPAREN . params RPAREN LBRACE expressions RBRACE
    (4) function -> VOID MAIN LPAREN . params RPAREN LBRACE RBRACE
    (5) params -> . STR LSQUARE RSQUARE ID
    (6) params -> . empty
    (50) empty -> .

    STR             shift and go to state 25
    RPAREN          reduce using rule 50 (empty -> .)

    params                         shift and go to state 26
    empty                          shift and go to state 27

state 21

    (27) inits -> inits COMMA . init
    (29) init -> . ID ASSIGN type
    (30) init -> . ID

    ID              shift and go to state 15

    init                           shift and go to state 28

state 22

    (44) constant -> ENUM inits SEMICOLON .

    VOID            reduce using rule 44 (constant -> ENUM inits SEMICOLON .)
    ENUM            reduce using rule 44 (constant -> ENUM inits SEMICOLON .)
    INT             reduce using rule 44 (constant -> ENUM inits SEMICOLON .)
    STR             reduce using rule 44 (constant -> ENUM inits SEMICOLON .)
    BOOL            reduce using rule 44 (constant -> ENUM inits SEMICOLON .)
    RBRACE          reduce using rule 44 (constant -> ENUM inits SEMICOLON .)
    WHILE           reduce using rule 44 (constant -> ENUM inits SEMICOLON .)
    IF              reduce using rule 44 (constant -> ENUM inits SEMICOLON .)
    ID              reduce using rule 44 (constant -> ENUM inits SEMICOLON .)
    WRITELN         reduce using rule 44 (constant -> ENUM inits SEMICOLON .)
    READF           reduce using rule 44 (constant -> ENUM inits SEMICOLON .)


state 23

    (29) init -> ID ASSIGN . type
    (34) type -> . NUMBER
    (35) type -> . STRING
    (36) type -> . boolean
    (37) type -> . ID
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NUMBER          shift and go to state 32
    STRING          shift and go to state 30
    ID              shift and go to state 35
    TRUE            shift and go to state 31
    FALSE           shift and go to state 29

    boolean                        shift and go to state 33
    type                           shift and go to state 34

state 24

    (26) variable -> var_type inits SEMICOLON .

    ENUM            reduce using rule 26 (variable -> var_type inits SEMICOLON .)
    INT             reduce using rule 26 (variable -> var_type inits SEMICOLON .)
    STR             reduce using rule 26 (variable -> var_type inits SEMICOLON .)
    BOOL            reduce using rule 26 (variable -> var_type inits SEMICOLON .)
    RBRACE          reduce using rule 26 (variable -> var_type inits SEMICOLON .)
    WHILE           reduce using rule 26 (variable -> var_type inits SEMICOLON .)
    IF              reduce using rule 26 (variable -> var_type inits SEMICOLON .)
    ID              reduce using rule 26 (variable -> var_type inits SEMICOLON .)
    WRITELN         reduce using rule 26 (variable -> var_type inits SEMICOLON .)
    READF           reduce using rule 26 (variable -> var_type inits SEMICOLON .)
    VOID            reduce using rule 26 (variable -> var_type inits SEMICOLON .)


state 25

    (5) params -> STR . LSQUARE RSQUARE ID

    LSQUARE         shift and go to state 36


state 26

    (3) function -> VOID MAIN LPAREN params . RPAREN LBRACE expressions RBRACE
    (4) function -> VOID MAIN LPAREN params . RPAREN LBRACE RBRACE

    RPAREN          shift and go to state 37


state 27

    (6) params -> empty .

    RPAREN          reduce using rule 6 (params -> empty .)


state 28

    (27) inits -> inits COMMA init .

    SEMICOLON       reduce using rule 27 (inits -> inits COMMA init .)
    COMMA           reduce using rule 27 (inits -> inits COMMA init .)


state 29

    (39) boolean -> FALSE .

    SEMICOLON       reduce using rule 39 (boolean -> FALSE .)
    COMMA           reduce using rule 39 (boolean -> FALSE .)
    EQ              reduce using rule 39 (boolean -> FALSE .)
    NOT_EQ          reduce using rule 39 (boolean -> FALSE .)
    GREATER         reduce using rule 39 (boolean -> FALSE .)
    GREATER_EQ      reduce using rule 39 (boolean -> FALSE .)
    LESS            reduce using rule 39 (boolean -> FALSE .)
    LESS_EQ         reduce using rule 39 (boolean -> FALSE .)
    RPAREN          reduce using rule 39 (boolean -> FALSE .)


state 30

    (35) type -> STRING .

    EQ              reduce using rule 35 (type -> STRING .)
    NOT_EQ          reduce using rule 35 (type -> STRING .)
    GREATER         reduce using rule 35 (type -> STRING .)
    GREATER_EQ      reduce using rule 35 (type -> STRING .)
    LESS            reduce using rule 35 (type -> STRING .)
    LESS_EQ         reduce using rule 35 (type -> STRING .)
    RPAREN          reduce using rule 35 (type -> STRING .)
    SEMICOLON       reduce using rule 35 (type -> STRING .)
    COMMA           reduce using rule 35 (type -> STRING .)


state 31

    (38) boolean -> TRUE .

    SEMICOLON       reduce using rule 38 (boolean -> TRUE .)
    COMMA           reduce using rule 38 (boolean -> TRUE .)
    EQ              reduce using rule 38 (boolean -> TRUE .)
    NOT_EQ          reduce using rule 38 (boolean -> TRUE .)
    GREATER         reduce using rule 38 (boolean -> TRUE .)
    GREATER_EQ      reduce using rule 38 (boolean -> TRUE .)
    LESS            reduce using rule 38 (boolean -> TRUE .)
    LESS_EQ         reduce using rule 38 (boolean -> TRUE .)
    RPAREN          reduce using rule 38 (boolean -> TRUE .)


state 32

    (34) type -> NUMBER .

    EQ              reduce using rule 34 (type -> NUMBER .)
    NOT_EQ          reduce using rule 34 (type -> NUMBER .)
    GREATER         reduce using rule 34 (type -> NUMBER .)
    GREATER_EQ      reduce using rule 34 (type -> NUMBER .)
    LESS            reduce using rule 34 (type -> NUMBER .)
    LESS_EQ         reduce using rule 34 (type -> NUMBER .)
    RPAREN          reduce using rule 34 (type -> NUMBER .)
    SEMICOLON       reduce using rule 34 (type -> NUMBER .)
    COMMA           reduce using rule 34 (type -> NUMBER .)


state 33

    (36) type -> boolean .

    EQ              reduce using rule 36 (type -> boolean .)
    NOT_EQ          reduce using rule 36 (type -> boolean .)
    GREATER         reduce using rule 36 (type -> boolean .)
    GREATER_EQ      reduce using rule 36 (type -> boolean .)
    LESS            reduce using rule 36 (type -> boolean .)
    LESS_EQ         reduce using rule 36 (type -> boolean .)
    RPAREN          reduce using rule 36 (type -> boolean .)
    SEMICOLON       reduce using rule 36 (type -> boolean .)
    COMMA           reduce using rule 36 (type -> boolean .)


state 34

    (29) init -> ID ASSIGN type .

    SEMICOLON       reduce using rule 29 (init -> ID ASSIGN type .)
    COMMA           reduce using rule 29 (init -> ID ASSIGN type .)


state 35

    (37) type -> ID .

    EQ              reduce using rule 37 (type -> ID .)
    NOT_EQ          reduce using rule 37 (type -> ID .)
    GREATER         reduce using rule 37 (type -> ID .)
    GREATER_EQ      reduce using rule 37 (type -> ID .)
    LESS            reduce using rule 37 (type -> ID .)
    LESS_EQ         reduce using rule 37 (type -> ID .)
    RPAREN          reduce using rule 37 (type -> ID .)
    SEMICOLON       reduce using rule 37 (type -> ID .)
    COMMA           reduce using rule 37 (type -> ID .)


state 36

    (5) params -> STR LSQUARE . RSQUARE ID

    RSQUARE         shift and go to state 38


state 37

    (3) function -> VOID MAIN LPAREN params RPAREN . LBRACE expressions RBRACE
    (4) function -> VOID MAIN LPAREN params RPAREN . LBRACE RBRACE

    LBRACE          shift and go to state 39


state 38

    (5) params -> STR LSQUARE RSQUARE . ID

    ID              shift and go to state 40


state 39

    (3) function -> VOID MAIN LPAREN params RPAREN LBRACE . expressions RBRACE
    (4) function -> VOID MAIN LPAREN params RPAREN LBRACE . RBRACE
    (7) expressions -> . expressions expression
    (8) expressions -> . expression
    (9) expression -> . constants
    (10) expression -> . while
    (11) expression -> . if
    (12) expression -> . assigned
    (13) expression -> . print
    (14) expression -> . get
    (40) constants -> . constants constant
    (41) constants -> . constants variable
    (42) constants -> . constant
    (43) constants -> . variable
    (16) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (17) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (18) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
    (15) assigned -> . ID ASSIGN type SEMICOLON
    (45) print -> . WRITELN LPAREN type RPAREN SEMICOLON
    (46) get -> . READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON
    (44) constant -> . ENUM inits SEMICOLON
    (26) variable -> . var_type inits SEMICOLON
    (31) var_type -> . INT
    (32) var_type -> . STR
    (33) var_type -> . BOOL

    RBRACE          shift and go to state 46
    WHILE           shift and go to state 42
    IF              shift and go to state 51
    ID              shift and go to state 49
    WRITELN         shift and go to state 48
    READF           shift and go to state 52
    ENUM            shift and go to state 4
    INT             shift and go to state 2
    STR             shift and go to state 10
    BOOL            shift and go to state 7

    constant                       shift and go to state 9
    var_type                       shift and go to state 5
    get                            shift and go to state 47
    assigned                       shift and go to state 41
    variable                       shift and go to state 8
    while                          shift and go to state 53
    print                          shift and go to state 45
    expressions                    shift and go to state 43
    expression                     shift and go to state 54
    constants                      shift and go to state 50
    if                             shift and go to state 44

state 40

    (5) params -> STR LSQUARE RSQUARE ID .

    RPAREN          reduce using rule 5 (params -> STR LSQUARE RSQUARE ID .)


state 41

    (12) expression -> assigned .

    RBRACE          reduce using rule 12 (expression -> assigned .)
    WHILE           reduce using rule 12 (expression -> assigned .)
    IF              reduce using rule 12 (expression -> assigned .)
    ID              reduce using rule 12 (expression -> assigned .)
    WRITELN         reduce using rule 12 (expression -> assigned .)
    READF           reduce using rule 12 (expression -> assigned .)
    ENUM            reduce using rule 12 (expression -> assigned .)
    INT             reduce using rule 12 (expression -> assigned .)
    STR             reduce using rule 12 (expression -> assigned .)
    BOOL            reduce using rule 12 (expression -> assigned .)


state 42

    (16) while -> WHILE . LPAREN statement RPAREN LBRACE expressions RBRACE

    LPAREN          shift and go to state 55


state 43

    (3) function -> VOID MAIN LPAREN params RPAREN LBRACE expressions . RBRACE
    (7) expressions -> expressions . expression
    (9) expression -> . constants
    (10) expression -> . while
    (11) expression -> . if
    (12) expression -> . assigned
    (13) expression -> . print
    (14) expression -> . get
    (40) constants -> . constants constant
    (41) constants -> . constants variable
    (42) constants -> . constant
    (43) constants -> . variable
    (16) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (17) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (18) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
    (15) assigned -> . ID ASSIGN type SEMICOLON
    (45) print -> . WRITELN LPAREN type RPAREN SEMICOLON
    (46) get -> . READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON
    (44) constant -> . ENUM inits SEMICOLON
    (26) variable -> . var_type inits SEMICOLON
    (31) var_type -> . INT
    (32) var_type -> . STR
    (33) var_type -> . BOOL

    RBRACE          shift and go to state 56
    WHILE           shift and go to state 42
    IF              shift and go to state 51
    ID              shift and go to state 49
    WRITELN         shift and go to state 48
    READF           shift and go to state 52
    ENUM            shift and go to state 4
    INT             shift and go to state 2
    STR             shift and go to state 10
    BOOL            shift and go to state 7

    constant                       shift and go to state 9
    var_type                       shift and go to state 5
    get                            shift and go to state 47
    assigned                       shift and go to state 41
    variable                       shift and go to state 8
    while                          shift and go to state 53
    print                          shift and go to state 45
    expression                     shift and go to state 57
    constants                      shift and go to state 50
    if                             shift and go to state 44

state 44

    (11) expression -> if .

    RBRACE          reduce using rule 11 (expression -> if .)
    WHILE           reduce using rule 11 (expression -> if .)
    IF              reduce using rule 11 (expression -> if .)
    ID              reduce using rule 11 (expression -> if .)
    WRITELN         reduce using rule 11 (expression -> if .)
    READF           reduce using rule 11 (expression -> if .)
    ENUM            reduce using rule 11 (expression -> if .)
    INT             reduce using rule 11 (expression -> if .)
    STR             reduce using rule 11 (expression -> if .)
    BOOL            reduce using rule 11 (expression -> if .)


state 45

    (13) expression -> print .

    RBRACE          reduce using rule 13 (expression -> print .)
    WHILE           reduce using rule 13 (expression -> print .)
    IF              reduce using rule 13 (expression -> print .)
    ID              reduce using rule 13 (expression -> print .)
    WRITELN         reduce using rule 13 (expression -> print .)
    READF           reduce using rule 13 (expression -> print .)
    ENUM            reduce using rule 13 (expression -> print .)
    INT             reduce using rule 13 (expression -> print .)
    STR             reduce using rule 13 (expression -> print .)
    BOOL            reduce using rule 13 (expression -> print .)


state 46

    (4) function -> VOID MAIN LPAREN params RPAREN LBRACE RBRACE .

    $end            reduce using rule 4 (function -> VOID MAIN LPAREN params RPAREN LBRACE RBRACE .)


state 47

    (14) expression -> get .

    RBRACE          reduce using rule 14 (expression -> get .)
    WHILE           reduce using rule 14 (expression -> get .)
    IF              reduce using rule 14 (expression -> get .)
    ID              reduce using rule 14 (expression -> get .)
    WRITELN         reduce using rule 14 (expression -> get .)
    READF           reduce using rule 14 (expression -> get .)
    ENUM            reduce using rule 14 (expression -> get .)
    INT             reduce using rule 14 (expression -> get .)
    STR             reduce using rule 14 (expression -> get .)
    BOOL            reduce using rule 14 (expression -> get .)


state 48

    (45) print -> WRITELN . LPAREN type RPAREN SEMICOLON

    LPAREN          shift and go to state 58


state 49

    (15) assigned -> ID . ASSIGN type SEMICOLON

    ASSIGN          shift and go to state 59


state 50

    (9) expression -> constants .
    (40) constants -> constants . constant
    (41) constants -> constants . variable
    (44) constant -> . ENUM inits SEMICOLON
    (26) variable -> . var_type inits SEMICOLON
    (31) var_type -> . INT
    (32) var_type -> . STR
    (33) var_type -> . BOOL

  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    RBRACE          reduce using rule 9 (expression -> constants .)
    WHILE           reduce using rule 9 (expression -> constants .)
    IF              reduce using rule 9 (expression -> constants .)
    ID              reduce using rule 9 (expression -> constants .)
    WRITELN         reduce using rule 9 (expression -> constants .)
    READF           reduce using rule 9 (expression -> constants .)
    ENUM            shift and go to state 4
    INT             shift and go to state 2
    STR             shift and go to state 10
    BOOL            shift and go to state 7

  ! ENUM            [ reduce using rule 9 (expression -> constants .) ]
  ! INT             [ reduce using rule 9 (expression -> constants .) ]
  ! STR             [ reduce using rule 9 (expression -> constants .) ]
  ! BOOL            [ reduce using rule 9 (expression -> constants .) ]

    variable                       shift and go to state 19
    constant                       shift and go to state 18
    var_type                       shift and go to state 5

state 51

    (17) if -> IF . LPAREN statement RPAREN LBRACE expressions RBRACE
    (18) if -> IF . LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE

    LPAREN          shift and go to state 60


state 52

    (46) get -> READF . LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON

    LPAREN          shift and go to state 61


state 53

    (10) expression -> while .

    RBRACE          reduce using rule 10 (expression -> while .)
    WHILE           reduce using rule 10 (expression -> while .)
    IF              reduce using rule 10 (expression -> while .)
    ID              reduce using rule 10 (expression -> while .)
    WRITELN         reduce using rule 10 (expression -> while .)
    READF           reduce using rule 10 (expression -> while .)
    ENUM            reduce using rule 10 (expression -> while .)
    INT             reduce using rule 10 (expression -> while .)
    STR             reduce using rule 10 (expression -> while .)
    BOOL            reduce using rule 10 (expression -> while .)


state 54

    (8) expressions -> expression .

    RBRACE          reduce using rule 8 (expressions -> expression .)
    WHILE           reduce using rule 8 (expressions -> expression .)
    IF              reduce using rule 8 (expressions -> expression .)
    ID              reduce using rule 8 (expressions -> expression .)
    WRITELN         reduce using rule 8 (expressions -> expression .)
    READF           reduce using rule 8 (expressions -> expression .)
    ENUM            reduce using rule 8 (expressions -> expression .)
    INT             reduce using rule 8 (expressions -> expression .)
    STR             reduce using rule 8 (expressions -> expression .)
    BOOL            reduce using rule 8 (expressions -> expression .)


state 55

    (16) while -> WHILE LPAREN . statement RPAREN LBRACE expressions RBRACE
    (19) statement -> . type logic_op type
    (34) type -> . NUMBER
    (35) type -> . STRING
    (36) type -> . boolean
    (37) type -> . ID
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NUMBER          shift and go to state 32
    STRING          shift and go to state 30
    ID              shift and go to state 35
    TRUE            shift and go to state 31
    FALSE           shift and go to state 29

    boolean                        shift and go to state 33
    type                           shift and go to state 63
    statement                      shift and go to state 62

state 56

    (3) function -> VOID MAIN LPAREN params RPAREN LBRACE expressions RBRACE .

    $end            reduce using rule 3 (function -> VOID MAIN LPAREN params RPAREN LBRACE expressions RBRACE .)


state 57

    (7) expressions -> expressions expression .

    RBRACE          reduce using rule 7 (expressions -> expressions expression .)
    WHILE           reduce using rule 7 (expressions -> expressions expression .)
    IF              reduce using rule 7 (expressions -> expressions expression .)
    ID              reduce using rule 7 (expressions -> expressions expression .)
    WRITELN         reduce using rule 7 (expressions -> expressions expression .)
    READF           reduce using rule 7 (expressions -> expressions expression .)
    ENUM            reduce using rule 7 (expressions -> expressions expression .)
    INT             reduce using rule 7 (expressions -> expressions expression .)
    STR             reduce using rule 7 (expressions -> expressions expression .)
    BOOL            reduce using rule 7 (expressions -> expressions expression .)


state 58

    (45) print -> WRITELN LPAREN . type RPAREN SEMICOLON
    (34) type -> . NUMBER
    (35) type -> . STRING
    (36) type -> . boolean
    (37) type -> . ID
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NUMBER          shift and go to state 32
    STRING          shift and go to state 30
    ID              shift and go to state 35
    TRUE            shift and go to state 31
    FALSE           shift and go to state 29

    boolean                        shift and go to state 33
    type                           shift and go to state 64

state 59

    (15) assigned -> ID ASSIGN . type SEMICOLON
    (34) type -> . NUMBER
    (35) type -> . STRING
    (36) type -> . boolean
    (37) type -> . ID
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NUMBER          shift and go to state 32
    STRING          shift and go to state 30
    ID              shift and go to state 35
    TRUE            shift and go to state 31
    FALSE           shift and go to state 29

    boolean                        shift and go to state 33
    type                           shift and go to state 65

state 60

    (17) if -> IF LPAREN . statement RPAREN LBRACE expressions RBRACE
    (18) if -> IF LPAREN . statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
    (19) statement -> . type logic_op type
    (34) type -> . NUMBER
    (35) type -> . STRING
    (36) type -> . boolean
    (37) type -> . ID
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NUMBER          shift and go to state 32
    STRING          shift and go to state 30
    ID              shift and go to state 35
    TRUE            shift and go to state 31
    FALSE           shift and go to state 29

    boolean                        shift and go to state 33
    type                           shift and go to state 63
    statement                      shift and go to state 66

state 61

    (46) get -> READF LPAREN . gets COMMA AMPERSAND ID RPAREN SEMICOLON
    (47) gets -> . GET_INT
    (48) gets -> . GET_STRING
    (49) gets -> . GET_BOOL

    GET_INT         shift and go to state 69
    GET_STRING      shift and go to state 68
    GET_BOOL        shift and go to state 67

    gets                           shift and go to state 70

state 62

    (16) while -> WHILE LPAREN statement . RPAREN LBRACE expressions RBRACE

    RPAREN          shift and go to state 71


state 63

    (19) statement -> type . logic_op type
    (20) logic_op -> . EQ
    (21) logic_op -> . NOT_EQ
    (22) logic_op -> . GREATER
    (23) logic_op -> . GREATER_EQ
    (24) logic_op -> . LESS
    (25) logic_op -> . LESS_EQ

    EQ              shift and go to state 76
    NOT_EQ          shift and go to state 78
    GREATER         shift and go to state 74
    GREATER_EQ      shift and go to state 77
    LESS            shift and go to state 75
    LESS_EQ         shift and go to state 72

    logic_op                       shift and go to state 73

state 64

    (45) print -> WRITELN LPAREN type . RPAREN SEMICOLON

    RPAREN          shift and go to state 79


state 65

    (15) assigned -> ID ASSIGN type . SEMICOLON

    SEMICOLON       shift and go to state 80


state 66

    (17) if -> IF LPAREN statement . RPAREN LBRACE expressions RBRACE
    (18) if -> IF LPAREN statement . RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE

    RPAREN          shift and go to state 81


state 67

    (49) gets -> GET_BOOL .

    COMMA           reduce using rule 49 (gets -> GET_BOOL .)


state 68

    (48) gets -> GET_STRING .

    COMMA           reduce using rule 48 (gets -> GET_STRING .)


state 69

    (47) gets -> GET_INT .

    COMMA           reduce using rule 47 (gets -> GET_INT .)


state 70

    (46) get -> READF LPAREN gets . COMMA AMPERSAND ID RPAREN SEMICOLON

    COMMA           shift and go to state 82


state 71

    (16) while -> WHILE LPAREN statement RPAREN . LBRACE expressions RBRACE

    LBRACE          shift and go to state 83


state 72

    (25) logic_op -> LESS_EQ .

    NUMBER          reduce using rule 25 (logic_op -> LESS_EQ .)
    STRING          reduce using rule 25 (logic_op -> LESS_EQ .)
    ID              reduce using rule 25 (logic_op -> LESS_EQ .)
    TRUE            reduce using rule 25 (logic_op -> LESS_EQ .)
    FALSE           reduce using rule 25 (logic_op -> LESS_EQ .)


state 73

    (19) statement -> type logic_op . type
    (34) type -> . NUMBER
    (35) type -> . STRING
    (36) type -> . boolean
    (37) type -> . ID
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NUMBER          shift and go to state 32
    STRING          shift and go to state 30
    ID              shift and go to state 35
    TRUE            shift and go to state 31
    FALSE           shift and go to state 29

    boolean                        shift and go to state 33
    type                           shift and go to state 84

state 74

    (22) logic_op -> GREATER .

    NUMBER          reduce using rule 22 (logic_op -> GREATER .)
    STRING          reduce using rule 22 (logic_op -> GREATER .)
    ID              reduce using rule 22 (logic_op -> GREATER .)
    TRUE            reduce using rule 22 (logic_op -> GREATER .)
    FALSE           reduce using rule 22 (logic_op -> GREATER .)


state 75

    (24) logic_op -> LESS .

    NUMBER          reduce using rule 24 (logic_op -> LESS .)
    STRING          reduce using rule 24 (logic_op -> LESS .)
    ID              reduce using rule 24 (logic_op -> LESS .)
    TRUE            reduce using rule 24 (logic_op -> LESS .)
    FALSE           reduce using rule 24 (logic_op -> LESS .)


state 76

    (20) logic_op -> EQ .

    NUMBER          reduce using rule 20 (logic_op -> EQ .)
    STRING          reduce using rule 20 (logic_op -> EQ .)
    ID              reduce using rule 20 (logic_op -> EQ .)
    TRUE            reduce using rule 20 (logic_op -> EQ .)
    FALSE           reduce using rule 20 (logic_op -> EQ .)


state 77

    (23) logic_op -> GREATER_EQ .

    NUMBER          reduce using rule 23 (logic_op -> GREATER_EQ .)
    STRING          reduce using rule 23 (logic_op -> GREATER_EQ .)
    ID              reduce using rule 23 (logic_op -> GREATER_EQ .)
    TRUE            reduce using rule 23 (logic_op -> GREATER_EQ .)
    FALSE           reduce using rule 23 (logic_op -> GREATER_EQ .)


state 78

    (21) logic_op -> NOT_EQ .

    NUMBER          reduce using rule 21 (logic_op -> NOT_EQ .)
    STRING          reduce using rule 21 (logic_op -> NOT_EQ .)
    ID              reduce using rule 21 (logic_op -> NOT_EQ .)
    TRUE            reduce using rule 21 (logic_op -> NOT_EQ .)
    FALSE           reduce using rule 21 (logic_op -> NOT_EQ .)


state 79

    (45) print -> WRITELN LPAREN type RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 85


state 80

    (15) assigned -> ID ASSIGN type SEMICOLON .

    RBRACE          reduce using rule 15 (assigned -> ID ASSIGN type SEMICOLON .)
    WHILE           reduce using rule 15 (assigned -> ID ASSIGN type SEMICOLON .)
    IF              reduce using rule 15 (assigned -> ID ASSIGN type SEMICOLON .)
    ID              reduce using rule 15 (assigned -> ID ASSIGN type SEMICOLON .)
    WRITELN         reduce using rule 15 (assigned -> ID ASSIGN type SEMICOLON .)
    READF           reduce using rule 15 (assigned -> ID ASSIGN type SEMICOLON .)
    ENUM            reduce using rule 15 (assigned -> ID ASSIGN type SEMICOLON .)
    INT             reduce using rule 15 (assigned -> ID ASSIGN type SEMICOLON .)
    STR             reduce using rule 15 (assigned -> ID ASSIGN type SEMICOLON .)
    BOOL            reduce using rule 15 (assigned -> ID ASSIGN type SEMICOLON .)


state 81

    (17) if -> IF LPAREN statement RPAREN . LBRACE expressions RBRACE
    (18) if -> IF LPAREN statement RPAREN . LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE

    LBRACE          shift and go to state 86


state 82

    (46) get -> READF LPAREN gets COMMA . AMPERSAND ID RPAREN SEMICOLON

    AMPERSAND       shift and go to state 87


state 83

    (16) while -> WHILE LPAREN statement RPAREN LBRACE . expressions RBRACE
    (7) expressions -> . expressions expression
    (8) expressions -> . expression
    (9) expression -> . constants
    (10) expression -> . while
    (11) expression -> . if
    (12) expression -> . assigned
    (13) expression -> . print
    (14) expression -> . get
    (40) constants -> . constants constant
    (41) constants -> . constants variable
    (42) constants -> . constant
    (43) constants -> . variable
    (16) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (17) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (18) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
    (15) assigned -> . ID ASSIGN type SEMICOLON
    (45) print -> . WRITELN LPAREN type RPAREN SEMICOLON
    (46) get -> . READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON
    (44) constant -> . ENUM inits SEMICOLON
    (26) variable -> . var_type inits SEMICOLON
    (31) var_type -> . INT
    (32) var_type -> . STR
    (33) var_type -> . BOOL

    WHILE           shift and go to state 42
    IF              shift and go to state 51
    ID              shift and go to state 49
    WRITELN         shift and go to state 48
    READF           shift and go to state 52
    ENUM            shift and go to state 4
    INT             shift and go to state 2
    STR             shift and go to state 10
    BOOL            shift and go to state 7

    constant                       shift and go to state 9
    var_type                       shift and go to state 5
    get                            shift and go to state 47
    assigned                       shift and go to state 41
    variable                       shift and go to state 8
    while                          shift and go to state 53
    print                          shift and go to state 45
    expressions                    shift and go to state 88
    expression                     shift and go to state 54
    constants                      shift and go to state 50
    if                             shift and go to state 44

state 84

    (19) statement -> type logic_op type .

    RPAREN          reduce using rule 19 (statement -> type logic_op type .)


state 85

    (45) print -> WRITELN LPAREN type RPAREN SEMICOLON .

    RBRACE          reduce using rule 45 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)
    WHILE           reduce using rule 45 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)
    IF              reduce using rule 45 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)
    ID              reduce using rule 45 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)
    WRITELN         reduce using rule 45 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)
    READF           reduce using rule 45 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)
    ENUM            reduce using rule 45 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)
    INT             reduce using rule 45 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)
    STR             reduce using rule 45 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)
    BOOL            reduce using rule 45 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)


state 86

    (17) if -> IF LPAREN statement RPAREN LBRACE . expressions RBRACE
    (18) if -> IF LPAREN statement RPAREN LBRACE . expressions RBRACE ELSE LBRACE expressions RBRACE
    (7) expressions -> . expressions expression
    (8) expressions -> . expression
    (9) expression -> . constants
    (10) expression -> . while
    (11) expression -> . if
    (12) expression -> . assigned
    (13) expression -> . print
    (14) expression -> . get
    (40) constants -> . constants constant
    (41) constants -> . constants variable
    (42) constants -> . constant
    (43) constants -> . variable
    (16) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (17) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (18) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
    (15) assigned -> . ID ASSIGN type SEMICOLON
    (45) print -> . WRITELN LPAREN type RPAREN SEMICOLON
    (46) get -> . READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON
    (44) constant -> . ENUM inits SEMICOLON
    (26) variable -> . var_type inits SEMICOLON
    (31) var_type -> . INT
    (32) var_type -> . STR
    (33) var_type -> . BOOL

    WHILE           shift and go to state 42
    IF              shift and go to state 51
    ID              shift and go to state 49
    WRITELN         shift and go to state 48
    READF           shift and go to state 52
    ENUM            shift and go to state 4
    INT             shift and go to state 2
    STR             shift and go to state 10
    BOOL            shift and go to state 7

    constant                       shift and go to state 9
    var_type                       shift and go to state 5
    get                            shift and go to state 47
    assigned                       shift and go to state 41
    variable                       shift and go to state 8
    while                          shift and go to state 53
    print                          shift and go to state 45
    expressions                    shift and go to state 89
    expression                     shift and go to state 54
    constants                      shift and go to state 50
    if                             shift and go to state 44

state 87

    (46) get -> READF LPAREN gets COMMA AMPERSAND . ID RPAREN SEMICOLON

    ID              shift and go to state 90


state 88

    (16) while -> WHILE LPAREN statement RPAREN LBRACE expressions . RBRACE
    (7) expressions -> expressions . expression
    (9) expression -> . constants
    (10) expression -> . while
    (11) expression -> . if
    (12) expression -> . assigned
    (13) expression -> . print
    (14) expression -> . get
    (40) constants -> . constants constant
    (41) constants -> . constants variable
    (42) constants -> . constant
    (43) constants -> . variable
    (16) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (17) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (18) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
    (15) assigned -> . ID ASSIGN type SEMICOLON
    (45) print -> . WRITELN LPAREN type RPAREN SEMICOLON
    (46) get -> . READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON
    (44) constant -> . ENUM inits SEMICOLON
    (26) variable -> . var_type inits SEMICOLON
    (31) var_type -> . INT
    (32) var_type -> . STR
    (33) var_type -> . BOOL

    RBRACE          shift and go to state 91
    WHILE           shift and go to state 42
    IF              shift and go to state 51
    ID              shift and go to state 49
    WRITELN         shift and go to state 48
    READF           shift and go to state 52
    ENUM            shift and go to state 4
    INT             shift and go to state 2
    STR             shift and go to state 10
    BOOL            shift and go to state 7

    constant                       shift and go to state 9
    var_type                       shift and go to state 5
    get                            shift and go to state 47
    assigned                       shift and go to state 41
    variable                       shift and go to state 8
    while                          shift and go to state 53
    print                          shift and go to state 45
    expression                     shift and go to state 57
    constants                      shift and go to state 50
    if                             shift and go to state 44

state 89

    (17) if -> IF LPAREN statement RPAREN LBRACE expressions . RBRACE
    (18) if -> IF LPAREN statement RPAREN LBRACE expressions . RBRACE ELSE LBRACE expressions RBRACE
    (7) expressions -> expressions . expression
    (9) expression -> . constants
    (10) expression -> . while
    (11) expression -> . if
    (12) expression -> . assigned
    (13) expression -> . print
    (14) expression -> . get
    (40) constants -> . constants constant
    (41) constants -> . constants variable
    (42) constants -> . constant
    (43) constants -> . variable
    (16) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (17) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (18) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
    (15) assigned -> . ID ASSIGN type SEMICOLON
    (45) print -> . WRITELN LPAREN type RPAREN SEMICOLON
    (46) get -> . READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON
    (44) constant -> . ENUM inits SEMICOLON
    (26) variable -> . var_type inits SEMICOLON
    (31) var_type -> . INT
    (32) var_type -> . STR
    (33) var_type -> . BOOL

    RBRACE          shift and go to state 92
    WHILE           shift and go to state 42
    IF              shift and go to state 51
    ID              shift and go to state 49
    WRITELN         shift and go to state 48
    READF           shift and go to state 52
    ENUM            shift and go to state 4
    INT             shift and go to state 2
    STR             shift and go to state 10
    BOOL            shift and go to state 7

    constant                       shift and go to state 9
    var_type                       shift and go to state 5
    get                            shift and go to state 47
    assigned                       shift and go to state 41
    variable                       shift and go to state 8
    while                          shift and go to state 53
    print                          shift and go to state 45
    expression                     shift and go to state 57
    constants                      shift and go to state 50
    if                             shift and go to state 44

state 90

    (46) get -> READF LPAREN gets COMMA AMPERSAND ID . RPAREN SEMICOLON

    RPAREN          shift and go to state 93


state 91

    (16) while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .

    RBRACE          reduce using rule 16 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    WHILE           reduce using rule 16 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    IF              reduce using rule 16 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    ID              reduce using rule 16 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    WRITELN         reduce using rule 16 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    READF           reduce using rule 16 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    ENUM            reduce using rule 16 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    INT             reduce using rule 16 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    STR             reduce using rule 16 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    BOOL            reduce using rule 16 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)


state 92

    (17) if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .
    (18) if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE . ELSE LBRACE expressions RBRACE

    RBRACE          reduce using rule 17 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    WHILE           reduce using rule 17 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    IF              reduce using rule 17 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    ID              reduce using rule 17 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    WRITELN         reduce using rule 17 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    READF           reduce using rule 17 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    ENUM            reduce using rule 17 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    INT             reduce using rule 17 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    STR             reduce using rule 17 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    BOOL            reduce using rule 17 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    ELSE            shift and go to state 94


state 93

    (46) get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 95


state 94

    (18) if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE . LBRACE expressions RBRACE

    LBRACE          shift and go to state 96


state 95

    (46) get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .

    RBRACE          reduce using rule 46 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)
    WHILE           reduce using rule 46 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)
    IF              reduce using rule 46 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)
    ID              reduce using rule 46 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)
    WRITELN         reduce using rule 46 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)
    READF           reduce using rule 46 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)
    ENUM            reduce using rule 46 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)
    INT             reduce using rule 46 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)
    STR             reduce using rule 46 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)
    BOOL            reduce using rule 46 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)


state 96

    (18) if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE . expressions RBRACE
    (7) expressions -> . expressions expression
    (8) expressions -> . expression
    (9) expression -> . constants
    (10) expression -> . while
    (11) expression -> . if
    (12) expression -> . assigned
    (13) expression -> . print
    (14) expression -> . get
    (40) constants -> . constants constant
    (41) constants -> . constants variable
    (42) constants -> . constant
    (43) constants -> . variable
    (16) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (17) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (18) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
    (15) assigned -> . ID ASSIGN type SEMICOLON
    (45) print -> . WRITELN LPAREN type RPAREN SEMICOLON
    (46) get -> . READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON
    (44) constant -> . ENUM inits SEMICOLON
    (26) variable -> . var_type inits SEMICOLON
    (31) var_type -> . INT
    (32) var_type -> . STR
    (33) var_type -> . BOOL

    WHILE           shift and go to state 42
    IF              shift and go to state 51
    ID              shift and go to state 49
    WRITELN         shift and go to state 48
    READF           shift and go to state 52
    ENUM            shift and go to state 4
    INT             shift and go to state 2
    STR             shift and go to state 10
    BOOL            shift and go to state 7

    constant                       shift and go to state 9
    var_type                       shift and go to state 5
    get                            shift and go to state 47
    assigned                       shift and go to state 41
    variable                       shift and go to state 8
    while                          shift and go to state 53
    print                          shift and go to state 45
    expressions                    shift and go to state 97
    expression                     shift and go to state 54
    constants                      shift and go to state 50
    if                             shift and go to state 44

state 97

    (18) if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions . RBRACE
    (7) expressions -> expressions . expression
    (9) expression -> . constants
    (10) expression -> . while
    (11) expression -> . if
    (12) expression -> . assigned
    (13) expression -> . print
    (14) expression -> . get
    (40) constants -> . constants constant
    (41) constants -> . constants variable
    (42) constants -> . constant
    (43) constants -> . variable
    (16) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (17) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (18) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE
    (15) assigned -> . ID ASSIGN type SEMICOLON
    (45) print -> . WRITELN LPAREN type RPAREN SEMICOLON
    (46) get -> . READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON
    (44) constant -> . ENUM inits SEMICOLON
    (26) variable -> . var_type inits SEMICOLON
    (31) var_type -> . INT
    (32) var_type -> . STR
    (33) var_type -> . BOOL

    RBRACE          shift and go to state 98
    WHILE           shift and go to state 42
    IF              shift and go to state 51
    ID              shift and go to state 49
    WRITELN         shift and go to state 48
    READF           shift and go to state 52
    ENUM            shift and go to state 4
    INT             shift and go to state 2
    STR             shift and go to state 10
    BOOL            shift and go to state 7

    constant                       shift and go to state 9
    var_type                       shift and go to state 5
    get                            shift and go to state 47
    assigned                       shift and go to state 41
    variable                       shift and go to state 8
    while                          shift and go to state 53
    print                          shift and go to state 45
    expression                     shift and go to state 57
    constants                      shift and go to state 50
    if                             shift and go to state 44

state 98

    (18) if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .

    RBRACE          reduce using rule 18 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)
    WHILE           reduce using rule 18 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)
    IF              reduce using rule 18 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)
    ID              reduce using rule 18 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)
    WRITELN         reduce using rule 18 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)
    READF           reduce using rule 18 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)
    ENUM            reduce using rule 18 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)
    INT             reduce using rule 18 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)
    STR             reduce using rule 18 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)
    BOOL            reduce using rule 18 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expressions RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ENUM in state 50 resolved as shift
WARNING: shift/reduce conflict for INT in state 50 resolved as shift
WARNING: shift/reduce conflict for STR in state 50 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 50 resolved as shift
