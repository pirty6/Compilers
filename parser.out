Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> function
Rule 2     function -> constants VOID MAIN LPAREN RPAREN LBRACE expressions RBRACE constants
Rule 3     expressions -> expressions expression
Rule 4     expressions -> expression
Rule 5     expression -> variable
Rule 6     expression -> while
Rule 7     expression -> if
Rule 8     expression -> assigned
Rule 9     expression -> print
Rule 10    expression -> get
Rule 11    expression -> empty
Rule 12    while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
Rule 13    if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE
Rule 14    if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expression RBRACE
Rule 15    statement -> ID EQ ID
Rule 16    statement -> ID NOT_EQ ID
Rule 17    statement -> ID GREATER ID
Rule 18    statement -> ID GREATER_EQ ID
Rule 19    statement -> ID LESS ID
Rule 20    statement -> ID LESS_EQ ID
Rule 21    statement -> NUMBER EQ ID
Rule 22    statement -> NUMBER NOT_EQ ID
Rule 23    statement -> NUMBER GREATER ID
Rule 24    statement -> NUMBER GREATER_EQ ID
Rule 25    statement -> NUMBER LESS ID
Rule 26    statement -> NUMBER LESS_EQ ID
Rule 27    statement -> ID EQ NUMBER
Rule 28    statement -> ID NOT_EQ NUMBER
Rule 29    statement -> ID GREATER NUMBER
Rule 30    statement -> ID GREATER_EQ NUMBER
Rule 31    statement -> ID LESS NUMBER
Rule 32    statement -> ID LESS_EQ NUMBER
Rule 33    statement -> ID EQ boolean
Rule 34    statement -> ID NOT_EQ boolean
Rule 35    statement -> boolean EQ ID
Rule 36    statement -> boolean NOT_EQ ID
Rule 37    variable -> INT ID SEMICOLON
Rule 38    variable -> INT ID ASSIGN NUMBER SEMICOLON
Rule 39    variable -> STR ID ASSIGN STRING SEMICOLON
Rule 40    variable -> STR ID SEMICOLON
Rule 41    variable -> BOOL ID SEMICOLON
Rule 42    variable -> BOOL ID ASSIGN boolean SEMICOLON
Rule 43    boolean -> TRUE
Rule 44    boolean -> FALSE
Rule 45    constants -> constants constant
Rule 46    constants -> constants variable
Rule 47    constants -> constant
Rule 48    constants -> variable
Rule 49    constant -> ENUM ID ASSIGN NUMBER SEMICOLON
Rule 50    constant -> ENUM ID ASSIGN STRING SEMICOLON
Rule 51    constant -> ENUM ID ASSIGN boolean SEMICOLON
Rule 52    constant -> ENUM ID SEMICOLON
Rule 53    constant -> empty
Rule 54    print -> WRITELN LPAREN ID RPAREN SEMICOLON
Rule 55    print -> WRITELN LPAREN STRING RPAREN SEMICOLON
Rule 56    print -> WRITELN LPAREN NUMBER RPAREN SEMICOLON
Rule 57    print -> WRITELN LPAREN boolean RPAREN SEMICOLON
Rule 58    get -> READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
Rule 59    assigned -> ID ASSIGN NUMBER SEMICOLON
Rule 60    assigned -> ID ASSIGN STRING SEMICOLON
Rule 61    assigned -> ID ASSIGN boolean SEMICOLON
Rule 62    empty -> <empty>

Terminals, with rules where they appear

AMPERSAND            : 58
ASSIGN               : 38 39 42 49 50 51 59 60 61
BOOL                 : 41 42
COMMA                : 58
ELSE                 : 14
ENUM                 : 49 50 51 52
EQ                   : 15 21 27 33 35
FALSE                : 44
GREATER              : 17 23 29
GREATER_EQ           : 18 24 30
ID                   : 15 15 16 16 17 17 18 18 19 19 20 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 49 50 51 52 54 58 59 60 61
IF                   : 13 14
INT                  : 37 38
LBRACE               : 2 12 13 14 14
LESS                 : 19 25 31
LESS_EQ              : 20 26 32
LPAREN               : 2 12 13 14 54 55 56 57 58
MAIN                 : 2
NOT_EQ               : 16 22 28 34 36
NUMBER               : 21 22 23 24 25 26 27 28 29 30 31 32 38 49 56 59
RBRACE               : 2 12 13 14 14
READF                : 58
RPAREN               : 2 12 13 14 54 55 56 57 58
SEMICOLON            : 37 38 39 40 41 42 49 50 51 52 54 55 56 57 58 59 60 61
STR                  : 39 40
STRING               : 39 50 55 58 60
TRUE                 : 43
VOID                 : 2
WHILE                : 12
WRITELN              : 54 55 56 57
error                : 

Nonterminals, with rules where they appear

assigned             : 8
boolean              : 33 34 35 36 42 51 57 61
constant             : 45 47
constants            : 2 2 45 46
empty                : 11 53
expression           : 3 4 14
expressions          : 2 3 12 13 14
function             : 1
get                  : 10
if                   : 7
print                : 9
start                : 0
statement            : 12 13 14
variable             : 5 46 48
while                : 6

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . function
    (2) function -> . constants VOID MAIN LPAREN RPAREN LBRACE expressions RBRACE constants
    (45) constants -> . constants constant
    (46) constants -> . constants variable
    (47) constants -> . constant
    (48) constants -> . variable
    (49) constant -> . ENUM ID ASSIGN NUMBER SEMICOLON
    (50) constant -> . ENUM ID ASSIGN STRING SEMICOLON
    (51) constant -> . ENUM ID ASSIGN boolean SEMICOLON
    (52) constant -> . ENUM ID SEMICOLON
    (53) constant -> . empty
    (37) variable -> . INT ID SEMICOLON
    (38) variable -> . INT ID ASSIGN NUMBER SEMICOLON
    (39) variable -> . STR ID ASSIGN STRING SEMICOLON
    (40) variable -> . STR ID SEMICOLON
    (41) variable -> . BOOL ID SEMICOLON
    (42) variable -> . BOOL ID ASSIGN boolean SEMICOLON
    (62) empty -> .

  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    ENUM            shift and go to state 6
    INT             shift and go to state 9
    STR             shift and go to state 2
    BOOL            shift and go to state 10
    VOID            reduce using rule 62 (empty -> .)

  ! ENUM            [ reduce using rule 62 (empty -> .) ]
  ! INT             [ reduce using rule 62 (empty -> .) ]
  ! STR             [ reduce using rule 62 (empty -> .) ]
  ! BOOL            [ reduce using rule 62 (empty -> .) ]

    function                       shift and go to state 5
    constant                       shift and go to state 1
    start                          shift and go to state 3
    empty                          shift and go to state 4
    variable                       shift and go to state 7
    constants                      shift and go to state 8

state 1

    (47) constants -> constant .

    VOID            reduce using rule 47 (constants -> constant .)
    ENUM            reduce using rule 47 (constants -> constant .)
    INT             reduce using rule 47 (constants -> constant .)
    STR             reduce using rule 47 (constants -> constant .)
    BOOL            reduce using rule 47 (constants -> constant .)
    $end            reduce using rule 47 (constants -> constant .)


state 2

    (39) variable -> STR . ID ASSIGN STRING SEMICOLON
    (40) variable -> STR . ID SEMICOLON

    ID              shift and go to state 11


state 3

    (0) S' -> start .



state 4

    (53) constant -> empty .

    ENUM            reduce using rule 53 (constant -> empty .)
    INT             reduce using rule 53 (constant -> empty .)
    STR             reduce using rule 53 (constant -> empty .)
    BOOL            reduce using rule 53 (constant -> empty .)
    $end            reduce using rule 53 (constant -> empty .)
    VOID            reduce using rule 53 (constant -> empty .)


state 5

    (1) start -> function .

    $end            reduce using rule 1 (start -> function .)


state 6

    (49) constant -> ENUM . ID ASSIGN NUMBER SEMICOLON
    (50) constant -> ENUM . ID ASSIGN STRING SEMICOLON
    (51) constant -> ENUM . ID ASSIGN boolean SEMICOLON
    (52) constant -> ENUM . ID SEMICOLON

    ID              shift and go to state 12


state 7

    (48) constants -> variable .

    VOID            reduce using rule 48 (constants -> variable .)
    ENUM            reduce using rule 48 (constants -> variable .)
    INT             reduce using rule 48 (constants -> variable .)
    STR             reduce using rule 48 (constants -> variable .)
    BOOL            reduce using rule 48 (constants -> variable .)
    $end            reduce using rule 48 (constants -> variable .)


state 8

    (2) function -> constants . VOID MAIN LPAREN RPAREN LBRACE expressions RBRACE constants
    (45) constants -> constants . constant
    (46) constants -> constants . variable
    (49) constant -> . ENUM ID ASSIGN NUMBER SEMICOLON
    (50) constant -> . ENUM ID ASSIGN STRING SEMICOLON
    (51) constant -> . ENUM ID ASSIGN boolean SEMICOLON
    (52) constant -> . ENUM ID SEMICOLON
    (53) constant -> . empty
    (37) variable -> . INT ID SEMICOLON
    (38) variable -> . INT ID ASSIGN NUMBER SEMICOLON
    (39) variable -> . STR ID ASSIGN STRING SEMICOLON
    (40) variable -> . STR ID SEMICOLON
    (41) variable -> . BOOL ID SEMICOLON
    (42) variable -> . BOOL ID ASSIGN boolean SEMICOLON
    (62) empty -> .

  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    VOID            shift and go to state 13
    ENUM            shift and go to state 6
    INT             shift and go to state 9
    STR             shift and go to state 2
    BOOL            shift and go to state 10

  ! VOID            [ reduce using rule 62 (empty -> .) ]
  ! ENUM            [ reduce using rule 62 (empty -> .) ]
  ! INT             [ reduce using rule 62 (empty -> .) ]
  ! STR             [ reduce using rule 62 (empty -> .) ]
  ! BOOL            [ reduce using rule 62 (empty -> .) ]

    constant                       shift and go to state 15
    variable                       shift and go to state 14
    empty                          shift and go to state 4

state 9

    (37) variable -> INT . ID SEMICOLON
    (38) variable -> INT . ID ASSIGN NUMBER SEMICOLON

    ID              shift and go to state 16


state 10

    (41) variable -> BOOL . ID SEMICOLON
    (42) variable -> BOOL . ID ASSIGN boolean SEMICOLON

    ID              shift and go to state 17


state 11

    (39) variable -> STR ID . ASSIGN STRING SEMICOLON
    (40) variable -> STR ID . SEMICOLON

    ASSIGN          shift and go to state 19
    SEMICOLON       shift and go to state 18


state 12

    (49) constant -> ENUM ID . ASSIGN NUMBER SEMICOLON
    (50) constant -> ENUM ID . ASSIGN STRING SEMICOLON
    (51) constant -> ENUM ID . ASSIGN boolean SEMICOLON
    (52) constant -> ENUM ID . SEMICOLON

    ASSIGN          shift and go to state 21
    SEMICOLON       shift and go to state 20


state 13

    (2) function -> constants VOID . MAIN LPAREN RPAREN LBRACE expressions RBRACE constants

    MAIN            shift and go to state 22


state 14

    (46) constants -> constants variable .

    VOID            reduce using rule 46 (constants -> constants variable .)
    ENUM            reduce using rule 46 (constants -> constants variable .)
    INT             reduce using rule 46 (constants -> constants variable .)
    STR             reduce using rule 46 (constants -> constants variable .)
    BOOL            reduce using rule 46 (constants -> constants variable .)
    $end            reduce using rule 46 (constants -> constants variable .)


state 15

    (45) constants -> constants constant .

    VOID            reduce using rule 45 (constants -> constants constant .)
    ENUM            reduce using rule 45 (constants -> constants constant .)
    INT             reduce using rule 45 (constants -> constants constant .)
    STR             reduce using rule 45 (constants -> constants constant .)
    BOOL            reduce using rule 45 (constants -> constants constant .)
    $end            reduce using rule 45 (constants -> constants constant .)


state 16

    (37) variable -> INT ID . SEMICOLON
    (38) variable -> INT ID . ASSIGN NUMBER SEMICOLON

    SEMICOLON       shift and go to state 23
    ASSIGN          shift and go to state 24


state 17

    (41) variable -> BOOL ID . SEMICOLON
    (42) variable -> BOOL ID . ASSIGN boolean SEMICOLON

    SEMICOLON       shift and go to state 25
    ASSIGN          shift and go to state 26


state 18

    (40) variable -> STR ID SEMICOLON .

    RBRACE          reduce using rule 40 (variable -> STR ID SEMICOLON .)
    INT             reduce using rule 40 (variable -> STR ID SEMICOLON .)
    STR             reduce using rule 40 (variable -> STR ID SEMICOLON .)
    BOOL            reduce using rule 40 (variable -> STR ID SEMICOLON .)
    WHILE           reduce using rule 40 (variable -> STR ID SEMICOLON .)
    IF              reduce using rule 40 (variable -> STR ID SEMICOLON .)
    ID              reduce using rule 40 (variable -> STR ID SEMICOLON .)
    WRITELN         reduce using rule 40 (variable -> STR ID SEMICOLON .)
    READF           reduce using rule 40 (variable -> STR ID SEMICOLON .)
    ENUM            reduce using rule 40 (variable -> STR ID SEMICOLON .)
    $end            reduce using rule 40 (variable -> STR ID SEMICOLON .)
    VOID            reduce using rule 40 (variable -> STR ID SEMICOLON .)


state 19

    (39) variable -> STR ID ASSIGN . STRING SEMICOLON

    STRING          shift and go to state 27


state 20

    (52) constant -> ENUM ID SEMICOLON .

    ENUM            reduce using rule 52 (constant -> ENUM ID SEMICOLON .)
    INT             reduce using rule 52 (constant -> ENUM ID SEMICOLON .)
    STR             reduce using rule 52 (constant -> ENUM ID SEMICOLON .)
    BOOL            reduce using rule 52 (constant -> ENUM ID SEMICOLON .)
    $end            reduce using rule 52 (constant -> ENUM ID SEMICOLON .)
    VOID            reduce using rule 52 (constant -> ENUM ID SEMICOLON .)


state 21

    (49) constant -> ENUM ID ASSIGN . NUMBER SEMICOLON
    (50) constant -> ENUM ID ASSIGN . STRING SEMICOLON
    (51) constant -> ENUM ID ASSIGN . boolean SEMICOLON
    (43) boolean -> . TRUE
    (44) boolean -> . FALSE

    NUMBER          shift and go to state 30
    STRING          shift and go to state 29
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    boolean                        shift and go to state 31

state 22

    (2) function -> constants VOID MAIN . LPAREN RPAREN LBRACE expressions RBRACE constants

    LPAREN          shift and go to state 33


state 23

    (37) variable -> INT ID SEMICOLON .

    RBRACE          reduce using rule 37 (variable -> INT ID SEMICOLON .)
    INT             reduce using rule 37 (variable -> INT ID SEMICOLON .)
    STR             reduce using rule 37 (variable -> INT ID SEMICOLON .)
    BOOL            reduce using rule 37 (variable -> INT ID SEMICOLON .)
    WHILE           reduce using rule 37 (variable -> INT ID SEMICOLON .)
    IF              reduce using rule 37 (variable -> INT ID SEMICOLON .)
    ID              reduce using rule 37 (variable -> INT ID SEMICOLON .)
    WRITELN         reduce using rule 37 (variable -> INT ID SEMICOLON .)
    READF           reduce using rule 37 (variable -> INT ID SEMICOLON .)
    ENUM            reduce using rule 37 (variable -> INT ID SEMICOLON .)
    $end            reduce using rule 37 (variable -> INT ID SEMICOLON .)
    VOID            reduce using rule 37 (variable -> INT ID SEMICOLON .)


state 24

    (38) variable -> INT ID ASSIGN . NUMBER SEMICOLON

    NUMBER          shift and go to state 34


state 25

    (41) variable -> BOOL ID SEMICOLON .

    RBRACE          reduce using rule 41 (variable -> BOOL ID SEMICOLON .)
    INT             reduce using rule 41 (variable -> BOOL ID SEMICOLON .)
    STR             reduce using rule 41 (variable -> BOOL ID SEMICOLON .)
    BOOL            reduce using rule 41 (variable -> BOOL ID SEMICOLON .)
    WHILE           reduce using rule 41 (variable -> BOOL ID SEMICOLON .)
    IF              reduce using rule 41 (variable -> BOOL ID SEMICOLON .)
    ID              reduce using rule 41 (variable -> BOOL ID SEMICOLON .)
    WRITELN         reduce using rule 41 (variable -> BOOL ID SEMICOLON .)
    READF           reduce using rule 41 (variable -> BOOL ID SEMICOLON .)
    ENUM            reduce using rule 41 (variable -> BOOL ID SEMICOLON .)
    $end            reduce using rule 41 (variable -> BOOL ID SEMICOLON .)
    VOID            reduce using rule 41 (variable -> BOOL ID SEMICOLON .)


state 26

    (42) variable -> BOOL ID ASSIGN . boolean SEMICOLON
    (43) boolean -> . TRUE
    (44) boolean -> . FALSE

    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    boolean                        shift and go to state 35

state 27

    (39) variable -> STR ID ASSIGN STRING . SEMICOLON

    SEMICOLON       shift and go to state 36


state 28

    (44) boolean -> FALSE .

    EQ              reduce using rule 44 (boolean -> FALSE .)
    NOT_EQ          reduce using rule 44 (boolean -> FALSE .)
    RPAREN          reduce using rule 44 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 44 (boolean -> FALSE .)


state 29

    (50) constant -> ENUM ID ASSIGN STRING . SEMICOLON

    SEMICOLON       shift and go to state 37


state 30

    (49) constant -> ENUM ID ASSIGN NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 38


state 31

    (51) constant -> ENUM ID ASSIGN boolean . SEMICOLON

    SEMICOLON       shift and go to state 39


state 32

    (43) boolean -> TRUE .

    EQ              reduce using rule 43 (boolean -> TRUE .)
    NOT_EQ          reduce using rule 43 (boolean -> TRUE .)
    RPAREN          reduce using rule 43 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 43 (boolean -> TRUE .)


state 33

    (2) function -> constants VOID MAIN LPAREN . RPAREN LBRACE expressions RBRACE constants

    RPAREN          shift and go to state 40


state 34

    (38) variable -> INT ID ASSIGN NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 41


state 35

    (42) variable -> BOOL ID ASSIGN boolean . SEMICOLON

    SEMICOLON       shift and go to state 42


state 36

    (39) variable -> STR ID ASSIGN STRING SEMICOLON .

    RBRACE          reduce using rule 39 (variable -> STR ID ASSIGN STRING SEMICOLON .)
    INT             reduce using rule 39 (variable -> STR ID ASSIGN STRING SEMICOLON .)
    STR             reduce using rule 39 (variable -> STR ID ASSIGN STRING SEMICOLON .)
    BOOL            reduce using rule 39 (variable -> STR ID ASSIGN STRING SEMICOLON .)
    WHILE           reduce using rule 39 (variable -> STR ID ASSIGN STRING SEMICOLON .)
    IF              reduce using rule 39 (variable -> STR ID ASSIGN STRING SEMICOLON .)
    ID              reduce using rule 39 (variable -> STR ID ASSIGN STRING SEMICOLON .)
    WRITELN         reduce using rule 39 (variable -> STR ID ASSIGN STRING SEMICOLON .)
    READF           reduce using rule 39 (variable -> STR ID ASSIGN STRING SEMICOLON .)
    ENUM            reduce using rule 39 (variable -> STR ID ASSIGN STRING SEMICOLON .)
    $end            reduce using rule 39 (variable -> STR ID ASSIGN STRING SEMICOLON .)
    VOID            reduce using rule 39 (variable -> STR ID ASSIGN STRING SEMICOLON .)


state 37

    (50) constant -> ENUM ID ASSIGN STRING SEMICOLON .

    ENUM            reduce using rule 50 (constant -> ENUM ID ASSIGN STRING SEMICOLON .)
    INT             reduce using rule 50 (constant -> ENUM ID ASSIGN STRING SEMICOLON .)
    STR             reduce using rule 50 (constant -> ENUM ID ASSIGN STRING SEMICOLON .)
    BOOL            reduce using rule 50 (constant -> ENUM ID ASSIGN STRING SEMICOLON .)
    $end            reduce using rule 50 (constant -> ENUM ID ASSIGN STRING SEMICOLON .)
    VOID            reduce using rule 50 (constant -> ENUM ID ASSIGN STRING SEMICOLON .)


state 38

    (49) constant -> ENUM ID ASSIGN NUMBER SEMICOLON .

    ENUM            reduce using rule 49 (constant -> ENUM ID ASSIGN NUMBER SEMICOLON .)
    INT             reduce using rule 49 (constant -> ENUM ID ASSIGN NUMBER SEMICOLON .)
    STR             reduce using rule 49 (constant -> ENUM ID ASSIGN NUMBER SEMICOLON .)
    BOOL            reduce using rule 49 (constant -> ENUM ID ASSIGN NUMBER SEMICOLON .)
    $end            reduce using rule 49 (constant -> ENUM ID ASSIGN NUMBER SEMICOLON .)
    VOID            reduce using rule 49 (constant -> ENUM ID ASSIGN NUMBER SEMICOLON .)


state 39

    (51) constant -> ENUM ID ASSIGN boolean SEMICOLON .

    ENUM            reduce using rule 51 (constant -> ENUM ID ASSIGN boolean SEMICOLON .)
    INT             reduce using rule 51 (constant -> ENUM ID ASSIGN boolean SEMICOLON .)
    STR             reduce using rule 51 (constant -> ENUM ID ASSIGN boolean SEMICOLON .)
    BOOL            reduce using rule 51 (constant -> ENUM ID ASSIGN boolean SEMICOLON .)
    $end            reduce using rule 51 (constant -> ENUM ID ASSIGN boolean SEMICOLON .)
    VOID            reduce using rule 51 (constant -> ENUM ID ASSIGN boolean SEMICOLON .)


state 40

    (2) function -> constants VOID MAIN LPAREN RPAREN . LBRACE expressions RBRACE constants

    LBRACE          shift and go to state 43


state 41

    (38) variable -> INT ID ASSIGN NUMBER SEMICOLON .

    RBRACE          reduce using rule 38 (variable -> INT ID ASSIGN NUMBER SEMICOLON .)
    INT             reduce using rule 38 (variable -> INT ID ASSIGN NUMBER SEMICOLON .)
    STR             reduce using rule 38 (variable -> INT ID ASSIGN NUMBER SEMICOLON .)
    BOOL            reduce using rule 38 (variable -> INT ID ASSIGN NUMBER SEMICOLON .)
    WHILE           reduce using rule 38 (variable -> INT ID ASSIGN NUMBER SEMICOLON .)
    IF              reduce using rule 38 (variable -> INT ID ASSIGN NUMBER SEMICOLON .)
    ID              reduce using rule 38 (variable -> INT ID ASSIGN NUMBER SEMICOLON .)
    WRITELN         reduce using rule 38 (variable -> INT ID ASSIGN NUMBER SEMICOLON .)
    READF           reduce using rule 38 (variable -> INT ID ASSIGN NUMBER SEMICOLON .)
    ENUM            reduce using rule 38 (variable -> INT ID ASSIGN NUMBER SEMICOLON .)
    $end            reduce using rule 38 (variable -> INT ID ASSIGN NUMBER SEMICOLON .)
    VOID            reduce using rule 38 (variable -> INT ID ASSIGN NUMBER SEMICOLON .)


state 42

    (42) variable -> BOOL ID ASSIGN boolean SEMICOLON .

    RBRACE          reduce using rule 42 (variable -> BOOL ID ASSIGN boolean SEMICOLON .)
    INT             reduce using rule 42 (variable -> BOOL ID ASSIGN boolean SEMICOLON .)
    STR             reduce using rule 42 (variable -> BOOL ID ASSIGN boolean SEMICOLON .)
    BOOL            reduce using rule 42 (variable -> BOOL ID ASSIGN boolean SEMICOLON .)
    WHILE           reduce using rule 42 (variable -> BOOL ID ASSIGN boolean SEMICOLON .)
    IF              reduce using rule 42 (variable -> BOOL ID ASSIGN boolean SEMICOLON .)
    ID              reduce using rule 42 (variable -> BOOL ID ASSIGN boolean SEMICOLON .)
    WRITELN         reduce using rule 42 (variable -> BOOL ID ASSIGN boolean SEMICOLON .)
    READF           reduce using rule 42 (variable -> BOOL ID ASSIGN boolean SEMICOLON .)
    ENUM            reduce using rule 42 (variable -> BOOL ID ASSIGN boolean SEMICOLON .)
    $end            reduce using rule 42 (variable -> BOOL ID ASSIGN boolean SEMICOLON .)
    VOID            reduce using rule 42 (variable -> BOOL ID ASSIGN boolean SEMICOLON .)


state 43

    (2) function -> constants VOID MAIN LPAREN RPAREN LBRACE . expressions RBRACE constants
    (3) expressions -> . expressions expression
    (4) expressions -> . expression
    (5) expression -> . variable
    (6) expression -> . while
    (7) expression -> . if
    (8) expression -> . assigned
    (9) expression -> . print
    (10) expression -> . get
    (11) expression -> . empty
    (37) variable -> . INT ID SEMICOLON
    (38) variable -> . INT ID ASSIGN NUMBER SEMICOLON
    (39) variable -> . STR ID ASSIGN STRING SEMICOLON
    (40) variable -> . STR ID SEMICOLON
    (41) variable -> . BOOL ID SEMICOLON
    (42) variable -> . BOOL ID ASSIGN boolean SEMICOLON
    (12) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (13) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (14) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expression RBRACE
    (59) assigned -> . ID ASSIGN NUMBER SEMICOLON
    (60) assigned -> . ID ASSIGN STRING SEMICOLON
    (61) assigned -> . ID ASSIGN boolean SEMICOLON
    (54) print -> . WRITELN LPAREN ID RPAREN SEMICOLON
    (55) print -> . WRITELN LPAREN STRING RPAREN SEMICOLON
    (56) print -> . WRITELN LPAREN NUMBER RPAREN SEMICOLON
    (57) print -> . WRITELN LPAREN boolean RPAREN SEMICOLON
    (58) get -> . READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (62) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for READF resolved as shift
    INT             shift and go to state 9
    STR             shift and go to state 2
    BOOL            shift and go to state 10
    WHILE           shift and go to state 45
    IF              shift and go to state 54
    ID              shift and go to state 53
    WRITELN         shift and go to state 51
    READF           shift and go to state 55
    RBRACE          reduce using rule 62 (empty -> .)

  ! INT             [ reduce using rule 62 (empty -> .) ]
  ! STR             [ reduce using rule 62 (empty -> .) ]
  ! BOOL            [ reduce using rule 62 (empty -> .) ]
  ! WHILE           [ reduce using rule 62 (empty -> .) ]
  ! IF              [ reduce using rule 62 (empty -> .) ]
  ! ID              [ reduce using rule 62 (empty -> .) ]
  ! WRITELN         [ reduce using rule 62 (empty -> .) ]
  ! READF           [ reduce using rule 62 (empty -> .) ]

    get                            shift and go to state 50
    assigned                       shift and go to state 44
    print                          shift and go to state 48
    while                          shift and go to state 56
    empty                          shift and go to state 49
    variable                       shift and go to state 52
    expressions                    shift and go to state 46
    expression                     shift and go to state 57
    if                             shift and go to state 47

state 44

    (8) expression -> assigned .

    RBRACE          reduce using rule 8 (expression -> assigned .)
    INT             reduce using rule 8 (expression -> assigned .)
    STR             reduce using rule 8 (expression -> assigned .)
    BOOL            reduce using rule 8 (expression -> assigned .)
    WHILE           reduce using rule 8 (expression -> assigned .)
    IF              reduce using rule 8 (expression -> assigned .)
    ID              reduce using rule 8 (expression -> assigned .)
    WRITELN         reduce using rule 8 (expression -> assigned .)
    READF           reduce using rule 8 (expression -> assigned .)


state 45

    (12) while -> WHILE . LPAREN statement RPAREN LBRACE expressions RBRACE

    LPAREN          shift and go to state 58


state 46

    (2) function -> constants VOID MAIN LPAREN RPAREN LBRACE expressions . RBRACE constants
    (3) expressions -> expressions . expression
    (5) expression -> . variable
    (6) expression -> . while
    (7) expression -> . if
    (8) expression -> . assigned
    (9) expression -> . print
    (10) expression -> . get
    (11) expression -> . empty
    (37) variable -> . INT ID SEMICOLON
    (38) variable -> . INT ID ASSIGN NUMBER SEMICOLON
    (39) variable -> . STR ID ASSIGN STRING SEMICOLON
    (40) variable -> . STR ID SEMICOLON
    (41) variable -> . BOOL ID SEMICOLON
    (42) variable -> . BOOL ID ASSIGN boolean SEMICOLON
    (12) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (13) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (14) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expression RBRACE
    (59) assigned -> . ID ASSIGN NUMBER SEMICOLON
    (60) assigned -> . ID ASSIGN STRING SEMICOLON
    (61) assigned -> . ID ASSIGN boolean SEMICOLON
    (54) print -> . WRITELN LPAREN ID RPAREN SEMICOLON
    (55) print -> . WRITELN LPAREN STRING RPAREN SEMICOLON
    (56) print -> . WRITELN LPAREN NUMBER RPAREN SEMICOLON
    (57) print -> . WRITELN LPAREN boolean RPAREN SEMICOLON
    (58) get -> . READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (62) empty -> .

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for READF resolved as shift
    RBRACE          shift and go to state 59
    INT             shift and go to state 9
    STR             shift and go to state 2
    BOOL            shift and go to state 10
    WHILE           shift and go to state 45
    IF              shift and go to state 54
    ID              shift and go to state 53
    WRITELN         shift and go to state 51
    READF           shift and go to state 55

  ! RBRACE          [ reduce using rule 62 (empty -> .) ]
  ! INT             [ reduce using rule 62 (empty -> .) ]
  ! STR             [ reduce using rule 62 (empty -> .) ]
  ! BOOL            [ reduce using rule 62 (empty -> .) ]
  ! WHILE           [ reduce using rule 62 (empty -> .) ]
  ! IF              [ reduce using rule 62 (empty -> .) ]
  ! ID              [ reduce using rule 62 (empty -> .) ]
  ! WRITELN         [ reduce using rule 62 (empty -> .) ]
  ! READF           [ reduce using rule 62 (empty -> .) ]

    get                            shift and go to state 50
    assigned                       shift and go to state 44
    print                          shift and go to state 48
    while                          shift and go to state 56
    empty                          shift and go to state 49
    variable                       shift and go to state 52
    expression                     shift and go to state 60
    if                             shift and go to state 47

state 47

    (7) expression -> if .

    RBRACE          reduce using rule 7 (expression -> if .)
    INT             reduce using rule 7 (expression -> if .)
    STR             reduce using rule 7 (expression -> if .)
    BOOL            reduce using rule 7 (expression -> if .)
    WHILE           reduce using rule 7 (expression -> if .)
    IF              reduce using rule 7 (expression -> if .)
    ID              reduce using rule 7 (expression -> if .)
    WRITELN         reduce using rule 7 (expression -> if .)
    READF           reduce using rule 7 (expression -> if .)


state 48

    (9) expression -> print .

    RBRACE          reduce using rule 9 (expression -> print .)
    INT             reduce using rule 9 (expression -> print .)
    STR             reduce using rule 9 (expression -> print .)
    BOOL            reduce using rule 9 (expression -> print .)
    WHILE           reduce using rule 9 (expression -> print .)
    IF              reduce using rule 9 (expression -> print .)
    ID              reduce using rule 9 (expression -> print .)
    WRITELN         reduce using rule 9 (expression -> print .)
    READF           reduce using rule 9 (expression -> print .)


state 49

    (11) expression -> empty .

    RBRACE          reduce using rule 11 (expression -> empty .)
    INT             reduce using rule 11 (expression -> empty .)
    STR             reduce using rule 11 (expression -> empty .)
    BOOL            reduce using rule 11 (expression -> empty .)
    WHILE           reduce using rule 11 (expression -> empty .)
    IF              reduce using rule 11 (expression -> empty .)
    ID              reduce using rule 11 (expression -> empty .)
    WRITELN         reduce using rule 11 (expression -> empty .)
    READF           reduce using rule 11 (expression -> empty .)


state 50

    (10) expression -> get .

    RBRACE          reduce using rule 10 (expression -> get .)
    INT             reduce using rule 10 (expression -> get .)
    STR             reduce using rule 10 (expression -> get .)
    BOOL            reduce using rule 10 (expression -> get .)
    WHILE           reduce using rule 10 (expression -> get .)
    IF              reduce using rule 10 (expression -> get .)
    ID              reduce using rule 10 (expression -> get .)
    WRITELN         reduce using rule 10 (expression -> get .)
    READF           reduce using rule 10 (expression -> get .)


state 51

    (54) print -> WRITELN . LPAREN ID RPAREN SEMICOLON
    (55) print -> WRITELN . LPAREN STRING RPAREN SEMICOLON
    (56) print -> WRITELN . LPAREN NUMBER RPAREN SEMICOLON
    (57) print -> WRITELN . LPAREN boolean RPAREN SEMICOLON

    LPAREN          shift and go to state 61


state 52

    (5) expression -> variable .

    RBRACE          reduce using rule 5 (expression -> variable .)
    INT             reduce using rule 5 (expression -> variable .)
    STR             reduce using rule 5 (expression -> variable .)
    BOOL            reduce using rule 5 (expression -> variable .)
    WHILE           reduce using rule 5 (expression -> variable .)
    IF              reduce using rule 5 (expression -> variable .)
    ID              reduce using rule 5 (expression -> variable .)
    WRITELN         reduce using rule 5 (expression -> variable .)
    READF           reduce using rule 5 (expression -> variable .)


state 53

    (59) assigned -> ID . ASSIGN NUMBER SEMICOLON
    (60) assigned -> ID . ASSIGN STRING SEMICOLON
    (61) assigned -> ID . ASSIGN boolean SEMICOLON

    ASSIGN          shift and go to state 62


state 54

    (13) if -> IF . LPAREN statement RPAREN LBRACE expressions RBRACE
    (14) if -> IF . LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expression RBRACE

    LPAREN          shift and go to state 63


state 55

    (58) get -> READF . LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON

    LPAREN          shift and go to state 64


state 56

    (6) expression -> while .

    RBRACE          reduce using rule 6 (expression -> while .)
    INT             reduce using rule 6 (expression -> while .)
    STR             reduce using rule 6 (expression -> while .)
    BOOL            reduce using rule 6 (expression -> while .)
    WHILE           reduce using rule 6 (expression -> while .)
    IF              reduce using rule 6 (expression -> while .)
    ID              reduce using rule 6 (expression -> while .)
    WRITELN         reduce using rule 6 (expression -> while .)
    READF           reduce using rule 6 (expression -> while .)


state 57

    (4) expressions -> expression .

    RBRACE          reduce using rule 4 (expressions -> expression .)
    INT             reduce using rule 4 (expressions -> expression .)
    STR             reduce using rule 4 (expressions -> expression .)
    BOOL            reduce using rule 4 (expressions -> expression .)
    WHILE           reduce using rule 4 (expressions -> expression .)
    IF              reduce using rule 4 (expressions -> expression .)
    ID              reduce using rule 4 (expressions -> expression .)
    WRITELN         reduce using rule 4 (expressions -> expression .)
    READF           reduce using rule 4 (expressions -> expression .)


state 58

    (12) while -> WHILE LPAREN . statement RPAREN LBRACE expressions RBRACE
    (15) statement -> . ID EQ ID
    (16) statement -> . ID NOT_EQ ID
    (17) statement -> . ID GREATER ID
    (18) statement -> . ID GREATER_EQ ID
    (19) statement -> . ID LESS ID
    (20) statement -> . ID LESS_EQ ID
    (21) statement -> . NUMBER EQ ID
    (22) statement -> . NUMBER NOT_EQ ID
    (23) statement -> . NUMBER GREATER ID
    (24) statement -> . NUMBER GREATER_EQ ID
    (25) statement -> . NUMBER LESS ID
    (26) statement -> . NUMBER LESS_EQ ID
    (27) statement -> . ID EQ NUMBER
    (28) statement -> . ID NOT_EQ NUMBER
    (29) statement -> . ID GREATER NUMBER
    (30) statement -> . ID GREATER_EQ NUMBER
    (31) statement -> . ID LESS NUMBER
    (32) statement -> . ID LESS_EQ NUMBER
    (33) statement -> . ID EQ boolean
    (34) statement -> . ID NOT_EQ boolean
    (35) statement -> . boolean EQ ID
    (36) statement -> . boolean NOT_EQ ID
    (43) boolean -> . TRUE
    (44) boolean -> . FALSE

    ID              shift and go to state 68
    NUMBER          shift and go to state 66
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    boolean                        shift and go to state 65
    statement                      shift and go to state 67

state 59

    (2) function -> constants VOID MAIN LPAREN RPAREN LBRACE expressions RBRACE . constants
    (45) constants -> . constants constant
    (46) constants -> . constants variable
    (47) constants -> . constant
    (48) constants -> . variable
    (49) constant -> . ENUM ID ASSIGN NUMBER SEMICOLON
    (50) constant -> . ENUM ID ASSIGN STRING SEMICOLON
    (51) constant -> . ENUM ID ASSIGN boolean SEMICOLON
    (52) constant -> . ENUM ID SEMICOLON
    (53) constant -> . empty
    (37) variable -> . INT ID SEMICOLON
    (38) variable -> . INT ID ASSIGN NUMBER SEMICOLON
    (39) variable -> . STR ID ASSIGN STRING SEMICOLON
    (40) variable -> . STR ID SEMICOLON
    (41) variable -> . BOOL ID SEMICOLON
    (42) variable -> . BOOL ID ASSIGN boolean SEMICOLON
    (62) empty -> .

  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    ENUM            shift and go to state 6
    INT             shift and go to state 9
    STR             shift and go to state 2
    BOOL            shift and go to state 10
    $end            reduce using rule 62 (empty -> .)

  ! ENUM            [ reduce using rule 62 (empty -> .) ]
  ! INT             [ reduce using rule 62 (empty -> .) ]
  ! STR             [ reduce using rule 62 (empty -> .) ]
  ! BOOL            [ reduce using rule 62 (empty -> .) ]

    constant                       shift and go to state 1
    constants                      shift and go to state 69
    variable                       shift and go to state 7
    empty                          shift and go to state 4

state 60

    (3) expressions -> expressions expression .

    RBRACE          reduce using rule 3 (expressions -> expressions expression .)
    INT             reduce using rule 3 (expressions -> expressions expression .)
    STR             reduce using rule 3 (expressions -> expressions expression .)
    BOOL            reduce using rule 3 (expressions -> expressions expression .)
    WHILE           reduce using rule 3 (expressions -> expressions expression .)
    IF              reduce using rule 3 (expressions -> expressions expression .)
    ID              reduce using rule 3 (expressions -> expressions expression .)
    WRITELN         reduce using rule 3 (expressions -> expressions expression .)
    READF           reduce using rule 3 (expressions -> expressions expression .)


state 61

    (54) print -> WRITELN LPAREN . ID RPAREN SEMICOLON
    (55) print -> WRITELN LPAREN . STRING RPAREN SEMICOLON
    (56) print -> WRITELN LPAREN . NUMBER RPAREN SEMICOLON
    (57) print -> WRITELN LPAREN . boolean RPAREN SEMICOLON
    (43) boolean -> . TRUE
    (44) boolean -> . FALSE

    ID              shift and go to state 73
    STRING          shift and go to state 70
    NUMBER          shift and go to state 71
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    boolean                        shift and go to state 72

state 62

    (59) assigned -> ID ASSIGN . NUMBER SEMICOLON
    (60) assigned -> ID ASSIGN . STRING SEMICOLON
    (61) assigned -> ID ASSIGN . boolean SEMICOLON
    (43) boolean -> . TRUE
    (44) boolean -> . FALSE

    NUMBER          shift and go to state 75
    STRING          shift and go to state 74
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    boolean                        shift and go to state 76

state 63

    (13) if -> IF LPAREN . statement RPAREN LBRACE expressions RBRACE
    (14) if -> IF LPAREN . statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expression RBRACE
    (15) statement -> . ID EQ ID
    (16) statement -> . ID NOT_EQ ID
    (17) statement -> . ID GREATER ID
    (18) statement -> . ID GREATER_EQ ID
    (19) statement -> . ID LESS ID
    (20) statement -> . ID LESS_EQ ID
    (21) statement -> . NUMBER EQ ID
    (22) statement -> . NUMBER NOT_EQ ID
    (23) statement -> . NUMBER GREATER ID
    (24) statement -> . NUMBER GREATER_EQ ID
    (25) statement -> . NUMBER LESS ID
    (26) statement -> . NUMBER LESS_EQ ID
    (27) statement -> . ID EQ NUMBER
    (28) statement -> . ID NOT_EQ NUMBER
    (29) statement -> . ID GREATER NUMBER
    (30) statement -> . ID GREATER_EQ NUMBER
    (31) statement -> . ID LESS NUMBER
    (32) statement -> . ID LESS_EQ NUMBER
    (33) statement -> . ID EQ boolean
    (34) statement -> . ID NOT_EQ boolean
    (35) statement -> . boolean EQ ID
    (36) statement -> . boolean NOT_EQ ID
    (43) boolean -> . TRUE
    (44) boolean -> . FALSE

    ID              shift and go to state 68
    NUMBER          shift and go to state 66
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    boolean                        shift and go to state 65
    statement                      shift and go to state 77

state 64

    (58) get -> READF LPAREN . STRING COMMA AMPERSAND ID RPAREN SEMICOLON

    STRING          shift and go to state 78


state 65

    (35) statement -> boolean . EQ ID
    (36) statement -> boolean . NOT_EQ ID

    EQ              shift and go to state 80
    NOT_EQ          shift and go to state 79


state 66

    (21) statement -> NUMBER . EQ ID
    (22) statement -> NUMBER . NOT_EQ ID
    (23) statement -> NUMBER . GREATER ID
    (24) statement -> NUMBER . GREATER_EQ ID
    (25) statement -> NUMBER . LESS ID
    (26) statement -> NUMBER . LESS_EQ ID

    EQ              shift and go to state 86
    NOT_EQ          shift and go to state 85
    GREATER         shift and go to state 82
    GREATER_EQ      shift and go to state 84
    LESS            shift and go to state 83
    LESS_EQ         shift and go to state 81


state 67

    (12) while -> WHILE LPAREN statement . RPAREN LBRACE expressions RBRACE

    RPAREN          shift and go to state 87


state 68

    (15) statement -> ID . EQ ID
    (16) statement -> ID . NOT_EQ ID
    (17) statement -> ID . GREATER ID
    (18) statement -> ID . GREATER_EQ ID
    (19) statement -> ID . LESS ID
    (20) statement -> ID . LESS_EQ ID
    (27) statement -> ID . EQ NUMBER
    (28) statement -> ID . NOT_EQ NUMBER
    (29) statement -> ID . GREATER NUMBER
    (30) statement -> ID . GREATER_EQ NUMBER
    (31) statement -> ID . LESS NUMBER
    (32) statement -> ID . LESS_EQ NUMBER
    (33) statement -> ID . EQ boolean
    (34) statement -> ID . NOT_EQ boolean

    EQ              shift and go to state 93
    NOT_EQ          shift and go to state 92
    GREATER         shift and go to state 89
    GREATER_EQ      shift and go to state 91
    LESS            shift and go to state 90
    LESS_EQ         shift and go to state 88


state 69

    (2) function -> constants VOID MAIN LPAREN RPAREN LBRACE expressions RBRACE constants .
    (45) constants -> constants . constant
    (46) constants -> constants . variable
    (49) constant -> . ENUM ID ASSIGN NUMBER SEMICOLON
    (50) constant -> . ENUM ID ASSIGN STRING SEMICOLON
    (51) constant -> . ENUM ID ASSIGN boolean SEMICOLON
    (52) constant -> . ENUM ID SEMICOLON
    (53) constant -> . empty
    (37) variable -> . INT ID SEMICOLON
    (38) variable -> . INT ID ASSIGN NUMBER SEMICOLON
    (39) variable -> . STR ID ASSIGN STRING SEMICOLON
    (40) variable -> . STR ID SEMICOLON
    (41) variable -> . BOOL ID SEMICOLON
    (42) variable -> . BOOL ID ASSIGN boolean SEMICOLON
    (62) empty -> .

  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 2 (function -> constants VOID MAIN LPAREN RPAREN LBRACE expressions RBRACE constants .)
    $end            reduce using rule 2 (function -> constants VOID MAIN LPAREN RPAREN LBRACE expressions RBRACE constants .)
    ENUM            shift and go to state 6
    INT             shift and go to state 9
    STR             shift and go to state 2
    BOOL            shift and go to state 10

  ! ENUM            [ reduce using rule 62 (empty -> .) ]
  ! INT             [ reduce using rule 62 (empty -> .) ]
  ! STR             [ reduce using rule 62 (empty -> .) ]
  ! BOOL            [ reduce using rule 62 (empty -> .) ]
  ! $end            [ reduce using rule 62 (empty -> .) ]

    constant                       shift and go to state 15
    variable                       shift and go to state 14
    empty                          shift and go to state 4

state 70

    (55) print -> WRITELN LPAREN STRING . RPAREN SEMICOLON

    RPAREN          shift and go to state 94


state 71

    (56) print -> WRITELN LPAREN NUMBER . RPAREN SEMICOLON

    RPAREN          shift and go to state 95


state 72

    (57) print -> WRITELN LPAREN boolean . RPAREN SEMICOLON

    RPAREN          shift and go to state 96


state 73

    (54) print -> WRITELN LPAREN ID . RPAREN SEMICOLON

    RPAREN          shift and go to state 97


state 74

    (60) assigned -> ID ASSIGN STRING . SEMICOLON

    SEMICOLON       shift and go to state 98


state 75

    (59) assigned -> ID ASSIGN NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 99


state 76

    (61) assigned -> ID ASSIGN boolean . SEMICOLON

    SEMICOLON       shift and go to state 100


state 77

    (13) if -> IF LPAREN statement . RPAREN LBRACE expressions RBRACE
    (14) if -> IF LPAREN statement . RPAREN LBRACE expressions RBRACE ELSE LBRACE expression RBRACE

    RPAREN          shift and go to state 101


state 78

    (58) get -> READF LPAREN STRING . COMMA AMPERSAND ID RPAREN SEMICOLON

    COMMA           shift and go to state 102


state 79

    (36) statement -> boolean NOT_EQ . ID

    ID              shift and go to state 103


state 80

    (35) statement -> boolean EQ . ID

    ID              shift and go to state 104


state 81

    (26) statement -> NUMBER LESS_EQ . ID

    ID              shift and go to state 105


state 82

    (23) statement -> NUMBER GREATER . ID

    ID              shift and go to state 106


state 83

    (25) statement -> NUMBER LESS . ID

    ID              shift and go to state 107


state 84

    (24) statement -> NUMBER GREATER_EQ . ID

    ID              shift and go to state 108


state 85

    (22) statement -> NUMBER NOT_EQ . ID

    ID              shift and go to state 109


state 86

    (21) statement -> NUMBER EQ . ID

    ID              shift and go to state 110


state 87

    (12) while -> WHILE LPAREN statement RPAREN . LBRACE expressions RBRACE

    LBRACE          shift and go to state 111


state 88

    (20) statement -> ID LESS_EQ . ID
    (32) statement -> ID LESS_EQ . NUMBER

    ID              shift and go to state 112
    NUMBER          shift and go to state 113


state 89

    (17) statement -> ID GREATER . ID
    (29) statement -> ID GREATER . NUMBER

    ID              shift and go to state 115
    NUMBER          shift and go to state 114


state 90

    (19) statement -> ID LESS . ID
    (31) statement -> ID LESS . NUMBER

    ID              shift and go to state 117
    NUMBER          shift and go to state 116


state 91

    (18) statement -> ID GREATER_EQ . ID
    (30) statement -> ID GREATER_EQ . NUMBER

    ID              shift and go to state 118
    NUMBER          shift and go to state 119


state 92

    (16) statement -> ID NOT_EQ . ID
    (28) statement -> ID NOT_EQ . NUMBER
    (34) statement -> ID NOT_EQ . boolean
    (43) boolean -> . TRUE
    (44) boolean -> . FALSE

    ID              shift and go to state 122
    NUMBER          shift and go to state 120
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    boolean                        shift and go to state 121

state 93

    (15) statement -> ID EQ . ID
    (27) statement -> ID EQ . NUMBER
    (33) statement -> ID EQ . boolean
    (43) boolean -> . TRUE
    (44) boolean -> . FALSE

    ID              shift and go to state 125
    NUMBER          shift and go to state 123
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    boolean                        shift and go to state 124

state 94

    (55) print -> WRITELN LPAREN STRING RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 126


state 95

    (56) print -> WRITELN LPAREN NUMBER RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 127


state 96

    (57) print -> WRITELN LPAREN boolean RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 128


state 97

    (54) print -> WRITELN LPAREN ID RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 129


state 98

    (60) assigned -> ID ASSIGN STRING SEMICOLON .

    RBRACE          reduce using rule 60 (assigned -> ID ASSIGN STRING SEMICOLON .)
    INT             reduce using rule 60 (assigned -> ID ASSIGN STRING SEMICOLON .)
    STR             reduce using rule 60 (assigned -> ID ASSIGN STRING SEMICOLON .)
    BOOL            reduce using rule 60 (assigned -> ID ASSIGN STRING SEMICOLON .)
    WHILE           reduce using rule 60 (assigned -> ID ASSIGN STRING SEMICOLON .)
    IF              reduce using rule 60 (assigned -> ID ASSIGN STRING SEMICOLON .)
    ID              reduce using rule 60 (assigned -> ID ASSIGN STRING SEMICOLON .)
    WRITELN         reduce using rule 60 (assigned -> ID ASSIGN STRING SEMICOLON .)
    READF           reduce using rule 60 (assigned -> ID ASSIGN STRING SEMICOLON .)


state 99

    (59) assigned -> ID ASSIGN NUMBER SEMICOLON .

    RBRACE          reduce using rule 59 (assigned -> ID ASSIGN NUMBER SEMICOLON .)
    INT             reduce using rule 59 (assigned -> ID ASSIGN NUMBER SEMICOLON .)
    STR             reduce using rule 59 (assigned -> ID ASSIGN NUMBER SEMICOLON .)
    BOOL            reduce using rule 59 (assigned -> ID ASSIGN NUMBER SEMICOLON .)
    WHILE           reduce using rule 59 (assigned -> ID ASSIGN NUMBER SEMICOLON .)
    IF              reduce using rule 59 (assigned -> ID ASSIGN NUMBER SEMICOLON .)
    ID              reduce using rule 59 (assigned -> ID ASSIGN NUMBER SEMICOLON .)
    WRITELN         reduce using rule 59 (assigned -> ID ASSIGN NUMBER SEMICOLON .)
    READF           reduce using rule 59 (assigned -> ID ASSIGN NUMBER SEMICOLON .)


state 100

    (61) assigned -> ID ASSIGN boolean SEMICOLON .

    RBRACE          reduce using rule 61 (assigned -> ID ASSIGN boolean SEMICOLON .)
    INT             reduce using rule 61 (assigned -> ID ASSIGN boolean SEMICOLON .)
    STR             reduce using rule 61 (assigned -> ID ASSIGN boolean SEMICOLON .)
    BOOL            reduce using rule 61 (assigned -> ID ASSIGN boolean SEMICOLON .)
    WHILE           reduce using rule 61 (assigned -> ID ASSIGN boolean SEMICOLON .)
    IF              reduce using rule 61 (assigned -> ID ASSIGN boolean SEMICOLON .)
    ID              reduce using rule 61 (assigned -> ID ASSIGN boolean SEMICOLON .)
    WRITELN         reduce using rule 61 (assigned -> ID ASSIGN boolean SEMICOLON .)
    READF           reduce using rule 61 (assigned -> ID ASSIGN boolean SEMICOLON .)


state 101

    (13) if -> IF LPAREN statement RPAREN . LBRACE expressions RBRACE
    (14) if -> IF LPAREN statement RPAREN . LBRACE expressions RBRACE ELSE LBRACE expression RBRACE

    LBRACE          shift and go to state 130


state 102

    (58) get -> READF LPAREN STRING COMMA . AMPERSAND ID RPAREN SEMICOLON

    AMPERSAND       shift and go to state 131


state 103

    (36) statement -> boolean NOT_EQ ID .

    RPAREN          reduce using rule 36 (statement -> boolean NOT_EQ ID .)


state 104

    (35) statement -> boolean EQ ID .

    RPAREN          reduce using rule 35 (statement -> boolean EQ ID .)


state 105

    (26) statement -> NUMBER LESS_EQ ID .

    RPAREN          reduce using rule 26 (statement -> NUMBER LESS_EQ ID .)


state 106

    (23) statement -> NUMBER GREATER ID .

    RPAREN          reduce using rule 23 (statement -> NUMBER GREATER ID .)


state 107

    (25) statement -> NUMBER LESS ID .

    RPAREN          reduce using rule 25 (statement -> NUMBER LESS ID .)


state 108

    (24) statement -> NUMBER GREATER_EQ ID .

    RPAREN          reduce using rule 24 (statement -> NUMBER GREATER_EQ ID .)


state 109

    (22) statement -> NUMBER NOT_EQ ID .

    RPAREN          reduce using rule 22 (statement -> NUMBER NOT_EQ ID .)


state 110

    (21) statement -> NUMBER EQ ID .

    RPAREN          reduce using rule 21 (statement -> NUMBER EQ ID .)


state 111

    (12) while -> WHILE LPAREN statement RPAREN LBRACE . expressions RBRACE
    (3) expressions -> . expressions expression
    (4) expressions -> . expression
    (5) expression -> . variable
    (6) expression -> . while
    (7) expression -> . if
    (8) expression -> . assigned
    (9) expression -> . print
    (10) expression -> . get
    (11) expression -> . empty
    (37) variable -> . INT ID SEMICOLON
    (38) variable -> . INT ID ASSIGN NUMBER SEMICOLON
    (39) variable -> . STR ID ASSIGN STRING SEMICOLON
    (40) variable -> . STR ID SEMICOLON
    (41) variable -> . BOOL ID SEMICOLON
    (42) variable -> . BOOL ID ASSIGN boolean SEMICOLON
    (12) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (13) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (14) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expression RBRACE
    (59) assigned -> . ID ASSIGN NUMBER SEMICOLON
    (60) assigned -> . ID ASSIGN STRING SEMICOLON
    (61) assigned -> . ID ASSIGN boolean SEMICOLON
    (54) print -> . WRITELN LPAREN ID RPAREN SEMICOLON
    (55) print -> . WRITELN LPAREN STRING RPAREN SEMICOLON
    (56) print -> . WRITELN LPAREN NUMBER RPAREN SEMICOLON
    (57) print -> . WRITELN LPAREN boolean RPAREN SEMICOLON
    (58) get -> . READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (62) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for READF resolved as shift
    INT             shift and go to state 9
    STR             shift and go to state 2
    BOOL            shift and go to state 10
    WHILE           shift and go to state 45
    IF              shift and go to state 54
    ID              shift and go to state 53
    WRITELN         shift and go to state 51
    READF           shift and go to state 55
    RBRACE          reduce using rule 62 (empty -> .)

  ! INT             [ reduce using rule 62 (empty -> .) ]
  ! STR             [ reduce using rule 62 (empty -> .) ]
  ! BOOL            [ reduce using rule 62 (empty -> .) ]
  ! WHILE           [ reduce using rule 62 (empty -> .) ]
  ! IF              [ reduce using rule 62 (empty -> .) ]
  ! ID              [ reduce using rule 62 (empty -> .) ]
  ! WRITELN         [ reduce using rule 62 (empty -> .) ]
  ! READF           [ reduce using rule 62 (empty -> .) ]

    get                            shift and go to state 50
    assigned                       shift and go to state 44
    print                          shift and go to state 48
    while                          shift and go to state 56
    variable                       shift and go to state 52
    expressions                    shift and go to state 132
    expression                     shift and go to state 57
    empty                          shift and go to state 49
    if                             shift and go to state 47

state 112

    (20) statement -> ID LESS_EQ ID .

    RPAREN          reduce using rule 20 (statement -> ID LESS_EQ ID .)


state 113

    (32) statement -> ID LESS_EQ NUMBER .

    RPAREN          reduce using rule 32 (statement -> ID LESS_EQ NUMBER .)


state 114

    (29) statement -> ID GREATER NUMBER .

    RPAREN          reduce using rule 29 (statement -> ID GREATER NUMBER .)


state 115

    (17) statement -> ID GREATER ID .

    RPAREN          reduce using rule 17 (statement -> ID GREATER ID .)


state 116

    (31) statement -> ID LESS NUMBER .

    RPAREN          reduce using rule 31 (statement -> ID LESS NUMBER .)


state 117

    (19) statement -> ID LESS ID .

    RPAREN          reduce using rule 19 (statement -> ID LESS ID .)


state 118

    (18) statement -> ID GREATER_EQ ID .

    RPAREN          reduce using rule 18 (statement -> ID GREATER_EQ ID .)


state 119

    (30) statement -> ID GREATER_EQ NUMBER .

    RPAREN          reduce using rule 30 (statement -> ID GREATER_EQ NUMBER .)


state 120

    (28) statement -> ID NOT_EQ NUMBER .

    RPAREN          reduce using rule 28 (statement -> ID NOT_EQ NUMBER .)


state 121

    (34) statement -> ID NOT_EQ boolean .

    RPAREN          reduce using rule 34 (statement -> ID NOT_EQ boolean .)


state 122

    (16) statement -> ID NOT_EQ ID .

    RPAREN          reduce using rule 16 (statement -> ID NOT_EQ ID .)


state 123

    (27) statement -> ID EQ NUMBER .

    RPAREN          reduce using rule 27 (statement -> ID EQ NUMBER .)


state 124

    (33) statement -> ID EQ boolean .

    RPAREN          reduce using rule 33 (statement -> ID EQ boolean .)


state 125

    (15) statement -> ID EQ ID .

    RPAREN          reduce using rule 15 (statement -> ID EQ ID .)


state 126

    (55) print -> WRITELN LPAREN STRING RPAREN SEMICOLON .

    RBRACE          reduce using rule 55 (print -> WRITELN LPAREN STRING RPAREN SEMICOLON .)
    INT             reduce using rule 55 (print -> WRITELN LPAREN STRING RPAREN SEMICOLON .)
    STR             reduce using rule 55 (print -> WRITELN LPAREN STRING RPAREN SEMICOLON .)
    BOOL            reduce using rule 55 (print -> WRITELN LPAREN STRING RPAREN SEMICOLON .)
    WHILE           reduce using rule 55 (print -> WRITELN LPAREN STRING RPAREN SEMICOLON .)
    IF              reduce using rule 55 (print -> WRITELN LPAREN STRING RPAREN SEMICOLON .)
    ID              reduce using rule 55 (print -> WRITELN LPAREN STRING RPAREN SEMICOLON .)
    WRITELN         reduce using rule 55 (print -> WRITELN LPAREN STRING RPAREN SEMICOLON .)
    READF           reduce using rule 55 (print -> WRITELN LPAREN STRING RPAREN SEMICOLON .)


state 127

    (56) print -> WRITELN LPAREN NUMBER RPAREN SEMICOLON .

    RBRACE          reduce using rule 56 (print -> WRITELN LPAREN NUMBER RPAREN SEMICOLON .)
    INT             reduce using rule 56 (print -> WRITELN LPAREN NUMBER RPAREN SEMICOLON .)
    STR             reduce using rule 56 (print -> WRITELN LPAREN NUMBER RPAREN SEMICOLON .)
    BOOL            reduce using rule 56 (print -> WRITELN LPAREN NUMBER RPAREN SEMICOLON .)
    WHILE           reduce using rule 56 (print -> WRITELN LPAREN NUMBER RPAREN SEMICOLON .)
    IF              reduce using rule 56 (print -> WRITELN LPAREN NUMBER RPAREN SEMICOLON .)
    ID              reduce using rule 56 (print -> WRITELN LPAREN NUMBER RPAREN SEMICOLON .)
    WRITELN         reduce using rule 56 (print -> WRITELN LPAREN NUMBER RPAREN SEMICOLON .)
    READF           reduce using rule 56 (print -> WRITELN LPAREN NUMBER RPAREN SEMICOLON .)


state 128

    (57) print -> WRITELN LPAREN boolean RPAREN SEMICOLON .

    RBRACE          reduce using rule 57 (print -> WRITELN LPAREN boolean RPAREN SEMICOLON .)
    INT             reduce using rule 57 (print -> WRITELN LPAREN boolean RPAREN SEMICOLON .)
    STR             reduce using rule 57 (print -> WRITELN LPAREN boolean RPAREN SEMICOLON .)
    BOOL            reduce using rule 57 (print -> WRITELN LPAREN boolean RPAREN SEMICOLON .)
    WHILE           reduce using rule 57 (print -> WRITELN LPAREN boolean RPAREN SEMICOLON .)
    IF              reduce using rule 57 (print -> WRITELN LPAREN boolean RPAREN SEMICOLON .)
    ID              reduce using rule 57 (print -> WRITELN LPAREN boolean RPAREN SEMICOLON .)
    WRITELN         reduce using rule 57 (print -> WRITELN LPAREN boolean RPAREN SEMICOLON .)
    READF           reduce using rule 57 (print -> WRITELN LPAREN boolean RPAREN SEMICOLON .)


state 129

    (54) print -> WRITELN LPAREN ID RPAREN SEMICOLON .

    RBRACE          reduce using rule 54 (print -> WRITELN LPAREN ID RPAREN SEMICOLON .)
    INT             reduce using rule 54 (print -> WRITELN LPAREN ID RPAREN SEMICOLON .)
    STR             reduce using rule 54 (print -> WRITELN LPAREN ID RPAREN SEMICOLON .)
    BOOL            reduce using rule 54 (print -> WRITELN LPAREN ID RPAREN SEMICOLON .)
    WHILE           reduce using rule 54 (print -> WRITELN LPAREN ID RPAREN SEMICOLON .)
    IF              reduce using rule 54 (print -> WRITELN LPAREN ID RPAREN SEMICOLON .)
    ID              reduce using rule 54 (print -> WRITELN LPAREN ID RPAREN SEMICOLON .)
    WRITELN         reduce using rule 54 (print -> WRITELN LPAREN ID RPAREN SEMICOLON .)
    READF           reduce using rule 54 (print -> WRITELN LPAREN ID RPAREN SEMICOLON .)


state 130

    (13) if -> IF LPAREN statement RPAREN LBRACE . expressions RBRACE
    (14) if -> IF LPAREN statement RPAREN LBRACE . expressions RBRACE ELSE LBRACE expression RBRACE
    (3) expressions -> . expressions expression
    (4) expressions -> . expression
    (5) expression -> . variable
    (6) expression -> . while
    (7) expression -> . if
    (8) expression -> . assigned
    (9) expression -> . print
    (10) expression -> . get
    (11) expression -> . empty
    (37) variable -> . INT ID SEMICOLON
    (38) variable -> . INT ID ASSIGN NUMBER SEMICOLON
    (39) variable -> . STR ID ASSIGN STRING SEMICOLON
    (40) variable -> . STR ID SEMICOLON
    (41) variable -> . BOOL ID SEMICOLON
    (42) variable -> . BOOL ID ASSIGN boolean SEMICOLON
    (12) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (13) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (14) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expression RBRACE
    (59) assigned -> . ID ASSIGN NUMBER SEMICOLON
    (60) assigned -> . ID ASSIGN STRING SEMICOLON
    (61) assigned -> . ID ASSIGN boolean SEMICOLON
    (54) print -> . WRITELN LPAREN ID RPAREN SEMICOLON
    (55) print -> . WRITELN LPAREN STRING RPAREN SEMICOLON
    (56) print -> . WRITELN LPAREN NUMBER RPAREN SEMICOLON
    (57) print -> . WRITELN LPAREN boolean RPAREN SEMICOLON
    (58) get -> . READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (62) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for READF resolved as shift
    INT             shift and go to state 9
    STR             shift and go to state 2
    BOOL            shift and go to state 10
    WHILE           shift and go to state 45
    IF              shift and go to state 54
    ID              shift and go to state 53
    WRITELN         shift and go to state 51
    READF           shift and go to state 55
    RBRACE          reduce using rule 62 (empty -> .)

  ! INT             [ reduce using rule 62 (empty -> .) ]
  ! STR             [ reduce using rule 62 (empty -> .) ]
  ! BOOL            [ reduce using rule 62 (empty -> .) ]
  ! WHILE           [ reduce using rule 62 (empty -> .) ]
  ! IF              [ reduce using rule 62 (empty -> .) ]
  ! ID              [ reduce using rule 62 (empty -> .) ]
  ! WRITELN         [ reduce using rule 62 (empty -> .) ]
  ! READF           [ reduce using rule 62 (empty -> .) ]

    get                            shift and go to state 50
    assigned                       shift and go to state 44
    print                          shift and go to state 48
    while                          shift and go to state 56
    variable                       shift and go to state 52
    expressions                    shift and go to state 133
    expression                     shift and go to state 57
    empty                          shift and go to state 49
    if                             shift and go to state 47

state 131

    (58) get -> READF LPAREN STRING COMMA AMPERSAND . ID RPAREN SEMICOLON

    ID              shift and go to state 134


state 132

    (12) while -> WHILE LPAREN statement RPAREN LBRACE expressions . RBRACE
    (3) expressions -> expressions . expression
    (5) expression -> . variable
    (6) expression -> . while
    (7) expression -> . if
    (8) expression -> . assigned
    (9) expression -> . print
    (10) expression -> . get
    (11) expression -> . empty
    (37) variable -> . INT ID SEMICOLON
    (38) variable -> . INT ID ASSIGN NUMBER SEMICOLON
    (39) variable -> . STR ID ASSIGN STRING SEMICOLON
    (40) variable -> . STR ID SEMICOLON
    (41) variable -> . BOOL ID SEMICOLON
    (42) variable -> . BOOL ID ASSIGN boolean SEMICOLON
    (12) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (13) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (14) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expression RBRACE
    (59) assigned -> . ID ASSIGN NUMBER SEMICOLON
    (60) assigned -> . ID ASSIGN STRING SEMICOLON
    (61) assigned -> . ID ASSIGN boolean SEMICOLON
    (54) print -> . WRITELN LPAREN ID RPAREN SEMICOLON
    (55) print -> . WRITELN LPAREN STRING RPAREN SEMICOLON
    (56) print -> . WRITELN LPAREN NUMBER RPAREN SEMICOLON
    (57) print -> . WRITELN LPAREN boolean RPAREN SEMICOLON
    (58) get -> . READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (62) empty -> .

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for READF resolved as shift
    RBRACE          shift and go to state 135
    INT             shift and go to state 9
    STR             shift and go to state 2
    BOOL            shift and go to state 10
    WHILE           shift and go to state 45
    IF              shift and go to state 54
    ID              shift and go to state 53
    WRITELN         shift and go to state 51
    READF           shift and go to state 55

  ! RBRACE          [ reduce using rule 62 (empty -> .) ]
  ! INT             [ reduce using rule 62 (empty -> .) ]
  ! STR             [ reduce using rule 62 (empty -> .) ]
  ! BOOL            [ reduce using rule 62 (empty -> .) ]
  ! WHILE           [ reduce using rule 62 (empty -> .) ]
  ! IF              [ reduce using rule 62 (empty -> .) ]
  ! ID              [ reduce using rule 62 (empty -> .) ]
  ! WRITELN         [ reduce using rule 62 (empty -> .) ]
  ! READF           [ reduce using rule 62 (empty -> .) ]

    get                            shift and go to state 50
    assigned                       shift and go to state 44
    print                          shift and go to state 48
    while                          shift and go to state 56
    variable                       shift and go to state 52
    expression                     shift and go to state 60
    empty                          shift and go to state 49
    if                             shift and go to state 47

state 133

    (13) if -> IF LPAREN statement RPAREN LBRACE expressions . RBRACE
    (14) if -> IF LPAREN statement RPAREN LBRACE expressions . RBRACE ELSE LBRACE expression RBRACE
    (3) expressions -> expressions . expression
    (5) expression -> . variable
    (6) expression -> . while
    (7) expression -> . if
    (8) expression -> . assigned
    (9) expression -> . print
    (10) expression -> . get
    (11) expression -> . empty
    (37) variable -> . INT ID SEMICOLON
    (38) variable -> . INT ID ASSIGN NUMBER SEMICOLON
    (39) variable -> . STR ID ASSIGN STRING SEMICOLON
    (40) variable -> . STR ID SEMICOLON
    (41) variable -> . BOOL ID SEMICOLON
    (42) variable -> . BOOL ID ASSIGN boolean SEMICOLON
    (12) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (13) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (14) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expression RBRACE
    (59) assigned -> . ID ASSIGN NUMBER SEMICOLON
    (60) assigned -> . ID ASSIGN STRING SEMICOLON
    (61) assigned -> . ID ASSIGN boolean SEMICOLON
    (54) print -> . WRITELN LPAREN ID RPAREN SEMICOLON
    (55) print -> . WRITELN LPAREN STRING RPAREN SEMICOLON
    (56) print -> . WRITELN LPAREN NUMBER RPAREN SEMICOLON
    (57) print -> . WRITELN LPAREN boolean RPAREN SEMICOLON
    (58) get -> . READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (62) empty -> .

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WRITELN resolved as shift
  ! shift/reduce conflict for READF resolved as shift
    RBRACE          shift and go to state 136
    INT             shift and go to state 9
    STR             shift and go to state 2
    BOOL            shift and go to state 10
    WHILE           shift and go to state 45
    IF              shift and go to state 54
    ID              shift and go to state 53
    WRITELN         shift and go to state 51
    READF           shift and go to state 55

  ! RBRACE          [ reduce using rule 62 (empty -> .) ]
  ! INT             [ reduce using rule 62 (empty -> .) ]
  ! STR             [ reduce using rule 62 (empty -> .) ]
  ! BOOL            [ reduce using rule 62 (empty -> .) ]
  ! WHILE           [ reduce using rule 62 (empty -> .) ]
  ! IF              [ reduce using rule 62 (empty -> .) ]
  ! ID              [ reduce using rule 62 (empty -> .) ]
  ! WRITELN         [ reduce using rule 62 (empty -> .) ]
  ! READF           [ reduce using rule 62 (empty -> .) ]

    get                            shift and go to state 50
    assigned                       shift and go to state 44
    print                          shift and go to state 48
    while                          shift and go to state 56
    variable                       shift and go to state 52
    expression                     shift and go to state 60
    empty                          shift and go to state 49
    if                             shift and go to state 47

state 134

    (58) get -> READF LPAREN STRING COMMA AMPERSAND ID . RPAREN SEMICOLON

    RPAREN          shift and go to state 137


state 135

    (12) while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .

    RBRACE          reduce using rule 12 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    INT             reduce using rule 12 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    STR             reduce using rule 12 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    BOOL            reduce using rule 12 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    WHILE           reduce using rule 12 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    IF              reduce using rule 12 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    ID              reduce using rule 12 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    WRITELN         reduce using rule 12 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)
    READF           reduce using rule 12 (while -> WHILE LPAREN statement RPAREN LBRACE expressions RBRACE .)


state 136

    (13) if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .
    (14) if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE . ELSE LBRACE expression RBRACE

    RBRACE          reduce using rule 13 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    INT             reduce using rule 13 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    STR             reduce using rule 13 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    BOOL            reduce using rule 13 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    WHILE           reduce using rule 13 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    IF              reduce using rule 13 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    ID              reduce using rule 13 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    WRITELN         reduce using rule 13 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    READF           reduce using rule 13 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE .)
    ELSE            shift and go to state 138


state 137

    (58) get -> READF LPAREN STRING COMMA AMPERSAND ID RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 139


state 138

    (14) if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE . LBRACE expression RBRACE

    LBRACE          shift and go to state 140


state 139

    (58) get -> READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .

    RBRACE          reduce using rule 58 (get -> READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    INT             reduce using rule 58 (get -> READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    STR             reduce using rule 58 (get -> READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    BOOL            reduce using rule 58 (get -> READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    WHILE           reduce using rule 58 (get -> READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    IF              reduce using rule 58 (get -> READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    ID              reduce using rule 58 (get -> READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    WRITELN         reduce using rule 58 (get -> READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    READF           reduce using rule 58 (get -> READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)


state 140

    (14) if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE . expression RBRACE
    (5) expression -> . variable
    (6) expression -> . while
    (7) expression -> . if
    (8) expression -> . assigned
    (9) expression -> . print
    (10) expression -> . get
    (11) expression -> . empty
    (37) variable -> . INT ID SEMICOLON
    (38) variable -> . INT ID ASSIGN NUMBER SEMICOLON
    (39) variable -> . STR ID ASSIGN STRING SEMICOLON
    (40) variable -> . STR ID SEMICOLON
    (41) variable -> . BOOL ID SEMICOLON
    (42) variable -> . BOOL ID ASSIGN boolean SEMICOLON
    (12) while -> . WHILE LPAREN statement RPAREN LBRACE expressions RBRACE
    (13) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE
    (14) if -> . IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expression RBRACE
    (59) assigned -> . ID ASSIGN NUMBER SEMICOLON
    (60) assigned -> . ID ASSIGN STRING SEMICOLON
    (61) assigned -> . ID ASSIGN boolean SEMICOLON
    (54) print -> . WRITELN LPAREN ID RPAREN SEMICOLON
    (55) print -> . WRITELN LPAREN STRING RPAREN SEMICOLON
    (56) print -> . WRITELN LPAREN NUMBER RPAREN SEMICOLON
    (57) print -> . WRITELN LPAREN boolean RPAREN SEMICOLON
    (58) get -> . READF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (62) empty -> .

    INT             shift and go to state 9
    STR             shift and go to state 2
    BOOL            shift and go to state 10
    WHILE           shift and go to state 45
    IF              shift and go to state 54
    ID              shift and go to state 53
    WRITELN         shift and go to state 51
    READF           shift and go to state 55
    RBRACE          reduce using rule 62 (empty -> .)

    get                            shift and go to state 50
    assigned                       shift and go to state 44
    print                          shift and go to state 48
    while                          shift and go to state 56
    variable                       shift and go to state 52
    expression                     shift and go to state 141
    empty                          shift and go to state 49
    if                             shift and go to state 47

state 141

    (14) if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expression . RBRACE

    RBRACE          shift and go to state 142


state 142

    (14) if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expression RBRACE .

    RBRACE          reduce using rule 14 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expression RBRACE .)
    INT             reduce using rule 14 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expression RBRACE .)
    STR             reduce using rule 14 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expression RBRACE .)
    BOOL            reduce using rule 14 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expression RBRACE .)
    WHILE           reduce using rule 14 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expression RBRACE .)
    IF              reduce using rule 14 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expression RBRACE .)
    ID              reduce using rule 14 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expression RBRACE .)
    WRITELN         reduce using rule 14 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expression RBRACE .)
    READF           reduce using rule 14 (if -> IF LPAREN statement RPAREN LBRACE expressions RBRACE ELSE LBRACE expression RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ENUM in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for STR in state 0 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 0 resolved as shift
WARNING: shift/reduce conflict for VOID in state 8 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 8 resolved as shift
WARNING: shift/reduce conflict for INT in state 8 resolved as shift
WARNING: shift/reduce conflict for STR in state 8 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 8 resolved as shift
WARNING: shift/reduce conflict for INT in state 43 resolved as shift
WARNING: shift/reduce conflict for STR in state 43 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 43 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 43 resolved as shift
WARNING: shift/reduce conflict for IF in state 43 resolved as shift
WARNING: shift/reduce conflict for ID in state 43 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 43 resolved as shift
WARNING: shift/reduce conflict for READF in state 43 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 46 resolved as shift
WARNING: shift/reduce conflict for INT in state 46 resolved as shift
WARNING: shift/reduce conflict for STR in state 46 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 46 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 46 resolved as shift
WARNING: shift/reduce conflict for IF in state 46 resolved as shift
WARNING: shift/reduce conflict for ID in state 46 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 46 resolved as shift
WARNING: shift/reduce conflict for READF in state 46 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 59 resolved as shift
WARNING: shift/reduce conflict for INT in state 59 resolved as shift
WARNING: shift/reduce conflict for STR in state 59 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 59 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 69 resolved as shift
WARNING: shift/reduce conflict for INT in state 69 resolved as shift
WARNING: shift/reduce conflict for STR in state 69 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 69 resolved as shift
WARNING: shift/reduce conflict for INT in state 111 resolved as shift
WARNING: shift/reduce conflict for STR in state 111 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 111 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 111 resolved as shift
WARNING: shift/reduce conflict for IF in state 111 resolved as shift
WARNING: shift/reduce conflict for ID in state 111 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 111 resolved as shift
WARNING: shift/reduce conflict for READF in state 111 resolved as shift
WARNING: shift/reduce conflict for INT in state 130 resolved as shift
WARNING: shift/reduce conflict for STR in state 130 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 130 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 130 resolved as shift
WARNING: shift/reduce conflict for IF in state 130 resolved as shift
WARNING: shift/reduce conflict for ID in state 130 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 130 resolved as shift
WARNING: shift/reduce conflict for READF in state 130 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 132 resolved as shift
WARNING: shift/reduce conflict for INT in state 132 resolved as shift
WARNING: shift/reduce conflict for STR in state 132 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 132 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 132 resolved as shift
WARNING: shift/reduce conflict for IF in state 132 resolved as shift
WARNING: shift/reduce conflict for ID in state 132 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 132 resolved as shift
WARNING: shift/reduce conflict for READF in state 132 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 133 resolved as shift
WARNING: shift/reduce conflict for INT in state 133 resolved as shift
WARNING: shift/reduce conflict for STR in state 133 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 133 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 133 resolved as shift
WARNING: shift/reduce conflict for IF in state 133 resolved as shift
WARNING: shift/reduce conflict for ID in state 133 resolved as shift
WARNING: shift/reduce conflict for WRITELN in state 133 resolved as shift
WARNING: shift/reduce conflict for READF in state 133 resolved as shift
WARNING: reduce/reduce conflict in state 69 resolved using rule (function -> constants VOID MAIN LPAREN RPAREN LBRACE expressions RBRACE constants)
WARNING: rejected rule (empty -> <empty>) in state 69
