Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> exprs
Rule 2     exprs -> exprs expr
Rule 3     exprs -> expr
Rule 4     expr -> constant
Rule 5     expr -> function
Rule 6     expr -> variable
Rule 7     function -> new_scope VOID ID LPAREN params RPAREN LBRACE expressions RBRACE
Rule 8     function -> new_scope VOID ID LPAREN params RPAREN LBRACE RBRACE
Rule 9     params -> STR LSQUARE RSQUARE ID
Rule 10    params -> empty
Rule 11    expressions -> expressions expression
Rule 12    expressions -> expression
Rule 13    expression -> constants
Rule 14    expression -> while
Rule 15    expression -> if
Rule 16    expression -> assigned
Rule 17    expression -> print
Rule 18    expression -> get
Rule 19    expression -> call
Rule 20    call -> ID LPAREN RPAREN SEMICOLON
Rule 21    assigned -> ID ASSIGN type SEMICOLON
Rule 22    while -> WHILE LPAREN statement RPAREN LBRACE new_scope expressions RBRACE
Rule 23    if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE
Rule 24    if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE ELSE LBRACE new_scope expressions RBRACE
Rule 25    statement -> type logic_op type
Rule 26    logic_op -> EQ
Rule 27    logic_op -> NOT_EQ
Rule 28    logic_op -> GREATER
Rule 29    logic_op -> GREATER_EQ
Rule 30    logic_op -> LESS
Rule 31    logic_op -> LESS_EQ
Rule 32    variable -> var_type init SEMICOLON
Rule 33    init -> ID ASSIGN type
Rule 34    init -> ID
Rule 35    var_type -> INT
Rule 36    var_type -> STR
Rule 37    var_type -> BOOL
Rule 38    type -> NUMBER
Rule 39    type -> STRING
Rule 40    type -> boolean
Rule 41    type -> ID
Rule 42    boolean -> TRUE
Rule 43    boolean -> FALSE
Rule 44    constants -> constants constant
Rule 45    constants -> constants variable
Rule 46    constants -> constant
Rule 47    constants -> variable
Rule 48    constant -> ENUM init SEMICOLON
Rule 49    print -> WRITELN LPAREN type RPAREN SEMICOLON
Rule 50    get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON
Rule 51    gets -> GET_INT
Rule 52    gets -> GET_STRING
Rule 53    gets -> GET_BOOL
Rule 54    empty -> <empty>
Rule 55    new_scope -> empty

Terminals, with rules where they appear

AMPERSAND            : 50
ASSIGN               : 21 33
BOOL                 : 37
COMMA                : 50
ELSE                 : 24
ENUM                 : 48
EQ                   : 26
FALSE                : 43
GET_BOOL             : 53
GET_INT              : 51
GET_STRING           : 52
GREATER              : 28
GREATER_EQ           : 29
ID                   : 7 8 9 20 21 33 34 41 50
IF                   : 23 24
INT                  : 35
LBRACE               : 7 8 22 23 24 24
LESS                 : 30
LESS_EQ              : 31
LPAREN               : 7 8 20 22 23 24 49 50
LSQUARE              : 9
NOT_EQ               : 27
NUMBER               : 38
RBRACE               : 7 8 22 23 24 24
READF                : 50
RPAREN               : 7 8 20 22 23 24 49 50
RSQUARE              : 9
SEMICOLON            : 20 21 32 48 49 50
STR                  : 9 36
STRING               : 39
TRUE                 : 42
VOID                 : 7 8
WHILE                : 22
WRITELN              : 49
error                : 

Nonterminals, with rules where they appear

assigned             : 16
boolean              : 40
call                 : 19
constant             : 4 44 46
constants            : 13 44 45
empty                : 10 55
expr                 : 2 3
expression           : 11 12
expressions          : 7 11 22 23 24 24
exprs                : 1 2
function             : 5
get                  : 18
gets                 : 50
if                   : 15
init                 : 32 48
logic_op             : 25
new_scope            : 7 8 22 23 24 24
params               : 7 8
print                : 17
start                : 0
statement            : 22 23 24
type                 : 21 25 25 33 49
var_type             : 32
variable             : 6 45 47
while                : 14

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . exprs
    (2) exprs -> . exprs expr
    (3) exprs -> . expr
    (4) expr -> . constant
    (5) expr -> . function
    (6) expr -> . variable
    (48) constant -> . ENUM init SEMICOLON
    (7) function -> . new_scope VOID ID LPAREN params RPAREN LBRACE expressions RBRACE
    (8) function -> . new_scope VOID ID LPAREN params RPAREN LBRACE RBRACE
    (32) variable -> . var_type init SEMICOLON
    (55) new_scope -> . empty
    (35) var_type -> . INT
    (36) var_type -> . STR
    (37) var_type -> . BOOL
    (54) empty -> .

    ENUM            shift and go to state 8
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 13
    VOID            reduce using rule 54 (empty -> .)

    function                       shift and go to state 7
    constant                       shift and go to state 1
    var_type                       shift and go to state 3
    exprs                          shift and go to state 12
    expr                           shift and go to state 11
    new_scope                      shift and go to state 4
    start                          shift and go to state 5
    variable                       shift and go to state 9
    empty                          shift and go to state 6

state 1

    (4) expr -> constant .

    ENUM            reduce using rule 4 (expr -> constant .)
    INT             reduce using rule 4 (expr -> constant .)
    STR             reduce using rule 4 (expr -> constant .)
    BOOL            reduce using rule 4 (expr -> constant .)
    VOID            reduce using rule 4 (expr -> constant .)
    $end            reduce using rule 4 (expr -> constant .)


state 2

    (36) var_type -> STR .

    ID              reduce using rule 36 (var_type -> STR .)


state 3

    (32) variable -> var_type . init SEMICOLON
    (33) init -> . ID ASSIGN type
    (34) init -> . ID

    ID              shift and go to state 14

    init                           shift and go to state 15

state 4

    (7) function -> new_scope . VOID ID LPAREN params RPAREN LBRACE expressions RBRACE
    (8) function -> new_scope . VOID ID LPAREN params RPAREN LBRACE RBRACE

    VOID            shift and go to state 16


state 5

    (0) S' -> start .



state 6

    (55) new_scope -> empty .

    VOID            reduce using rule 55 (new_scope -> empty .)
    WHILE           reduce using rule 55 (new_scope -> empty .)
    IF              reduce using rule 55 (new_scope -> empty .)
    ID              reduce using rule 55 (new_scope -> empty .)
    WRITELN         reduce using rule 55 (new_scope -> empty .)
    READF           reduce using rule 55 (new_scope -> empty .)
    ENUM            reduce using rule 55 (new_scope -> empty .)
    INT             reduce using rule 55 (new_scope -> empty .)
    STR             reduce using rule 55 (new_scope -> empty .)
    BOOL            reduce using rule 55 (new_scope -> empty .)


state 7

    (5) expr -> function .

    ENUM            reduce using rule 5 (expr -> function .)
    INT             reduce using rule 5 (expr -> function .)
    STR             reduce using rule 5 (expr -> function .)
    BOOL            reduce using rule 5 (expr -> function .)
    VOID            reduce using rule 5 (expr -> function .)
    $end            reduce using rule 5 (expr -> function .)


state 8

    (48) constant -> ENUM . init SEMICOLON
    (33) init -> . ID ASSIGN type
    (34) init -> . ID

    ID              shift and go to state 14

    init                           shift and go to state 17

state 9

    (6) expr -> variable .

    ENUM            reduce using rule 6 (expr -> variable .)
    INT             reduce using rule 6 (expr -> variable .)
    STR             reduce using rule 6 (expr -> variable .)
    BOOL            reduce using rule 6 (expr -> variable .)
    VOID            reduce using rule 6 (expr -> variable .)
    $end            reduce using rule 6 (expr -> variable .)


state 10

    (35) var_type -> INT .

    ID              reduce using rule 35 (var_type -> INT .)


state 11

    (3) exprs -> expr .

    ENUM            reduce using rule 3 (exprs -> expr .)
    INT             reduce using rule 3 (exprs -> expr .)
    STR             reduce using rule 3 (exprs -> expr .)
    BOOL            reduce using rule 3 (exprs -> expr .)
    VOID            reduce using rule 3 (exprs -> expr .)
    $end            reduce using rule 3 (exprs -> expr .)


state 12

    (1) start -> exprs .
    (2) exprs -> exprs . expr
    (4) expr -> . constant
    (5) expr -> . function
    (6) expr -> . variable
    (48) constant -> . ENUM init SEMICOLON
    (7) function -> . new_scope VOID ID LPAREN params RPAREN LBRACE expressions RBRACE
    (8) function -> . new_scope VOID ID LPAREN params RPAREN LBRACE RBRACE
    (32) variable -> . var_type init SEMICOLON
    (55) new_scope -> . empty
    (35) var_type -> . INT
    (36) var_type -> . STR
    (37) var_type -> . BOOL
    (54) empty -> .

    $end            reduce using rule 1 (start -> exprs .)
    ENUM            shift and go to state 8
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 13
    VOID            reduce using rule 54 (empty -> .)

    function                       shift and go to state 7
    constant                       shift and go to state 1
    var_type                       shift and go to state 3
    expr                           shift and go to state 18
    new_scope                      shift and go to state 4
    variable                       shift and go to state 9
    empty                          shift and go to state 6

state 13

    (37) var_type -> BOOL .

    ID              reduce using rule 37 (var_type -> BOOL .)


state 14

    (33) init -> ID . ASSIGN type
    (34) init -> ID .

    ASSIGN          shift and go to state 19
    SEMICOLON       reduce using rule 34 (init -> ID .)


state 15

    (32) variable -> var_type init . SEMICOLON

    SEMICOLON       shift and go to state 20


state 16

    (7) function -> new_scope VOID . ID LPAREN params RPAREN LBRACE expressions RBRACE
    (8) function -> new_scope VOID . ID LPAREN params RPAREN LBRACE RBRACE

    ID              shift and go to state 21


state 17

    (48) constant -> ENUM init . SEMICOLON

    SEMICOLON       shift and go to state 22


state 18

    (2) exprs -> exprs expr .

    ENUM            reduce using rule 2 (exprs -> exprs expr .)
    INT             reduce using rule 2 (exprs -> exprs expr .)
    STR             reduce using rule 2 (exprs -> exprs expr .)
    BOOL            reduce using rule 2 (exprs -> exprs expr .)
    VOID            reduce using rule 2 (exprs -> exprs expr .)
    $end            reduce using rule 2 (exprs -> exprs expr .)


state 19

    (33) init -> ID ASSIGN . type
    (38) type -> . NUMBER
    (39) type -> . STRING
    (40) type -> . boolean
    (41) type -> . ID
    (42) boolean -> . TRUE
    (43) boolean -> . FALSE

    NUMBER          shift and go to state 26
    STRING          shift and go to state 24
    ID              shift and go to state 29
    TRUE            shift and go to state 25
    FALSE           shift and go to state 23

    boolean                        shift and go to state 27
    type                           shift and go to state 28

state 20

    (32) variable -> var_type init SEMICOLON .

    ENUM            reduce using rule 32 (variable -> var_type init SEMICOLON .)
    INT             reduce using rule 32 (variable -> var_type init SEMICOLON .)
    STR             reduce using rule 32 (variable -> var_type init SEMICOLON .)
    BOOL            reduce using rule 32 (variable -> var_type init SEMICOLON .)
    RBRACE          reduce using rule 32 (variable -> var_type init SEMICOLON .)
    WHILE           reduce using rule 32 (variable -> var_type init SEMICOLON .)
    IF              reduce using rule 32 (variable -> var_type init SEMICOLON .)
    ID              reduce using rule 32 (variable -> var_type init SEMICOLON .)
    WRITELN         reduce using rule 32 (variable -> var_type init SEMICOLON .)
    READF           reduce using rule 32 (variable -> var_type init SEMICOLON .)
    VOID            reduce using rule 32 (variable -> var_type init SEMICOLON .)
    $end            reduce using rule 32 (variable -> var_type init SEMICOLON .)


state 21

    (7) function -> new_scope VOID ID . LPAREN params RPAREN LBRACE expressions RBRACE
    (8) function -> new_scope VOID ID . LPAREN params RPAREN LBRACE RBRACE

    LPAREN          shift and go to state 30


state 22

    (48) constant -> ENUM init SEMICOLON .

    ENUM            reduce using rule 48 (constant -> ENUM init SEMICOLON .)
    INT             reduce using rule 48 (constant -> ENUM init SEMICOLON .)
    STR             reduce using rule 48 (constant -> ENUM init SEMICOLON .)
    BOOL            reduce using rule 48 (constant -> ENUM init SEMICOLON .)
    RBRACE          reduce using rule 48 (constant -> ENUM init SEMICOLON .)
    WHILE           reduce using rule 48 (constant -> ENUM init SEMICOLON .)
    IF              reduce using rule 48 (constant -> ENUM init SEMICOLON .)
    ID              reduce using rule 48 (constant -> ENUM init SEMICOLON .)
    WRITELN         reduce using rule 48 (constant -> ENUM init SEMICOLON .)
    READF           reduce using rule 48 (constant -> ENUM init SEMICOLON .)
    VOID            reduce using rule 48 (constant -> ENUM init SEMICOLON .)
    $end            reduce using rule 48 (constant -> ENUM init SEMICOLON .)


state 23

    (43) boolean -> FALSE .

    RPAREN          reduce using rule 43 (boolean -> FALSE .)
    EQ              reduce using rule 43 (boolean -> FALSE .)
    NOT_EQ          reduce using rule 43 (boolean -> FALSE .)
    GREATER         reduce using rule 43 (boolean -> FALSE .)
    GREATER_EQ      reduce using rule 43 (boolean -> FALSE .)
    LESS            reduce using rule 43 (boolean -> FALSE .)
    LESS_EQ         reduce using rule 43 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 43 (boolean -> FALSE .)


state 24

    (39) type -> STRING .

    SEMICOLON       reduce using rule 39 (type -> STRING .)
    RPAREN          reduce using rule 39 (type -> STRING .)
    EQ              reduce using rule 39 (type -> STRING .)
    NOT_EQ          reduce using rule 39 (type -> STRING .)
    GREATER         reduce using rule 39 (type -> STRING .)
    GREATER_EQ      reduce using rule 39 (type -> STRING .)
    LESS            reduce using rule 39 (type -> STRING .)
    LESS_EQ         reduce using rule 39 (type -> STRING .)


state 25

    (42) boolean -> TRUE .

    RPAREN          reduce using rule 42 (boolean -> TRUE .)
    EQ              reduce using rule 42 (boolean -> TRUE .)
    NOT_EQ          reduce using rule 42 (boolean -> TRUE .)
    GREATER         reduce using rule 42 (boolean -> TRUE .)
    GREATER_EQ      reduce using rule 42 (boolean -> TRUE .)
    LESS            reduce using rule 42 (boolean -> TRUE .)
    LESS_EQ         reduce using rule 42 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 42 (boolean -> TRUE .)


state 26

    (38) type -> NUMBER .

    SEMICOLON       reduce using rule 38 (type -> NUMBER .)
    RPAREN          reduce using rule 38 (type -> NUMBER .)
    EQ              reduce using rule 38 (type -> NUMBER .)
    NOT_EQ          reduce using rule 38 (type -> NUMBER .)
    GREATER         reduce using rule 38 (type -> NUMBER .)
    GREATER_EQ      reduce using rule 38 (type -> NUMBER .)
    LESS            reduce using rule 38 (type -> NUMBER .)
    LESS_EQ         reduce using rule 38 (type -> NUMBER .)


state 27

    (40) type -> boolean .

    SEMICOLON       reduce using rule 40 (type -> boolean .)
    RPAREN          reduce using rule 40 (type -> boolean .)
    EQ              reduce using rule 40 (type -> boolean .)
    NOT_EQ          reduce using rule 40 (type -> boolean .)
    GREATER         reduce using rule 40 (type -> boolean .)
    GREATER_EQ      reduce using rule 40 (type -> boolean .)
    LESS            reduce using rule 40 (type -> boolean .)
    LESS_EQ         reduce using rule 40 (type -> boolean .)


state 28

    (33) init -> ID ASSIGN type .

    SEMICOLON       reduce using rule 33 (init -> ID ASSIGN type .)


state 29

    (41) type -> ID .

    SEMICOLON       reduce using rule 41 (type -> ID .)
    RPAREN          reduce using rule 41 (type -> ID .)
    EQ              reduce using rule 41 (type -> ID .)
    NOT_EQ          reduce using rule 41 (type -> ID .)
    GREATER         reduce using rule 41 (type -> ID .)
    GREATER_EQ      reduce using rule 41 (type -> ID .)
    LESS            reduce using rule 41 (type -> ID .)
    LESS_EQ         reduce using rule 41 (type -> ID .)


state 30

    (7) function -> new_scope VOID ID LPAREN . params RPAREN LBRACE expressions RBRACE
    (8) function -> new_scope VOID ID LPAREN . params RPAREN LBRACE RBRACE
    (9) params -> . STR LSQUARE RSQUARE ID
    (10) params -> . empty
    (54) empty -> .

    STR             shift and go to state 31
    RPAREN          reduce using rule 54 (empty -> .)

    params                         shift and go to state 32
    empty                          shift and go to state 33

state 31

    (9) params -> STR . LSQUARE RSQUARE ID

    LSQUARE         shift and go to state 34


state 32

    (7) function -> new_scope VOID ID LPAREN params . RPAREN LBRACE expressions RBRACE
    (8) function -> new_scope VOID ID LPAREN params . RPAREN LBRACE RBRACE

    RPAREN          shift and go to state 35


state 33

    (10) params -> empty .

    RPAREN          reduce using rule 10 (params -> empty .)


state 34

    (9) params -> STR LSQUARE . RSQUARE ID

    RSQUARE         shift and go to state 36


state 35

    (7) function -> new_scope VOID ID LPAREN params RPAREN . LBRACE expressions RBRACE
    (8) function -> new_scope VOID ID LPAREN params RPAREN . LBRACE RBRACE

    LBRACE          shift and go to state 37


state 36

    (9) params -> STR LSQUARE RSQUARE . ID

    ID              shift and go to state 38


state 37

    (7) function -> new_scope VOID ID LPAREN params RPAREN LBRACE . expressions RBRACE
    (8) function -> new_scope VOID ID LPAREN params RPAREN LBRACE . RBRACE
    (11) expressions -> . expressions expression
    (12) expressions -> . expression
    (13) expression -> . constants
    (14) expression -> . while
    (15) expression -> . if
    (16) expression -> . assigned
    (17) expression -> . print
    (18) expression -> . get
    (19) expression -> . call
    (44) constants -> . constants constant
    (45) constants -> . constants variable
    (46) constants -> . constant
    (47) constants -> . variable
    (22) while -> . WHILE LPAREN statement RPAREN LBRACE new_scope expressions RBRACE
    (23) if -> . IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE
    (24) if -> . IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE ELSE LBRACE new_scope expressions RBRACE
    (21) assigned -> . ID ASSIGN type SEMICOLON
    (49) print -> . WRITELN LPAREN type RPAREN SEMICOLON
    (50) get -> . READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON
    (20) call -> . ID LPAREN RPAREN SEMICOLON
    (48) constant -> . ENUM init SEMICOLON
    (32) variable -> . var_type init SEMICOLON
    (35) var_type -> . INT
    (36) var_type -> . STR
    (37) var_type -> . BOOL

    RBRACE          shift and go to state 46
    WHILE           shift and go to state 41
    IF              shift and go to state 52
    ID              shift and go to state 50
    WRITELN         shift and go to state 48
    READF           shift and go to state 53
    ENUM            shift and go to state 8
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 13

    constant                       shift and go to state 39
    var_type                       shift and go to state 3
    get                            shift and go to state 47
    assigned                       shift and go to state 40
    variable                       shift and go to state 49
    while                          shift and go to state 54
    print                          shift and go to state 44
    call                           shift and go to state 45
    expressions                    shift and go to state 42
    expression                     shift and go to state 55
    constants                      shift and go to state 51
    if                             shift and go to state 43

state 38

    (9) params -> STR LSQUARE RSQUARE ID .

    RPAREN          reduce using rule 9 (params -> STR LSQUARE RSQUARE ID .)


state 39

    (46) constants -> constant .

    ENUM            reduce using rule 46 (constants -> constant .)
    INT             reduce using rule 46 (constants -> constant .)
    STR             reduce using rule 46 (constants -> constant .)
    BOOL            reduce using rule 46 (constants -> constant .)
    RBRACE          reduce using rule 46 (constants -> constant .)
    WHILE           reduce using rule 46 (constants -> constant .)
    IF              reduce using rule 46 (constants -> constant .)
    ID              reduce using rule 46 (constants -> constant .)
    WRITELN         reduce using rule 46 (constants -> constant .)
    READF           reduce using rule 46 (constants -> constant .)


state 40

    (16) expression -> assigned .

    RBRACE          reduce using rule 16 (expression -> assigned .)
    WHILE           reduce using rule 16 (expression -> assigned .)
    IF              reduce using rule 16 (expression -> assigned .)
    ID              reduce using rule 16 (expression -> assigned .)
    WRITELN         reduce using rule 16 (expression -> assigned .)
    READF           reduce using rule 16 (expression -> assigned .)
    ENUM            reduce using rule 16 (expression -> assigned .)
    INT             reduce using rule 16 (expression -> assigned .)
    STR             reduce using rule 16 (expression -> assigned .)
    BOOL            reduce using rule 16 (expression -> assigned .)


state 41

    (22) while -> WHILE . LPAREN statement RPAREN LBRACE new_scope expressions RBRACE

    LPAREN          shift and go to state 56


state 42

    (7) function -> new_scope VOID ID LPAREN params RPAREN LBRACE expressions . RBRACE
    (11) expressions -> expressions . expression
    (13) expression -> . constants
    (14) expression -> . while
    (15) expression -> . if
    (16) expression -> . assigned
    (17) expression -> . print
    (18) expression -> . get
    (19) expression -> . call
    (44) constants -> . constants constant
    (45) constants -> . constants variable
    (46) constants -> . constant
    (47) constants -> . variable
    (22) while -> . WHILE LPAREN statement RPAREN LBRACE new_scope expressions RBRACE
    (23) if -> . IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE
    (24) if -> . IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE ELSE LBRACE new_scope expressions RBRACE
    (21) assigned -> . ID ASSIGN type SEMICOLON
    (49) print -> . WRITELN LPAREN type RPAREN SEMICOLON
    (50) get -> . READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON
    (20) call -> . ID LPAREN RPAREN SEMICOLON
    (48) constant -> . ENUM init SEMICOLON
    (32) variable -> . var_type init SEMICOLON
    (35) var_type -> . INT
    (36) var_type -> . STR
    (37) var_type -> . BOOL

    RBRACE          shift and go to state 57
    WHILE           shift and go to state 41
    IF              shift and go to state 52
    ID              shift and go to state 50
    WRITELN         shift and go to state 48
    READF           shift and go to state 53
    ENUM            shift and go to state 8
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 13

    constant                       shift and go to state 39
    var_type                       shift and go to state 3
    get                            shift and go to state 47
    assigned                       shift and go to state 40
    variable                       shift and go to state 49
    while                          shift and go to state 54
    print                          shift and go to state 44
    call                           shift and go to state 45
    expression                     shift and go to state 58
    constants                      shift and go to state 51
    if                             shift and go to state 43

state 43

    (15) expression -> if .

    RBRACE          reduce using rule 15 (expression -> if .)
    WHILE           reduce using rule 15 (expression -> if .)
    IF              reduce using rule 15 (expression -> if .)
    ID              reduce using rule 15 (expression -> if .)
    WRITELN         reduce using rule 15 (expression -> if .)
    READF           reduce using rule 15 (expression -> if .)
    ENUM            reduce using rule 15 (expression -> if .)
    INT             reduce using rule 15 (expression -> if .)
    STR             reduce using rule 15 (expression -> if .)
    BOOL            reduce using rule 15 (expression -> if .)


state 44

    (17) expression -> print .

    RBRACE          reduce using rule 17 (expression -> print .)
    WHILE           reduce using rule 17 (expression -> print .)
    IF              reduce using rule 17 (expression -> print .)
    ID              reduce using rule 17 (expression -> print .)
    WRITELN         reduce using rule 17 (expression -> print .)
    READF           reduce using rule 17 (expression -> print .)
    ENUM            reduce using rule 17 (expression -> print .)
    INT             reduce using rule 17 (expression -> print .)
    STR             reduce using rule 17 (expression -> print .)
    BOOL            reduce using rule 17 (expression -> print .)


state 45

    (19) expression -> call .

    RBRACE          reduce using rule 19 (expression -> call .)
    WHILE           reduce using rule 19 (expression -> call .)
    IF              reduce using rule 19 (expression -> call .)
    ID              reduce using rule 19 (expression -> call .)
    WRITELN         reduce using rule 19 (expression -> call .)
    READF           reduce using rule 19 (expression -> call .)
    ENUM            reduce using rule 19 (expression -> call .)
    INT             reduce using rule 19 (expression -> call .)
    STR             reduce using rule 19 (expression -> call .)
    BOOL            reduce using rule 19 (expression -> call .)


state 46

    (8) function -> new_scope VOID ID LPAREN params RPAREN LBRACE RBRACE .

    ENUM            reduce using rule 8 (function -> new_scope VOID ID LPAREN params RPAREN LBRACE RBRACE .)
    INT             reduce using rule 8 (function -> new_scope VOID ID LPAREN params RPAREN LBRACE RBRACE .)
    STR             reduce using rule 8 (function -> new_scope VOID ID LPAREN params RPAREN LBRACE RBRACE .)
    BOOL            reduce using rule 8 (function -> new_scope VOID ID LPAREN params RPAREN LBRACE RBRACE .)
    VOID            reduce using rule 8 (function -> new_scope VOID ID LPAREN params RPAREN LBRACE RBRACE .)
    $end            reduce using rule 8 (function -> new_scope VOID ID LPAREN params RPAREN LBRACE RBRACE .)


state 47

    (18) expression -> get .

    RBRACE          reduce using rule 18 (expression -> get .)
    WHILE           reduce using rule 18 (expression -> get .)
    IF              reduce using rule 18 (expression -> get .)
    ID              reduce using rule 18 (expression -> get .)
    WRITELN         reduce using rule 18 (expression -> get .)
    READF           reduce using rule 18 (expression -> get .)
    ENUM            reduce using rule 18 (expression -> get .)
    INT             reduce using rule 18 (expression -> get .)
    STR             reduce using rule 18 (expression -> get .)
    BOOL            reduce using rule 18 (expression -> get .)


state 48

    (49) print -> WRITELN . LPAREN type RPAREN SEMICOLON

    LPAREN          shift and go to state 59


state 49

    (47) constants -> variable .

    ENUM            reduce using rule 47 (constants -> variable .)
    INT             reduce using rule 47 (constants -> variable .)
    STR             reduce using rule 47 (constants -> variable .)
    BOOL            reduce using rule 47 (constants -> variable .)
    RBRACE          reduce using rule 47 (constants -> variable .)
    WHILE           reduce using rule 47 (constants -> variable .)
    IF              reduce using rule 47 (constants -> variable .)
    ID              reduce using rule 47 (constants -> variable .)
    WRITELN         reduce using rule 47 (constants -> variable .)
    READF           reduce using rule 47 (constants -> variable .)


state 50

    (21) assigned -> ID . ASSIGN type SEMICOLON
    (20) call -> ID . LPAREN RPAREN SEMICOLON

    ASSIGN          shift and go to state 60
    LPAREN          shift and go to state 61


state 51

    (13) expression -> constants .
    (44) constants -> constants . constant
    (45) constants -> constants . variable
    (48) constant -> . ENUM init SEMICOLON
    (32) variable -> . var_type init SEMICOLON
    (35) var_type -> . INT
    (36) var_type -> . STR
    (37) var_type -> . BOOL

  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    RBRACE          reduce using rule 13 (expression -> constants .)
    WHILE           reduce using rule 13 (expression -> constants .)
    IF              reduce using rule 13 (expression -> constants .)
    ID              reduce using rule 13 (expression -> constants .)
    WRITELN         reduce using rule 13 (expression -> constants .)
    READF           reduce using rule 13 (expression -> constants .)
    ENUM            shift and go to state 8
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 13

  ! ENUM            [ reduce using rule 13 (expression -> constants .) ]
  ! INT             [ reduce using rule 13 (expression -> constants .) ]
  ! STR             [ reduce using rule 13 (expression -> constants .) ]
  ! BOOL            [ reduce using rule 13 (expression -> constants .) ]

    variable                       shift and go to state 63
    constant                       shift and go to state 62
    var_type                       shift and go to state 3

state 52

    (23) if -> IF . LPAREN statement RPAREN LBRACE new_scope expressions RBRACE
    (24) if -> IF . LPAREN statement RPAREN LBRACE new_scope expressions RBRACE ELSE LBRACE new_scope expressions RBRACE

    LPAREN          shift and go to state 64


state 53

    (50) get -> READF . LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON

    LPAREN          shift and go to state 65


state 54

    (14) expression -> while .

    RBRACE          reduce using rule 14 (expression -> while .)
    WHILE           reduce using rule 14 (expression -> while .)
    IF              reduce using rule 14 (expression -> while .)
    ID              reduce using rule 14 (expression -> while .)
    WRITELN         reduce using rule 14 (expression -> while .)
    READF           reduce using rule 14 (expression -> while .)
    ENUM            reduce using rule 14 (expression -> while .)
    INT             reduce using rule 14 (expression -> while .)
    STR             reduce using rule 14 (expression -> while .)
    BOOL            reduce using rule 14 (expression -> while .)


state 55

    (12) expressions -> expression .

    RBRACE          reduce using rule 12 (expressions -> expression .)
    WHILE           reduce using rule 12 (expressions -> expression .)
    IF              reduce using rule 12 (expressions -> expression .)
    ID              reduce using rule 12 (expressions -> expression .)
    WRITELN         reduce using rule 12 (expressions -> expression .)
    READF           reduce using rule 12 (expressions -> expression .)
    ENUM            reduce using rule 12 (expressions -> expression .)
    INT             reduce using rule 12 (expressions -> expression .)
    STR             reduce using rule 12 (expressions -> expression .)
    BOOL            reduce using rule 12 (expressions -> expression .)


state 56

    (22) while -> WHILE LPAREN . statement RPAREN LBRACE new_scope expressions RBRACE
    (25) statement -> . type logic_op type
    (38) type -> . NUMBER
    (39) type -> . STRING
    (40) type -> . boolean
    (41) type -> . ID
    (42) boolean -> . TRUE
    (43) boolean -> . FALSE

    NUMBER          shift and go to state 26
    STRING          shift and go to state 24
    ID              shift and go to state 29
    TRUE            shift and go to state 25
    FALSE           shift and go to state 23

    boolean                        shift and go to state 27
    statement                      shift and go to state 66
    type                           shift and go to state 67

state 57

    (7) function -> new_scope VOID ID LPAREN params RPAREN LBRACE expressions RBRACE .

    ENUM            reduce using rule 7 (function -> new_scope VOID ID LPAREN params RPAREN LBRACE expressions RBRACE .)
    INT             reduce using rule 7 (function -> new_scope VOID ID LPAREN params RPAREN LBRACE expressions RBRACE .)
    STR             reduce using rule 7 (function -> new_scope VOID ID LPAREN params RPAREN LBRACE expressions RBRACE .)
    BOOL            reduce using rule 7 (function -> new_scope VOID ID LPAREN params RPAREN LBRACE expressions RBRACE .)
    VOID            reduce using rule 7 (function -> new_scope VOID ID LPAREN params RPAREN LBRACE expressions RBRACE .)
    $end            reduce using rule 7 (function -> new_scope VOID ID LPAREN params RPAREN LBRACE expressions RBRACE .)


state 58

    (11) expressions -> expressions expression .

    RBRACE          reduce using rule 11 (expressions -> expressions expression .)
    WHILE           reduce using rule 11 (expressions -> expressions expression .)
    IF              reduce using rule 11 (expressions -> expressions expression .)
    ID              reduce using rule 11 (expressions -> expressions expression .)
    WRITELN         reduce using rule 11 (expressions -> expressions expression .)
    READF           reduce using rule 11 (expressions -> expressions expression .)
    ENUM            reduce using rule 11 (expressions -> expressions expression .)
    INT             reduce using rule 11 (expressions -> expressions expression .)
    STR             reduce using rule 11 (expressions -> expressions expression .)
    BOOL            reduce using rule 11 (expressions -> expressions expression .)


state 59

    (49) print -> WRITELN LPAREN . type RPAREN SEMICOLON
    (38) type -> . NUMBER
    (39) type -> . STRING
    (40) type -> . boolean
    (41) type -> . ID
    (42) boolean -> . TRUE
    (43) boolean -> . FALSE

    NUMBER          shift and go to state 26
    STRING          shift and go to state 24
    ID              shift and go to state 29
    TRUE            shift and go to state 25
    FALSE           shift and go to state 23

    boolean                        shift and go to state 27
    type                           shift and go to state 68

state 60

    (21) assigned -> ID ASSIGN . type SEMICOLON
    (38) type -> . NUMBER
    (39) type -> . STRING
    (40) type -> . boolean
    (41) type -> . ID
    (42) boolean -> . TRUE
    (43) boolean -> . FALSE

    NUMBER          shift and go to state 26
    STRING          shift and go to state 24
    ID              shift and go to state 29
    TRUE            shift and go to state 25
    FALSE           shift and go to state 23

    boolean                        shift and go to state 27
    type                           shift and go to state 69

state 61

    (20) call -> ID LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 70


state 62

    (44) constants -> constants constant .

    ENUM            reduce using rule 44 (constants -> constants constant .)
    INT             reduce using rule 44 (constants -> constants constant .)
    STR             reduce using rule 44 (constants -> constants constant .)
    BOOL            reduce using rule 44 (constants -> constants constant .)
    RBRACE          reduce using rule 44 (constants -> constants constant .)
    WHILE           reduce using rule 44 (constants -> constants constant .)
    IF              reduce using rule 44 (constants -> constants constant .)
    ID              reduce using rule 44 (constants -> constants constant .)
    WRITELN         reduce using rule 44 (constants -> constants constant .)
    READF           reduce using rule 44 (constants -> constants constant .)


state 63

    (45) constants -> constants variable .

    ENUM            reduce using rule 45 (constants -> constants variable .)
    INT             reduce using rule 45 (constants -> constants variable .)
    STR             reduce using rule 45 (constants -> constants variable .)
    BOOL            reduce using rule 45 (constants -> constants variable .)
    RBRACE          reduce using rule 45 (constants -> constants variable .)
    WHILE           reduce using rule 45 (constants -> constants variable .)
    IF              reduce using rule 45 (constants -> constants variable .)
    ID              reduce using rule 45 (constants -> constants variable .)
    WRITELN         reduce using rule 45 (constants -> constants variable .)
    READF           reduce using rule 45 (constants -> constants variable .)


state 64

    (23) if -> IF LPAREN . statement RPAREN LBRACE new_scope expressions RBRACE
    (24) if -> IF LPAREN . statement RPAREN LBRACE new_scope expressions RBRACE ELSE LBRACE new_scope expressions RBRACE
    (25) statement -> . type logic_op type
    (38) type -> . NUMBER
    (39) type -> . STRING
    (40) type -> . boolean
    (41) type -> . ID
    (42) boolean -> . TRUE
    (43) boolean -> . FALSE

    NUMBER          shift and go to state 26
    STRING          shift and go to state 24
    ID              shift and go to state 29
    TRUE            shift and go to state 25
    FALSE           shift and go to state 23

    boolean                        shift and go to state 27
    statement                      shift and go to state 71
    type                           shift and go to state 67

state 65

    (50) get -> READF LPAREN . gets COMMA AMPERSAND ID RPAREN SEMICOLON
    (51) gets -> . GET_INT
    (52) gets -> . GET_STRING
    (53) gets -> . GET_BOOL

    GET_INT         shift and go to state 74
    GET_STRING      shift and go to state 73
    GET_BOOL        shift and go to state 72

    gets                           shift and go to state 75

state 66

    (22) while -> WHILE LPAREN statement . RPAREN LBRACE new_scope expressions RBRACE

    RPAREN          shift and go to state 76


state 67

    (25) statement -> type . logic_op type
    (26) logic_op -> . EQ
    (27) logic_op -> . NOT_EQ
    (28) logic_op -> . GREATER
    (29) logic_op -> . GREATER_EQ
    (30) logic_op -> . LESS
    (31) logic_op -> . LESS_EQ

    EQ              shift and go to state 81
    NOT_EQ          shift and go to state 83
    GREATER         shift and go to state 79
    GREATER_EQ      shift and go to state 82
    LESS            shift and go to state 80
    LESS_EQ         shift and go to state 77

    logic_op                       shift and go to state 78

state 68

    (49) print -> WRITELN LPAREN type . RPAREN SEMICOLON

    RPAREN          shift and go to state 84


state 69

    (21) assigned -> ID ASSIGN type . SEMICOLON

    SEMICOLON       shift and go to state 85


state 70

    (20) call -> ID LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 86


state 71

    (23) if -> IF LPAREN statement . RPAREN LBRACE new_scope expressions RBRACE
    (24) if -> IF LPAREN statement . RPAREN LBRACE new_scope expressions RBRACE ELSE LBRACE new_scope expressions RBRACE

    RPAREN          shift and go to state 87


state 72

    (53) gets -> GET_BOOL .

    COMMA           reduce using rule 53 (gets -> GET_BOOL .)


state 73

    (52) gets -> GET_STRING .

    COMMA           reduce using rule 52 (gets -> GET_STRING .)


state 74

    (51) gets -> GET_INT .

    COMMA           reduce using rule 51 (gets -> GET_INT .)


state 75

    (50) get -> READF LPAREN gets . COMMA AMPERSAND ID RPAREN SEMICOLON

    COMMA           shift and go to state 88


state 76

    (22) while -> WHILE LPAREN statement RPAREN . LBRACE new_scope expressions RBRACE

    LBRACE          shift and go to state 89


state 77

    (31) logic_op -> LESS_EQ .

    NUMBER          reduce using rule 31 (logic_op -> LESS_EQ .)
    STRING          reduce using rule 31 (logic_op -> LESS_EQ .)
    ID              reduce using rule 31 (logic_op -> LESS_EQ .)
    TRUE            reduce using rule 31 (logic_op -> LESS_EQ .)
    FALSE           reduce using rule 31 (logic_op -> LESS_EQ .)


state 78

    (25) statement -> type logic_op . type
    (38) type -> . NUMBER
    (39) type -> . STRING
    (40) type -> . boolean
    (41) type -> . ID
    (42) boolean -> . TRUE
    (43) boolean -> . FALSE

    NUMBER          shift and go to state 26
    STRING          shift and go to state 24
    ID              shift and go to state 29
    TRUE            shift and go to state 25
    FALSE           shift and go to state 23

    boolean                        shift and go to state 27
    type                           shift and go to state 90

state 79

    (28) logic_op -> GREATER .

    NUMBER          reduce using rule 28 (logic_op -> GREATER .)
    STRING          reduce using rule 28 (logic_op -> GREATER .)
    ID              reduce using rule 28 (logic_op -> GREATER .)
    TRUE            reduce using rule 28 (logic_op -> GREATER .)
    FALSE           reduce using rule 28 (logic_op -> GREATER .)


state 80

    (30) logic_op -> LESS .

    NUMBER          reduce using rule 30 (logic_op -> LESS .)
    STRING          reduce using rule 30 (logic_op -> LESS .)
    ID              reduce using rule 30 (logic_op -> LESS .)
    TRUE            reduce using rule 30 (logic_op -> LESS .)
    FALSE           reduce using rule 30 (logic_op -> LESS .)


state 81

    (26) logic_op -> EQ .

    NUMBER          reduce using rule 26 (logic_op -> EQ .)
    STRING          reduce using rule 26 (logic_op -> EQ .)
    ID              reduce using rule 26 (logic_op -> EQ .)
    TRUE            reduce using rule 26 (logic_op -> EQ .)
    FALSE           reduce using rule 26 (logic_op -> EQ .)


state 82

    (29) logic_op -> GREATER_EQ .

    NUMBER          reduce using rule 29 (logic_op -> GREATER_EQ .)
    STRING          reduce using rule 29 (logic_op -> GREATER_EQ .)
    ID              reduce using rule 29 (logic_op -> GREATER_EQ .)
    TRUE            reduce using rule 29 (logic_op -> GREATER_EQ .)
    FALSE           reduce using rule 29 (logic_op -> GREATER_EQ .)


state 83

    (27) logic_op -> NOT_EQ .

    NUMBER          reduce using rule 27 (logic_op -> NOT_EQ .)
    STRING          reduce using rule 27 (logic_op -> NOT_EQ .)
    ID              reduce using rule 27 (logic_op -> NOT_EQ .)
    TRUE            reduce using rule 27 (logic_op -> NOT_EQ .)
    FALSE           reduce using rule 27 (logic_op -> NOT_EQ .)


state 84

    (49) print -> WRITELN LPAREN type RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 91


state 85

    (21) assigned -> ID ASSIGN type SEMICOLON .

    RBRACE          reduce using rule 21 (assigned -> ID ASSIGN type SEMICOLON .)
    WHILE           reduce using rule 21 (assigned -> ID ASSIGN type SEMICOLON .)
    IF              reduce using rule 21 (assigned -> ID ASSIGN type SEMICOLON .)
    ID              reduce using rule 21 (assigned -> ID ASSIGN type SEMICOLON .)
    WRITELN         reduce using rule 21 (assigned -> ID ASSIGN type SEMICOLON .)
    READF           reduce using rule 21 (assigned -> ID ASSIGN type SEMICOLON .)
    ENUM            reduce using rule 21 (assigned -> ID ASSIGN type SEMICOLON .)
    INT             reduce using rule 21 (assigned -> ID ASSIGN type SEMICOLON .)
    STR             reduce using rule 21 (assigned -> ID ASSIGN type SEMICOLON .)
    BOOL            reduce using rule 21 (assigned -> ID ASSIGN type SEMICOLON .)


state 86

    (20) call -> ID LPAREN RPAREN SEMICOLON .

    RBRACE          reduce using rule 20 (call -> ID LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 20 (call -> ID LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 20 (call -> ID LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 20 (call -> ID LPAREN RPAREN SEMICOLON .)
    WRITELN         reduce using rule 20 (call -> ID LPAREN RPAREN SEMICOLON .)
    READF           reduce using rule 20 (call -> ID LPAREN RPAREN SEMICOLON .)
    ENUM            reduce using rule 20 (call -> ID LPAREN RPAREN SEMICOLON .)
    INT             reduce using rule 20 (call -> ID LPAREN RPAREN SEMICOLON .)
    STR             reduce using rule 20 (call -> ID LPAREN RPAREN SEMICOLON .)
    BOOL            reduce using rule 20 (call -> ID LPAREN RPAREN SEMICOLON .)


state 87

    (23) if -> IF LPAREN statement RPAREN . LBRACE new_scope expressions RBRACE
    (24) if -> IF LPAREN statement RPAREN . LBRACE new_scope expressions RBRACE ELSE LBRACE new_scope expressions RBRACE

    LBRACE          shift and go to state 92


state 88

    (50) get -> READF LPAREN gets COMMA . AMPERSAND ID RPAREN SEMICOLON

    AMPERSAND       shift and go to state 93


state 89

    (22) while -> WHILE LPAREN statement RPAREN LBRACE . new_scope expressions RBRACE
    (55) new_scope -> . empty
    (54) empty -> .

    WHILE           reduce using rule 54 (empty -> .)
    IF              reduce using rule 54 (empty -> .)
    ID              reduce using rule 54 (empty -> .)
    WRITELN         reduce using rule 54 (empty -> .)
    READF           reduce using rule 54 (empty -> .)
    ENUM            reduce using rule 54 (empty -> .)
    INT             reduce using rule 54 (empty -> .)
    STR             reduce using rule 54 (empty -> .)
    BOOL            reduce using rule 54 (empty -> .)

    new_scope                      shift and go to state 94
    empty                          shift and go to state 6

state 90

    (25) statement -> type logic_op type .

    RPAREN          reduce using rule 25 (statement -> type logic_op type .)


state 91

    (49) print -> WRITELN LPAREN type RPAREN SEMICOLON .

    RBRACE          reduce using rule 49 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)
    WHILE           reduce using rule 49 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)
    IF              reduce using rule 49 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)
    ID              reduce using rule 49 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)
    WRITELN         reduce using rule 49 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)
    READF           reduce using rule 49 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)
    ENUM            reduce using rule 49 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)
    INT             reduce using rule 49 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)
    STR             reduce using rule 49 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)
    BOOL            reduce using rule 49 (print -> WRITELN LPAREN type RPAREN SEMICOLON .)


state 92

    (23) if -> IF LPAREN statement RPAREN LBRACE . new_scope expressions RBRACE
    (24) if -> IF LPAREN statement RPAREN LBRACE . new_scope expressions RBRACE ELSE LBRACE new_scope expressions RBRACE
    (55) new_scope -> . empty
    (54) empty -> .

    WHILE           reduce using rule 54 (empty -> .)
    IF              reduce using rule 54 (empty -> .)
    ID              reduce using rule 54 (empty -> .)
    WRITELN         reduce using rule 54 (empty -> .)
    READF           reduce using rule 54 (empty -> .)
    ENUM            reduce using rule 54 (empty -> .)
    INT             reduce using rule 54 (empty -> .)
    STR             reduce using rule 54 (empty -> .)
    BOOL            reduce using rule 54 (empty -> .)

    new_scope                      shift and go to state 95
    empty                          shift and go to state 6

state 93

    (50) get -> READF LPAREN gets COMMA AMPERSAND . ID RPAREN SEMICOLON

    ID              shift and go to state 96


state 94

    (22) while -> WHILE LPAREN statement RPAREN LBRACE new_scope . expressions RBRACE
    (11) expressions -> . expressions expression
    (12) expressions -> . expression
    (13) expression -> . constants
    (14) expression -> . while
    (15) expression -> . if
    (16) expression -> . assigned
    (17) expression -> . print
    (18) expression -> . get
    (19) expression -> . call
    (44) constants -> . constants constant
    (45) constants -> . constants variable
    (46) constants -> . constant
    (47) constants -> . variable
    (22) while -> . WHILE LPAREN statement RPAREN LBRACE new_scope expressions RBRACE
    (23) if -> . IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE
    (24) if -> . IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE ELSE LBRACE new_scope expressions RBRACE
    (21) assigned -> . ID ASSIGN type SEMICOLON
    (49) print -> . WRITELN LPAREN type RPAREN SEMICOLON
    (50) get -> . READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON
    (20) call -> . ID LPAREN RPAREN SEMICOLON
    (48) constant -> . ENUM init SEMICOLON
    (32) variable -> . var_type init SEMICOLON
    (35) var_type -> . INT
    (36) var_type -> . STR
    (37) var_type -> . BOOL

    WHILE           shift and go to state 41
    IF              shift and go to state 52
    ID              shift and go to state 50
    WRITELN         shift and go to state 48
    READF           shift and go to state 53
    ENUM            shift and go to state 8
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 13

    constant                       shift and go to state 39
    var_type                       shift and go to state 3
    get                            shift and go to state 47
    assigned                       shift and go to state 40
    variable                       shift and go to state 49
    while                          shift and go to state 54
    call                           shift and go to state 45
    print                          shift and go to state 44
    expressions                    shift and go to state 97
    expression                     shift and go to state 55
    constants                      shift and go to state 51
    if                             shift and go to state 43

state 95

    (23) if -> IF LPAREN statement RPAREN LBRACE new_scope . expressions RBRACE
    (24) if -> IF LPAREN statement RPAREN LBRACE new_scope . expressions RBRACE ELSE LBRACE new_scope expressions RBRACE
    (11) expressions -> . expressions expression
    (12) expressions -> . expression
    (13) expression -> . constants
    (14) expression -> . while
    (15) expression -> . if
    (16) expression -> . assigned
    (17) expression -> . print
    (18) expression -> . get
    (19) expression -> . call
    (44) constants -> . constants constant
    (45) constants -> . constants variable
    (46) constants -> . constant
    (47) constants -> . variable
    (22) while -> . WHILE LPAREN statement RPAREN LBRACE new_scope expressions RBRACE
    (23) if -> . IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE
    (24) if -> . IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE ELSE LBRACE new_scope expressions RBRACE
    (21) assigned -> . ID ASSIGN type SEMICOLON
    (49) print -> . WRITELN LPAREN type RPAREN SEMICOLON
    (50) get -> . READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON
    (20) call -> . ID LPAREN RPAREN SEMICOLON
    (48) constant -> . ENUM init SEMICOLON
    (32) variable -> . var_type init SEMICOLON
    (35) var_type -> . INT
    (36) var_type -> . STR
    (37) var_type -> . BOOL

    WHILE           shift and go to state 41
    IF              shift and go to state 52
    ID              shift and go to state 50
    WRITELN         shift and go to state 48
    READF           shift and go to state 53
    ENUM            shift and go to state 8
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 13

    constant                       shift and go to state 39
    var_type                       shift and go to state 3
    get                            shift and go to state 47
    assigned                       shift and go to state 40
    variable                       shift and go to state 49
    while                          shift and go to state 54
    call                           shift and go to state 45
    print                          shift and go to state 44
    expressions                    shift and go to state 98
    expression                     shift and go to state 55
    constants                      shift and go to state 51
    if                             shift and go to state 43

state 96

    (50) get -> READF LPAREN gets COMMA AMPERSAND ID . RPAREN SEMICOLON

    RPAREN          shift and go to state 99


state 97

    (22) while -> WHILE LPAREN statement RPAREN LBRACE new_scope expressions . RBRACE
    (11) expressions -> expressions . expression
    (13) expression -> . constants
    (14) expression -> . while
    (15) expression -> . if
    (16) expression -> . assigned
    (17) expression -> . print
    (18) expression -> . get
    (19) expression -> . call
    (44) constants -> . constants constant
    (45) constants -> . constants variable
    (46) constants -> . constant
    (47) constants -> . variable
    (22) while -> . WHILE LPAREN statement RPAREN LBRACE new_scope expressions RBRACE
    (23) if -> . IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE
    (24) if -> . IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE ELSE LBRACE new_scope expressions RBRACE
    (21) assigned -> . ID ASSIGN type SEMICOLON
    (49) print -> . WRITELN LPAREN type RPAREN SEMICOLON
    (50) get -> . READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON
    (20) call -> . ID LPAREN RPAREN SEMICOLON
    (48) constant -> . ENUM init SEMICOLON
    (32) variable -> . var_type init SEMICOLON
    (35) var_type -> . INT
    (36) var_type -> . STR
    (37) var_type -> . BOOL

    RBRACE          shift and go to state 100
    WHILE           shift and go to state 41
    IF              shift and go to state 52
    ID              shift and go to state 50
    WRITELN         shift and go to state 48
    READF           shift and go to state 53
    ENUM            shift and go to state 8
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 13

    constant                       shift and go to state 39
    var_type                       shift and go to state 3
    get                            shift and go to state 47
    assigned                       shift and go to state 40
    variable                       shift and go to state 49
    while                          shift and go to state 54
    call                           shift and go to state 45
    print                          shift and go to state 44
    expression                     shift and go to state 58
    constants                      shift and go to state 51
    if                             shift and go to state 43

state 98

    (23) if -> IF LPAREN statement RPAREN LBRACE new_scope expressions . RBRACE
    (24) if -> IF LPAREN statement RPAREN LBRACE new_scope expressions . RBRACE ELSE LBRACE new_scope expressions RBRACE
    (11) expressions -> expressions . expression
    (13) expression -> . constants
    (14) expression -> . while
    (15) expression -> . if
    (16) expression -> . assigned
    (17) expression -> . print
    (18) expression -> . get
    (19) expression -> . call
    (44) constants -> . constants constant
    (45) constants -> . constants variable
    (46) constants -> . constant
    (47) constants -> . variable
    (22) while -> . WHILE LPAREN statement RPAREN LBRACE new_scope expressions RBRACE
    (23) if -> . IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE
    (24) if -> . IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE ELSE LBRACE new_scope expressions RBRACE
    (21) assigned -> . ID ASSIGN type SEMICOLON
    (49) print -> . WRITELN LPAREN type RPAREN SEMICOLON
    (50) get -> . READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON
    (20) call -> . ID LPAREN RPAREN SEMICOLON
    (48) constant -> . ENUM init SEMICOLON
    (32) variable -> . var_type init SEMICOLON
    (35) var_type -> . INT
    (36) var_type -> . STR
    (37) var_type -> . BOOL

    RBRACE          shift and go to state 101
    WHILE           shift and go to state 41
    IF              shift and go to state 52
    ID              shift and go to state 50
    WRITELN         shift and go to state 48
    READF           shift and go to state 53
    ENUM            shift and go to state 8
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 13

    constant                       shift and go to state 39
    var_type                       shift and go to state 3
    get                            shift and go to state 47
    assigned                       shift and go to state 40
    variable                       shift and go to state 49
    while                          shift and go to state 54
    call                           shift and go to state 45
    print                          shift and go to state 44
    expression                     shift and go to state 58
    constants                      shift and go to state 51
    if                             shift and go to state 43

state 99

    (50) get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 102


state 100

    (22) while -> WHILE LPAREN statement RPAREN LBRACE new_scope expressions RBRACE .

    RBRACE          reduce using rule 22 (while -> WHILE LPAREN statement RPAREN LBRACE new_scope expressions RBRACE .)
    WHILE           reduce using rule 22 (while -> WHILE LPAREN statement RPAREN LBRACE new_scope expressions RBRACE .)
    IF              reduce using rule 22 (while -> WHILE LPAREN statement RPAREN LBRACE new_scope expressions RBRACE .)
    ID              reduce using rule 22 (while -> WHILE LPAREN statement RPAREN LBRACE new_scope expressions RBRACE .)
    WRITELN         reduce using rule 22 (while -> WHILE LPAREN statement RPAREN LBRACE new_scope expressions RBRACE .)
    READF           reduce using rule 22 (while -> WHILE LPAREN statement RPAREN LBRACE new_scope expressions RBRACE .)
    ENUM            reduce using rule 22 (while -> WHILE LPAREN statement RPAREN LBRACE new_scope expressions RBRACE .)
    INT             reduce using rule 22 (while -> WHILE LPAREN statement RPAREN LBRACE new_scope expressions RBRACE .)
    STR             reduce using rule 22 (while -> WHILE LPAREN statement RPAREN LBRACE new_scope expressions RBRACE .)
    BOOL            reduce using rule 22 (while -> WHILE LPAREN statement RPAREN LBRACE new_scope expressions RBRACE .)


state 101

    (23) if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE .
    (24) if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE . ELSE LBRACE new_scope expressions RBRACE

    RBRACE          reduce using rule 23 (if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE .)
    WHILE           reduce using rule 23 (if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE .)
    IF              reduce using rule 23 (if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE .)
    ID              reduce using rule 23 (if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE .)
    WRITELN         reduce using rule 23 (if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE .)
    READF           reduce using rule 23 (if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE .)
    ENUM            reduce using rule 23 (if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE .)
    INT             reduce using rule 23 (if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE .)
    STR             reduce using rule 23 (if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE .)
    BOOL            reduce using rule 23 (if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE .)
    ELSE            shift and go to state 103


state 102

    (50) get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .

    RBRACE          reduce using rule 50 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)
    WHILE           reduce using rule 50 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)
    IF              reduce using rule 50 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)
    ID              reduce using rule 50 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)
    WRITELN         reduce using rule 50 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)
    READF           reduce using rule 50 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)
    ENUM            reduce using rule 50 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)
    INT             reduce using rule 50 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)
    STR             reduce using rule 50 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)
    BOOL            reduce using rule 50 (get -> READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON .)


state 103

    (24) if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE ELSE . LBRACE new_scope expressions RBRACE

    LBRACE          shift and go to state 104


state 104

    (24) if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE ELSE LBRACE . new_scope expressions RBRACE
    (55) new_scope -> . empty
    (54) empty -> .

    WHILE           reduce using rule 54 (empty -> .)
    IF              reduce using rule 54 (empty -> .)
    ID              reduce using rule 54 (empty -> .)
    WRITELN         reduce using rule 54 (empty -> .)
    READF           reduce using rule 54 (empty -> .)
    ENUM            reduce using rule 54 (empty -> .)
    INT             reduce using rule 54 (empty -> .)
    STR             reduce using rule 54 (empty -> .)
    BOOL            reduce using rule 54 (empty -> .)

    new_scope                      shift and go to state 105
    empty                          shift and go to state 6

state 105

    (24) if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE ELSE LBRACE new_scope . expressions RBRACE
    (11) expressions -> . expressions expression
    (12) expressions -> . expression
    (13) expression -> . constants
    (14) expression -> . while
    (15) expression -> . if
    (16) expression -> . assigned
    (17) expression -> . print
    (18) expression -> . get
    (19) expression -> . call
    (44) constants -> . constants constant
    (45) constants -> . constants variable
    (46) constants -> . constant
    (47) constants -> . variable
    (22) while -> . WHILE LPAREN statement RPAREN LBRACE new_scope expressions RBRACE
    (23) if -> . IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE
    (24) if -> . IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE ELSE LBRACE new_scope expressions RBRACE
    (21) assigned -> . ID ASSIGN type SEMICOLON
    (49) print -> . WRITELN LPAREN type RPAREN SEMICOLON
    (50) get -> . READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON
    (20) call -> . ID LPAREN RPAREN SEMICOLON
    (48) constant -> . ENUM init SEMICOLON
    (32) variable -> . var_type init SEMICOLON
    (35) var_type -> . INT
    (36) var_type -> . STR
    (37) var_type -> . BOOL

    WHILE           shift and go to state 41
    IF              shift and go to state 52
    ID              shift and go to state 50
    WRITELN         shift and go to state 48
    READF           shift and go to state 53
    ENUM            shift and go to state 8
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 13

    constant                       shift and go to state 39
    var_type                       shift and go to state 3
    get                            shift and go to state 47
    assigned                       shift and go to state 40
    variable                       shift and go to state 49
    while                          shift and go to state 54
    call                           shift and go to state 45
    print                          shift and go to state 44
    expressions                    shift and go to state 106
    expression                     shift and go to state 55
    constants                      shift and go to state 51
    if                             shift and go to state 43

state 106

    (24) if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE ELSE LBRACE new_scope expressions . RBRACE
    (11) expressions -> expressions . expression
    (13) expression -> . constants
    (14) expression -> . while
    (15) expression -> . if
    (16) expression -> . assigned
    (17) expression -> . print
    (18) expression -> . get
    (19) expression -> . call
    (44) constants -> . constants constant
    (45) constants -> . constants variable
    (46) constants -> . constant
    (47) constants -> . variable
    (22) while -> . WHILE LPAREN statement RPAREN LBRACE new_scope expressions RBRACE
    (23) if -> . IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE
    (24) if -> . IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE ELSE LBRACE new_scope expressions RBRACE
    (21) assigned -> . ID ASSIGN type SEMICOLON
    (49) print -> . WRITELN LPAREN type RPAREN SEMICOLON
    (50) get -> . READF LPAREN gets COMMA AMPERSAND ID RPAREN SEMICOLON
    (20) call -> . ID LPAREN RPAREN SEMICOLON
    (48) constant -> . ENUM init SEMICOLON
    (32) variable -> . var_type init SEMICOLON
    (35) var_type -> . INT
    (36) var_type -> . STR
    (37) var_type -> . BOOL

    RBRACE          shift and go to state 107
    WHILE           shift and go to state 41
    IF              shift and go to state 52
    ID              shift and go to state 50
    WRITELN         shift and go to state 48
    READF           shift and go to state 53
    ENUM            shift and go to state 8
    INT             shift and go to state 10
    STR             shift and go to state 2
    BOOL            shift and go to state 13

    constant                       shift and go to state 39
    var_type                       shift and go to state 3
    get                            shift and go to state 47
    assigned                       shift and go to state 40
    variable                       shift and go to state 49
    while                          shift and go to state 54
    call                           shift and go to state 45
    print                          shift and go to state 44
    expression                     shift and go to state 58
    constants                      shift and go to state 51
    if                             shift and go to state 43

state 107

    (24) if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE ELSE LBRACE new_scope expressions RBRACE .

    RBRACE          reduce using rule 24 (if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE ELSE LBRACE new_scope expressions RBRACE .)
    WHILE           reduce using rule 24 (if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE ELSE LBRACE new_scope expressions RBRACE .)
    IF              reduce using rule 24 (if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE ELSE LBRACE new_scope expressions RBRACE .)
    ID              reduce using rule 24 (if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE ELSE LBRACE new_scope expressions RBRACE .)
    WRITELN         reduce using rule 24 (if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE ELSE LBRACE new_scope expressions RBRACE .)
    READF           reduce using rule 24 (if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE ELSE LBRACE new_scope expressions RBRACE .)
    ENUM            reduce using rule 24 (if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE ELSE LBRACE new_scope expressions RBRACE .)
    INT             reduce using rule 24 (if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE ELSE LBRACE new_scope expressions RBRACE .)
    STR             reduce using rule 24 (if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE ELSE LBRACE new_scope expressions RBRACE .)
    BOOL            reduce using rule 24 (if -> IF LPAREN statement RPAREN LBRACE new_scope expressions RBRACE ELSE LBRACE new_scope expressions RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ENUM in state 51 resolved as shift
WARNING: shift/reduce conflict for INT in state 51 resolved as shift
WARNING: shift/reduce conflict for STR in state 51 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 51 resolved as shift
